-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Heapwords
--   
--   Heapwords
@package heapwords
@version 0.1.0.1

module Cardano.HeapWords

-- | Size in the heap of values, in words (to get the size in bytes
--   multiply by 4 on a 32-bit machine or 8 on a 64-bit machine)
class HeapWords a
heapWords :: HeapWords a => a -> Int

-- | These functions assume a 64-bit architecture
heapSizeMb :: Int -> Int

-- | These functions assume a 64-bit architecture
heapSizeKb :: Int -> Int
heapWords0 :: Int
heapWords1 :: HeapWords a => a -> Int
heapWords2 :: (HeapWords a1, HeapWords a) => a -> a1 -> Int
heapWords3 :: (HeapWords a2, HeapWords a1, HeapWords a) => a -> a1 -> a2 -> Int
heapWords4 :: (HeapWords a3, HeapWords a2, HeapWords a1, HeapWords a) => a -> a1 -> a2 -> a3 -> Int
heapWords5 :: (HeapWords a4, HeapWords a3, HeapWords a2, HeapWords a1, HeapWords a) => a -> a1 -> a2 -> a3 -> a4 -> Int
heapWords6 :: (HeapWords a5, HeapWords a4, HeapWords a3, HeapWords a2, HeapWords a1, HeapWords a) => a -> a1 -> a2 -> a3 -> a4 -> a5 -> Int
heapWords7 :: (HeapWords a6, HeapWords a5, HeapWords a4, HeapWords a3, HeapWords a2, HeapWords a1, HeapWords a) => a -> a1 -> a2 -> a3 -> a4 -> a5 -> a6 -> Int
heapWords8 :: (HeapWords a7, HeapWords a6, HeapWords a5, HeapWords a4, HeapWords a3, HeapWords a2, HeapWords a1, HeapWords a) => a -> a1 -> a2 -> a3 -> a4 -> a5 -> a6 -> a7 -> Int
heapWords9 :: (HeapWords a8, HeapWords a7, HeapWords a6, HeapWords a5, HeapWords a4, HeapWords a3, HeapWords a2, HeapWords a1, HeapWords a) => a -> a1 -> a2 -> a3 -> a4 -> a5 -> a6 -> a7 -> a8 -> Int
heapWords10 :: (HeapWords a9, HeapWords a8, HeapWords a7, HeapWords a6, HeapWords a5, HeapWords a4, HeapWords a3, HeapWords a2, HeapWords a1, HeapWords a) => a -> a1 -> a2 -> a3 -> a4 -> a5 -> a6 -> a7 -> a8 -> a9 -> Int
heapWords11 :: (HeapWords a10, HeapWords a9, HeapWords a8, HeapWords a7, HeapWords a6, HeapWords a5, HeapWords a4, HeapWords a3, HeapWords a2, HeapWords a1, HeapWords a) => a -> a1 -> a2 -> a3 -> a4 -> a5 -> a6 -> a7 -> a8 -> a9 -> a10 -> Int
heapWords12 :: (HeapWords a11, HeapWords a10, HeapWords a9, HeapWords a8, HeapWords a7, HeapWords a6, HeapWords a5, HeapWords a4, HeapWords a3, HeapWords a2, HeapWords a1, HeapWords a) => a -> a1 -> a2 -> a3 -> a4 -> a5 -> a6 -> a7 -> a8 -> a9 -> a10 -> a11 -> Int
heapWords13 :: (HeapWords a12, HeapWords a11, HeapWords a10, HeapWords a9, HeapWords a8, HeapWords a7, HeapWords a6, HeapWords a5, HeapWords a4, HeapWords a3, HeapWords a2, HeapWords a1, HeapWords a) => a -> a1 -> a2 -> a3 -> a4 -> a5 -> a6 -> a7 -> a8 -> a9 -> a10 -> a11 -> a12 -> Int
heapWordsUArray :: (Ix i, IArray a e) => Int -> a i e -> Int
heapWordsUVector :: Unbox e => Int -> Vector e -> Int

-- | Calculate the number of heap words used by a field unpacked within
--   another constructor.
--   
--   This function simply subtracts 2 from the <a>heapWords</a> result of
--   its parameter, since in the case of an unpacked field we _do not_ have
--   to use:
--   
--   <ul>
--   <li>a word for the pointer to the inner structure.</li>
--   <li>a word for the constructor that is being unpacked.</li>
--   </ul>
heapWordsUnpacked :: HeapWords a => a -> Int
instance Cardano.HeapWords.HeapWords (a -> b)
instance Cardano.HeapWords.HeapWords GHC.Types.Int
instance Cardano.HeapWords.HeapWords GHC.Types.Word
instance Cardano.HeapWords.HeapWords GHC.Word.Word8
instance Cardano.HeapWords.HeapWords GHC.Word.Word32
instance Cardano.HeapWords.HeapWords GHC.Word.Word64
instance Cardano.HeapWords.HeapWords GHC.Types.Char
instance Cardano.HeapWords.HeapWords GHC.Types.Bool
instance Cardano.HeapWords.HeapWords GHC.Num.Integer.Integer
instance Cardano.HeapWords.HeapWords GHC.Types.Float
instance Cardano.HeapWords.HeapWords Data.Time.Clock.Internal.UTCTime.UTCTime
instance Cardano.HeapWords.HeapWords Data.Time.Calendar.Days.Day
instance Cardano.HeapWords.HeapWords a => Cardano.HeapWords.HeapWords [a]
instance (Cardano.HeapWords.HeapWords a, Cardano.HeapWords.HeapWords b) => Cardano.HeapWords.HeapWords (a, b)
instance (Cardano.HeapWords.HeapWords a, Cardano.HeapWords.HeapWords b, Cardano.HeapWords.HeapWords c) => Cardano.HeapWords.HeapWords (a, b, c)
instance (Cardano.HeapWords.HeapWords a, Cardano.HeapWords.HeapWords b, Cardano.HeapWords.HeapWords c, Cardano.HeapWords.HeapWords d) => Cardano.HeapWords.HeapWords (a, b, c, d)
instance Cardano.HeapWords.HeapWords a => Cardano.HeapWords.HeapWords (GHC.Maybe.Maybe a)
instance (Cardano.HeapWords.HeapWords a, Cardano.HeapWords.HeapWords b) => Cardano.HeapWords.HeapWords (Data.Either.Either a b)
instance (Cardano.HeapWords.HeapWords a, Cardano.HeapWords.HeapWords b) => Cardano.HeapWords.HeapWords (Data.Map.Internal.Map a b)
instance Cardano.HeapWords.HeapWords a => Cardano.HeapWords.HeapWords (Data.IntMap.Internal.IntMap a)
instance Cardano.HeapWords.HeapWords a => Cardano.HeapWords.HeapWords (Data.Set.Internal.Set a)
instance Cardano.HeapWords.HeapWords Data.IntSet.Internal.IntSet
instance Cardano.HeapWords.HeapWords a => Cardano.HeapWords.HeapWords (Data.Sequence.Internal.Seq a)
instance Cardano.HeapWords.HeapWords Data.ByteString.Internal.ByteString
instance Cardano.HeapWords.HeapWords Data.ByteString.Short.Internal.ShortByteString
instance Cardano.HeapWords.HeapWords Data.ByteString.Lazy.Internal.ByteString
instance Cardano.HeapWords.HeapWords Data.Text.Internal.Text
instance Cardano.HeapWords.HeapWords e => Cardano.HeapWords.HeapWords (Data.Vector.Vector e)
instance Cardano.HeapWords.HeapWords GHC.Num.Natural.Natural
instance Cardano.HeapWords.HeapWords GHC.Num.BigNat.BigNat
