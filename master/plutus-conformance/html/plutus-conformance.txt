-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Conformance Test Suite for Plutus Core
--   
--   Comprehensive Conformance Test Suite for Plutus Core.
@package plutus-conformance
@version 1.0.0.0


-- | Plutus conformance test suite library.
module PlutusConformance.Common

-- | The default shown text when a parse error occurs. We don't want to
--   show the detailed parse errors so that users of the test suite can
--   produce the expected output more easily.
shownParseError :: Text

-- | The default shown text when evaluation fails.
shownEvaluationFailure :: Text

-- | The default parser to parse UPLC program inputs.
parseTxt :: Text -> Either ParserErrorBundle (Program Name DefaultUni DefaultFun SrcSpan)

-- | The input/output UPLC program type.
type UplcProg = Program Name DefaultUni DefaultFun ()

-- | The evaluator to be tested. It should either return a program if the
--   evaluation is successful, or <a>Nothing</a> if not.
type UplcEvaluator = UplcProg -> Maybe UplcProg

-- | Walk a file tree, making test groups for directories with
--   subdirectories, and test cases for directories without.
discoverTests :: UplcEvaluator -> (FilePath -> Bool) -> FilePath -> IO TestTree

-- | Turn the expected file content in text to a <a>UplcProg</a> unless the
--   expected result is a parse or evaluation error.
expectedToProg :: Text -> Either Text UplcProg

-- | Get the tested value. The tested value is either the shown parse or
--   evaluation error, or a <a>UplcProg</a>.
getTestedValue :: UplcEvaluator -> FilePath -> IO (Either Text UplcProg)

-- | The comparison function used for the golden test. This function checks
--   alpha-equivalence of programs when the output is a program.
compareAlphaEq :: Either Text UplcProg -> Either Text UplcProg -> Maybe String

-- | Update the golden file with the tested value. TODO abstract out for
--   other tests.
updateGoldenFile :: FilePath -> Either Text UplcProg -> IO ()

-- | Our <tt>evaluator</tt> for the Haskell UPLC tests is the CEK machine.
evalUplcProg :: UplcEvaluator

-- | Run the UPLC evaluation tests given an <tt>evaluator</tt> that
--   evaluates UPLC programs.
runUplcEvalTests :: UplcEvaluator -> (FilePath -> Bool) -> IO ()

-- | For debugging failed UPLC evaluation tests (Agda implementation).
--   Called by `test-utils`.
agdaEvalUplcProgDebug :: UplcProg -> Either String UplcProg
