-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Language library for Plutus Core
--   
--   Pretty-printer, parser, and typechecker for Plutus Core.
@package plutus-core
@version 1.3.0.0


-- | Hash functions for lazy [[Data.ByteString.ByteString]]s
module Data.ByteString.Hash

-- | Hash a [[BSL.ByteString]] using the SHA-256 hash function.
sha2_256 :: ByteString -> ByteString

-- | Hash a [[BSL.ByteString]] using the SHA3-256 hash function.
sha3_256 :: ByteString -> ByteString

-- | Hash a [[BSL.ByteString]] using the Blake2B-256 hash function.
blake2b_256 :: ByteString -> ByteString

module Data.Either.Extras

-- | If argument is <a>Left</a> throw an exception, otherwise return the
--   value inside <a>Right</a>.
unsafeFromEither :: Exception e => Either e a -> a

-- | If argument is <a>Right</a> return its value, otherwise apply the
--   given action to the value of Left and return its result.
fromRightM :: Monad m => (a -> m b) -> Either a b -> m b

module Data.MultiSet.Lens

-- | Create a <a>MultiSet</a> from a <a>Getter</a>, <a>Fold</a>, etc.
multiSetOf :: Getting (MultiSet a) s a -> s -> MultiSet a

module PlutusCore.Annotation

-- | An annotation type used during the compilation.
data Ann
Ann :: Inline -> SrcSpans -> Ann
[annInline] :: Ann -> Inline
[annSrcSpans] :: Ann -> SrcSpans

-- | The span between two source locations.
--   
--   This corresponds roughly to the <a>SrcSpan</a> used by GHC, but we
--   define our own version so we don't have to depend on <tt>ghc</tt> to
--   use it.
--   
--   The line and column numbers are 1-based, and the unit is Unicode code
--   point (or <a>Char</a>).
data SrcSpan
SrcSpan :: FilePath -> Int -> Int -> Int -> Int -> SrcSpan
[srcSpanFile] :: SrcSpan -> FilePath
[srcSpanSLine] :: SrcSpan -> Int
[srcSpanSCol] :: SrcSpan -> Int
[srcSpanELine] :: SrcSpan -> Int

-- | Same as GHC's <tt>SrcSpan</tt>, <tt>srcSpanECol</tt> is usually one
--   more than the column of the last character of the thing this
--   <tt>SrcSpan</tt> is for (unless the last character is the line break).
[srcSpanECol] :: SrcSpan -> Int
newtype SrcSpans
SrcSpans :: Set SrcSpan -> SrcSpans
[unSrcSpans] :: SrcSpans -> Set SrcSpan
newtype InlineHints name a
InlineHints :: (a -> name -> Bool) -> InlineHints name a
[shouldInline] :: InlineHints name a -> a -> name -> Bool
data Inline

-- | When calling <tt>PlutusIR.Compiler.Definitions.defineTerm</tt> to add
--   a new term definition, if we annotation the var on the LHS of the
--   definition with <a>AlwaysInline</a>, the inliner will always inline
--   that var.
--   
--   This is currently used to ensure builtin functions such as
--   <tt>trace</tt> (when the <tt>remove-trace</tt> flag is on and
--   <tt>trace</tt> is rewritten to <tt>const</tt>) are inlined, because
--   the inliner would otherwise not inline them. To achieve that, we
--   annotate the definition with <a>AlwaysInline</a> when defining
--   <tt>trace</tt>, i.e., <tt>trace <a>AlwaysInline</a> = _ a -&gt;
--   a</tt>.
AlwaysInline :: Inline
MayInline :: Inline

-- | Create an <a>Ann</a> with <a>AlwaysInline</a>.
annAlwaysInline :: Ann

-- | Create an <a>Ann</a> with <a>MayInline</a>.
annMayInline :: Ann

-- | The data type <a>SourcePos</a> represents source positions. It
--   contains the name of the source file, a line number, and a column
--   number. Source line and column positions change intensively during
--   parsing, so we need to make them strict to avoid memory leaks.
data SourcePos
SourcePos :: FilePath -> !Pos -> !Pos -> SourcePos

-- | Name of source file
[sourceName] :: SourcePos -> FilePath

-- | Line number
[sourceLine] :: SourcePos -> !Pos

-- | Column number
[sourceColumn] :: SourcePos -> !Pos

-- | <a>Pos</a> is the type for positive integers. This is used to
--   represent line number, column number, and similar things like
--   indentation level. <a>Semigroup</a> instance can be used to safely and
--   efficiently add <a>Pos</a>es together.
data Pos

-- | Add an extra SrcSpan to existing <a>SrcSpans</a> of <a>Ann</a>
addSrcSpan :: SrcSpan -> Ann -> Ann

-- | Tells if a line (positive integer) falls inside a SrcSpan.
lineInSrcSpan :: Pos -> SrcSpan -> Bool
instance GHC.Base.Monoid (PlutusCore.Annotation.InlineHints name a)
instance GHC.Base.Semigroup (PlutusCore.Annotation.InlineHints name a)
instance GHC.Show.Show PlutusCore.Annotation.Inline
instance GHC.Generics.Generic PlutusCore.Annotation.Inline
instance GHC.Classes.Ord PlutusCore.Annotation.Inline
instance GHC.Classes.Eq PlutusCore.Annotation.Inline
instance Control.DeepSeq.NFData PlutusCore.Annotation.SrcSpan
instance Flat.Class.Flat PlutusCore.Annotation.SrcSpan
instance GHC.Generics.Generic PlutusCore.Annotation.SrcSpan
instance GHC.Classes.Ord PlutusCore.Annotation.SrcSpan
instance GHC.Classes.Eq PlutusCore.Annotation.SrcSpan
instance Flat.Class.Flat PlutusCore.Annotation.SrcSpans
instance GHC.Generics.Generic PlutusCore.Annotation.SrcSpans
instance Control.DeepSeq.NFData PlutusCore.Annotation.SrcSpans
instance Data.MonoTraversable.MonoFoldable PlutusCore.Annotation.SrcSpans
instance GHC.Base.Monoid PlutusCore.Annotation.SrcSpans
instance GHC.Base.Semigroup PlutusCore.Annotation.SrcSpans
instance GHC.Classes.Ord PlutusCore.Annotation.SrcSpans
instance GHC.Classes.Eq PlutusCore.Annotation.SrcSpans
instance GHC.Show.Show PlutusCore.Annotation.Ann
instance GHC.Generics.Generic PlutusCore.Annotation.Ann
instance GHC.Classes.Ord PlutusCore.Annotation.Ann
instance GHC.Classes.Eq PlutusCore.Annotation.Ann
instance Prettyprinter.Internal.Pretty PlutusCore.Annotation.Ann
instance GHC.Show.Show PlutusCore.Annotation.SrcSpans
instance Prettyprinter.Internal.Pretty PlutusCore.Annotation.SrcSpans
instance GHC.Show.Show PlutusCore.Annotation.SrcSpan
instance Prettyprinter.Internal.Pretty PlutusCore.Annotation.SrcSpan
instance GHC.Show.Show (PlutusCore.Annotation.InlineHints name a)

module PlutusCore.Builtin.Emitter

-- | A monad for logging.
newtype Emitter a
Emitter :: Writer (DList Text) a -> Emitter a
[unEmitter] :: Emitter a -> Writer (DList Text) a
runEmitter :: Emitter a -> (a, DList Text)
emit :: Text -> Emitter ()
instance GHC.Base.Monad PlutusCore.Builtin.Emitter.Emitter
instance GHC.Base.Applicative PlutusCore.Builtin.Emitter.Emitter
instance GHC.Base.Functor PlutusCore.Builtin.Emitter.Emitter

module PlutusCore.Data

-- | A generic "data" type.
--   
--   The main constructor <a>Constr</a> represents a datatype value in
--   sum-of-products form: <tt>Constr i args</tt> represents a use of the
--   <tt>i</tt>th constructor along with its arguments.
--   
--   The other constructors are various primitives.
data Data
Constr :: Integer -> [Data] -> Data
Map :: [(Data, Data)] -> Data
List :: [Data] -> Data
I :: Integer -> Data
B :: ByteString -> Data
instance NoThunks.Class.NoThunks PlutusCore.Data.Data
instance Control.DeepSeq.NFData PlutusCore.Data.Data
instance Data.Data.Data PlutusCore.Data.Data
instance GHC.Generics.Generic PlutusCore.Data.Data
instance GHC.Classes.Ord PlutusCore.Data.Data
instance GHC.Classes.Eq PlutusCore.Data.Data
instance GHC.Show.Show PlutusCore.Data.Data
instance Prettyprinter.Internal.Pretty PlutusCore.Data.Data
instance Codec.Serialise.Class.Serialise PlutusCore.Data.Data


-- | Various file paths used in plutus-core, currently all to do with the
--   cost model.
module PlutusCore.DataFilePaths
costModelDataDir :: FilePath
builtinCostModelFile :: FilePath
cekMachineCostsFile :: FilePath

-- | The file containing the R models: only needed for cost-model-test.
rModelFile :: FilePath

-- | The file containing the benchmark results for the built-in functions:
--   only needed for cost-model-test.
benchingResultsFile :: FilePath

module PlutusPrelude

-- | <a>&amp;</a> is a reverse application operator. This provides
--   notational convenience. Its precedence is one higher than that of the
--   forward application operator <a>$</a>, which allows <a>&amp;</a> to be
--   nested in <a>$</a>.
--   
--   <pre>
--   &gt;&gt;&gt; 5 &amp; (+1) &amp; show
--   "6"
--   </pre>
(&) :: a -> (a -> b) -> b
infixl 1 &

-- | Fanout: send the input to both argument arrows and combine their
--   output.
--   
--   The default definition may be overridden with a more efficient version
--   if desired.
(&&&) :: Arrow a => a b c -> a b c' -> a b (c, c')
infixr 3 &&&

-- | Flipped version of <a>&lt;$&gt;</a>.
--   
--   <pre>
--   (<a>&lt;&amp;&gt;</a>) = <a>flip</a> <a>fmap</a>
--   </pre>
--   
--   <h4><b>Examples</b></h4>
--   
--   Apply <tt>(+1)</tt> to a list, a <a>Just</a> and a <a>Right</a>:
--   
--   <pre>
--   &gt;&gt;&gt; Just 2 &lt;&amp;&gt; (+1)
--   Just 3
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; [1,2,3] &lt;&amp;&gt; (+1)
--   [2,3,4]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; Right 3 &lt;&amp;&gt; (+1)
--   Right 4
--   </pre>
(<&>) :: Functor f => f a -> (a -> b) -> f b
infixl 1 <&>

-- | List of elements of a structure, from left to right. If the entire
--   list is intended to be reduced via a fold, just fold the structure
--   directly bypassing the list.
--   
--   <h4><b>Examples</b></h4>
--   
--   Basic usage:
--   
--   <pre>
--   &gt;&gt;&gt; toList Nothing
--   []
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; toList (Just 42)
--   [42]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; toList (Left "foo")
--   []
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; toList (Node (Leaf 5) 17 (Node Empty 12 (Leaf 8)))
--   [5,17,12,8]
--   </pre>
--   
--   For lists, <a>toList</a> is the identity:
--   
--   <pre>
--   &gt;&gt;&gt; toList [1, 2, 3]
--   [1,2,3]
--   </pre>
toList :: Foldable t => t a -> [a]

-- | Map covariantly over the first argument.
--   
--   <pre>
--   <a>first</a> f â‰¡ <a>bimap</a> f <a>id</a>
--   </pre>
--   
--   <h4><b>Examples</b></h4>
--   
--   <pre>
--   &gt;&gt;&gt; first toUpper ('j', 3)
--   ('J',3)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; first toUpper (Left 'j')
--   Left 'J'
--   </pre>
first :: Bifunctor p => (a -> b) -> p a c -> p b c

-- | Map covariantly over the second argument.
--   
--   <pre>
--   <a>second</a> â‰¡ <a>bimap</a> <a>id</a>
--   </pre>
--   
--   <h4><b>Examples</b></h4>
--   
--   <pre>
--   &gt;&gt;&gt; second (+1) ('j', 3)
--   ('j',4)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; second (+1) (Right 3)
--   Right 4
--   </pre>
second :: Bifunctor p => (b -> c) -> p a b -> p a c

-- | <tt><a>on</a> b u x y</tt> runs the binary function <tt>b</tt>
--   <i>on</i> the results of applying unary function <tt>u</tt> to two
--   arguments <tt>x</tt> and <tt>y</tt>. From the opposite perspective, it
--   transforms two inputs and combines the outputs.
--   
--   <pre>
--   ((+) `<a>on</a>` f) x y = f x + f y
--   </pre>
--   
--   Typical usage: <tt><a>sortBy</a> (<a>compare</a> `on`
--   <a>fst</a>)</tt>.
--   
--   Algebraic properties:
--   
--   <ul>
--   <li><pre>(*) `on` <a>id</a> = (*) -- (if (*) âˆ‰ {âŠ¥, <a>const</a>
--   âŠ¥})</pre></li>
--   <li><pre>((*) `on` f) `on` g = (*) `on` (f . g)</pre></li>
--   <li><pre><a>flip</a> on f . <a>flip</a> on g = <a>flip</a> on (g .
--   f)</pre></li>
--   </ul>
on :: (b -> b -> c) -> (a -> b) -> a -> a -> c
infixl 0 `on`

-- | The <a>isNothing</a> function returns <a>True</a> iff its argument is
--   <a>Nothing</a>.
--   
--   <h4><b>Examples</b></h4>
--   
--   Basic usage:
--   
--   <pre>
--   &gt;&gt;&gt; isNothing (Just 3)
--   False
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; isNothing (Just ())
--   False
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; isNothing Nothing
--   True
--   </pre>
--   
--   Only the outer constructor is taken into consideration:
--   
--   <pre>
--   &gt;&gt;&gt; isNothing (Just Nothing)
--   False
--   </pre>
isNothing :: Maybe a -> Bool

-- | The <a>isJust</a> function returns <a>True</a> iff its argument is of
--   the form <tt>Just _</tt>.
--   
--   <h4><b>Examples</b></h4>
--   
--   Basic usage:
--   
--   <pre>
--   &gt;&gt;&gt; isJust (Just 3)
--   True
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; isJust (Just ())
--   True
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; isJust Nothing
--   False
--   </pre>
--   
--   Only the outer constructor is taken into consideration:
--   
--   <pre>
--   &gt;&gt;&gt; isJust (Just Nothing)
--   True
--   </pre>
isJust :: Maybe a -> Bool

-- | The <a>fromMaybe</a> function takes a default value and a <a>Maybe</a>
--   value. If the <a>Maybe</a> is <a>Nothing</a>, it returns the default
--   value; otherwise, it returns the value contained in the <a>Maybe</a>.
--   
--   <h4><b>Examples</b></h4>
--   
--   Basic usage:
--   
--   <pre>
--   &gt;&gt;&gt; fromMaybe "" (Just "Hello, World!")
--   "Hello, World!"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fromMaybe "" Nothing
--   ""
--   </pre>
--   
--   Read an integer from a string using <a>readMaybe</a>. If we fail to
--   parse an integer, we want to return <tt>0</tt> by default:
--   
--   <pre>
--   &gt;&gt;&gt; import Text.Read ( readMaybe )
--   
--   &gt;&gt;&gt; fromMaybe 0 (readMaybe "5")
--   5
--   
--   &gt;&gt;&gt; fromMaybe 0 (readMaybe "")
--   0
--   </pre>
fromMaybe :: a -> Maybe a -> a

-- | Conditional failure of <a>Alternative</a> computations. Defined by
--   
--   <pre>
--   guard True  = <a>pure</a> ()
--   guard False = <a>empty</a>
--   </pre>
--   
--   <h4><b>Examples</b></h4>
--   
--   Common uses of <a>guard</a> include conditionally signaling an error
--   in an error monad and conditionally rejecting the current choice in an
--   <a>Alternative</a>-based parser.
--   
--   As an example of signaling an error in the error monad <a>Maybe</a>,
--   consider a safe division function <tt>safeDiv x y</tt> that returns
--   <a>Nothing</a> when the denominator <tt>y</tt> is zero and
--   <tt><a>Just</a> (x `div` y)</tt> otherwise. For example:
--   
--   <pre>
--   &gt;&gt;&gt; safeDiv 4 0
--   Nothing
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; safeDiv 4 2
--   Just 2
--   </pre>
--   
--   A definition of <tt>safeDiv</tt> using guards, but not <a>guard</a>:
--   
--   <pre>
--   safeDiv :: Int -&gt; Int -&gt; Maybe Int
--   safeDiv x y | y /= 0    = Just (x `div` y)
--               | otherwise = Nothing
--   </pre>
--   
--   A definition of <tt>safeDiv</tt> using <a>guard</a> and <a>Monad</a>
--   <tt>do</tt>-notation:
--   
--   <pre>
--   safeDiv :: Int -&gt; Int -&gt; Maybe Int
--   safeDiv x y = do
--     guard (y /= 0)
--     return (x `div` y)
--   </pre>
guard :: Alternative f => Bool -> f ()

-- | Left-associative fold of a structure but with strict application of
--   the operator.
--   
--   This ensures that each step of the fold is forced to Weak Head Normal
--   Form before being applied, avoiding the collection of thunks that
--   would otherwise occur. This is often what you want to strictly reduce
--   a finite structure to a single strict result (e.g. <a>sum</a>).
--   
--   For a general <a>Foldable</a> structure this should be semantically
--   identical to,
--   
--   <pre>
--   foldl' f z = <a>foldl'</a> f z . <a>toList</a>
--   </pre>
foldl' :: Foldable t => (b -> a -> b) -> b -> t a -> b

-- | Given a structure with elements whose type is a <a>Monoid</a>, combine
--   them via the monoid's <tt>(<a>&lt;&gt;</a>)</tt> operator. This fold
--   is right-associative and lazy in the accumulator. When you need a
--   strict left-associative fold, use <a>foldMap'</a> instead, with
--   <a>id</a> as the map.
--   
--   <h4><b>Examples</b></h4>
--   
--   Basic usage:
--   
--   <pre>
--   &gt;&gt;&gt; fold [[1, 2, 3], [4, 5], [6], []]
--   [1,2,3,4,5,6]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; fold $ Node (Leaf (Sum 1)) (Sum 3) (Leaf (Sum 5))
--   Sum {getSum = 9}
--   </pre>
--   
--   Folds of unbounded structures do not terminate when the monoid's
--   <tt>(<a>&lt;&gt;</a>)</tt> operator is strict:
--   
--   <pre>
--   &gt;&gt;&gt; fold (repeat Nothing)
--   * Hangs forever *
--   </pre>
--   
--   Lazy corecursive folds of unbounded structures are fine:
--   
--   <pre>
--   &gt;&gt;&gt; take 12 $ fold $ map (\i -&gt; [i..i+2]) [0..]
--   [0,1,2,1,2,3,2,3,4,3,4,5]
--   
--   &gt;&gt;&gt; sum $ take 4000000 $ fold $ map (\i -&gt; [i..i+2]) [0..]
--   2666668666666
--   </pre>
fold :: (Foldable t, Monoid m) => t m -> m

-- | <a>for</a> is <a>traverse</a> with its arguments flipped. For a
--   version that ignores the results see <a>for_</a>.
for :: (Traversable t, Applicative f) => t a -> (a -> f b) -> f (t b)

-- | Throw an exception. Exceptions may be thrown from purely functional
--   code, but may only be caught within the <a>IO</a> monad.
throw :: forall (r :: RuntimeRep) (a :: TYPE r) e. Exception e => e -> a

-- | The <a>join</a> function is the conventional monad join operator. It
--   is used to remove one level of monadic structure, projecting its bound
--   argument into the outer level.
--   
--   '<tt><a>join</a> bss</tt>' can be understood as the <tt>do</tt>
--   expression
--   
--   <pre>
--   do bs &lt;- bss
--      bs
--   </pre>
--   
--   <h4><b>Examples</b></h4>
--   
--   A common use of <a>join</a> is to run an <a>IO</a> computation
--   returned from an <a>STM</a> transaction, since <a>STM</a> transactions
--   can't perform <a>IO</a> directly. Recall that
--   
--   <pre>
--   <a>atomically</a> :: STM a -&gt; IO a
--   </pre>
--   
--   is used to run <a>STM</a> transactions atomically. So, by specializing
--   the types of <a>atomically</a> and <a>join</a> to
--   
--   <pre>
--   <a>atomically</a> :: STM (IO b) -&gt; IO (IO b)
--   <a>join</a>       :: IO (IO b)  -&gt; IO b
--   </pre>
--   
--   we can compose them as
--   
--   <pre>
--   <a>join</a> . <a>atomically</a> :: STM (IO b) -&gt; IO b
--   </pre>
--   
--   to run an <a>STM</a> transaction and the <a>IO</a> action it returns.
join :: Monad m => m (m a) -> m a

-- | Right-to-left composition of Kleisli arrows.
--   <tt>(<a>&gt;=&gt;</a>)</tt>, with the arguments flipped.
--   
--   Note how this operator resembles function composition
--   <tt>(<a>.</a>)</tt>:
--   
--   <pre>
--   (.)   ::            (b -&gt;   c) -&gt; (a -&gt;   b) -&gt; a -&gt;   c
--   (&lt;=&lt;) :: Monad m =&gt; (b -&gt; m c) -&gt; (a -&gt; m b) -&gt; a -&gt; m c
--   </pre>
(<=<) :: Monad m => (b -> m c) -> (a -> m b) -> a -> m c
infixr 1 <=<

-- | Left-to-right composition of Kleisli arrows.
--   
--   '<tt>(bs <a>&gt;=&gt;</a> cs) a</tt>' can be understood as the
--   <tt>do</tt> expression
--   
--   <pre>
--   do b &lt;- bs a
--      cs b
--   </pre>
(>=>) :: Monad m => (a -> m b) -> (b -> m c) -> a -> m c
infixr 1 >=>

-- | Flipped version of <a>&lt;$</a>.
--   
--   <h4><b>Examples</b></h4>
--   
--   Replace the contents of a <tt><a>Maybe</a> <a>Int</a></tt> with a
--   constant <a>String</a>:
--   
--   <pre>
--   &gt;&gt;&gt; Nothing $&gt; "foo"
--   Nothing
--   
--   &gt;&gt;&gt; Just 90210 $&gt; "foo"
--   Just "foo"
--   </pre>
--   
--   Replace the contents of an <tt><a>Either</a> <a>Int</a>
--   <a>Int</a></tt> with a constant <a>String</a>, resulting in an
--   <tt><a>Either</a> <a>Int</a> <a>String</a></tt>:
--   
--   <pre>
--   &gt;&gt;&gt; Left 8675309 $&gt; "foo"
--   Left 8675309
--   
--   &gt;&gt;&gt; Right 8675309 $&gt; "foo"
--   Right "foo"
--   </pre>
--   
--   Replace each element of a list with a constant <a>String</a>:
--   
--   <pre>
--   &gt;&gt;&gt; [1,2,3] $&gt; "foo"
--   ["foo","foo","foo"]
--   </pre>
--   
--   Replace the second element of a pair with a constant <a>String</a>:
--   
--   <pre>
--   &gt;&gt;&gt; (1,2) $&gt; "foo"
--   (1,"foo")
--   </pre>
($>) :: Functor f => f a -> b -> f b
infixl 4 $>

-- | Return the contents of a <a>Right</a>-value or a default value
--   otherwise.
--   
--   <h4><b>Examples</b></h4>
--   
--   Basic usage:
--   
--   <pre>
--   &gt;&gt;&gt; fromRight 1 (Right 3)
--   3
--   
--   &gt;&gt;&gt; fromRight 1 (Left "foo")
--   1
--   </pre>
fromRight :: b -> Either a b -> b

-- | Return <a>True</a> if the given value is a <a>Right</a>-value,
--   <a>False</a> otherwise.
--   
--   <h4><b>Examples</b></h4>
--   
--   Basic usage:
--   
--   <pre>
--   &gt;&gt;&gt; isRight (Left "foo")
--   False
--   
--   &gt;&gt;&gt; isRight (Right 3)
--   True
--   </pre>
--   
--   Assuming a <a>Left</a> value signifies some sort of error, we can use
--   <a>isRight</a> to write a very simple reporting function that only
--   outputs "SUCCESS" when a computation has succeeded.
--   
--   This example shows how <a>isRight</a> might be used to avoid pattern
--   matching when one does not care about the value contained in the
--   constructor:
--   
--   <pre>
--   &gt;&gt;&gt; import Control.Monad ( when )
--   
--   &gt;&gt;&gt; let report e = when (isRight e) $ putStrLn "SUCCESS"
--   
--   &gt;&gt;&gt; report (Left "parse error")
--   
--   &gt;&gt;&gt; report (Right 1)
--   SUCCESS
--   </pre>
isRight :: Either a b -> Bool

-- | <tt><a>void</a> value</tt> discards or ignores the result of
--   evaluation, such as the return value of an <a>IO</a> action.
--   
--   <h4><b>Examples</b></h4>
--   
--   Replace the contents of a <tt><a>Maybe</a> <a>Int</a></tt> with unit:
--   
--   <pre>
--   &gt;&gt;&gt; void Nothing
--   Nothing
--   
--   &gt;&gt;&gt; void (Just 3)
--   Just ()
--   </pre>
--   
--   Replace the contents of an <tt><a>Either</a> <a>Int</a>
--   <a>Int</a></tt> with unit, resulting in an <tt><a>Either</a>
--   <a>Int</a> <tt>()</tt></tt>:
--   
--   <pre>
--   &gt;&gt;&gt; void (Left 8675309)
--   Left 8675309
--   
--   &gt;&gt;&gt; void (Right 8675309)
--   Right ()
--   </pre>
--   
--   Replace every element of a list with unit:
--   
--   <pre>
--   &gt;&gt;&gt; void [1,2,3]
--   [(),(),()]
--   </pre>
--   
--   Replace the second element of a pair with unit:
--   
--   <pre>
--   &gt;&gt;&gt; void (1,2)
--   (1,())
--   </pre>
--   
--   Discard the result of an <a>IO</a> action:
--   
--   <pre>
--   &gt;&gt;&gt; mapM print [1,2]
--   1
--   2
--   [(),()]
--   
--   &gt;&gt;&gt; void $ mapM print [1,2]
--   1
--   2
--   </pre>
void :: Functor f => f a -> f ()

-- | Makes an effectful function ignore its result value and return its
--   input value.
through :: Functor f => (a -> f b) -> a -> f a

-- | The function <tt>coerce</tt> allows you to safely convert between
--   values of types that have the same representation with no run-time
--   overhead. In the simplest case you can use it instead of a newtype
--   constructor, to go from the newtype's concrete type to the abstract
--   type. But it also works in more complicated settings, e.g. converting
--   a list of newtypes to a list of concrete types.
--   
--   This function is runtime-representation polymorphic, but the
--   <tt>RuntimeRep</tt> type argument is marked as <tt>Inferred</tt>,
--   meaning that it is not available for visible type application. This
--   means the typechecker will accept <tt>coerce @Int @Age 42</tt>.
coerce :: forall {k :: RuntimeRep} (a :: TYPE k) (b :: TYPE k). Coercible a b => a -> b

-- | Coerce the second argument to the result type of the first one. The
--   motivation for this function is that it's often more annoying to
--   explicitly specify a target type for <a>coerce</a> than to construct
--   an explicit coercion function, so this combinator can be used in cases
--   like that. Plus the code reads better, as it becomes clear what and
--   where gets wrapped/unwrapped.
coerceVia :: Coercible a b => (a -> b) -> a -> b

-- | Same as <tt>f -&gt; f . coerce</tt>, but does not create any closures
--   and so is completely free.
coerceArg :: Coercible a b => (a -> s) -> b -> s

-- | Same as <tt>f -&gt; coerce . f</tt>, but does not create any closures
--   and so is completely free.
coerceRes :: Coercible s t => (a -> s) -> a -> t

-- | Representable types of kind <tt>*</tt>. This class is derivable in GHC
--   with the <tt>DeriveGeneric</tt> flag on.
--   
--   A <a>Generic</a> instance must satisfy the following laws:
--   
--   <pre>
--   <a>from</a> . <a>to</a> â‰¡ <a>id</a>
--   <a>to</a> . <a>from</a> â‰¡ <a>id</a>
--   </pre>
class Generic a

-- | A class of types that can be fully evaluated.
class NFData a

-- | Natural number
--   
--   Invariant: numbers &lt;= 0xffffffffffffffff use the <a>NS</a>
--   constructor
data Natural

-- | Non-empty (and non-strict) list type.
data NonEmpty a
(:|) :: a -> [a] -> NonEmpty a
infixr 5 :|

-- | 8-bit unsigned integer type
data Word8

-- | A monoid on applicative functors.
--   
--   If defined, <a>some</a> and <a>many</a> should be the least solutions
--   of the equations:
--   
--   <ul>
--   <li><pre><a>some</a> v = (:) <a>&lt;$&gt;</a> v <a>&lt;*&gt;</a>
--   <a>many</a> v</pre></li>
--   <li><pre><a>many</a> v = <a>some</a> v <a>&lt;|&gt;</a> <a>pure</a>
--   []</pre></li>
--   </ul>
class Applicative f => Alternative (f :: Type -> Type)

-- | The identity of <a>&lt;|&gt;</a>
empty :: Alternative f => f a

-- | An associative binary operation
(<|>) :: Alternative f => f a -> f a -> f a

-- | One or more.
some :: Alternative f => f a -> f [a]

-- | Zero or more.
many :: Alternative f => f a -> f [a]
infixl 3 <|>

-- | Any type that you wish to throw or catch as an exception must be an
--   instance of the <tt>Exception</tt> class. The simplest case is a new
--   exception type directly below the root:
--   
--   <pre>
--   data MyException = ThisException | ThatException
--       deriving Show
--   
--   instance Exception MyException
--   </pre>
--   
--   The default method definitions in the <tt>Exception</tt> class do what
--   we need in this case. You can now throw and catch
--   <tt>ThisException</tt> and <tt>ThatException</tt> as exceptions:
--   
--   <pre>
--   *Main&gt; throw ThisException `catch` \e -&gt; putStrLn ("Caught " ++ show (e :: MyException))
--   Caught ThisException
--   </pre>
--   
--   In more complicated examples, you may wish to define a whole hierarchy
--   of exceptions:
--   
--   <pre>
--   ---------------------------------------------------------------------
--   -- Make the root exception type for all the exceptions in a compiler
--   
--   data SomeCompilerException = forall e . Exception e =&gt; SomeCompilerException e
--   
--   instance Show SomeCompilerException where
--       show (SomeCompilerException e) = show e
--   
--   instance Exception SomeCompilerException
--   
--   compilerExceptionToException :: Exception e =&gt; e -&gt; SomeException
--   compilerExceptionToException = toException . SomeCompilerException
--   
--   compilerExceptionFromException :: Exception e =&gt; SomeException -&gt; Maybe e
--   compilerExceptionFromException x = do
--       SomeCompilerException a &lt;- fromException x
--       cast a
--   
--   ---------------------------------------------------------------------
--   -- Make a subhierarchy for exceptions in the frontend of the compiler
--   
--   data SomeFrontendException = forall e . Exception e =&gt; SomeFrontendException e
--   
--   instance Show SomeFrontendException where
--       show (SomeFrontendException e) = show e
--   
--   instance Exception SomeFrontendException where
--       toException = compilerExceptionToException
--       fromException = compilerExceptionFromException
--   
--   frontendExceptionToException :: Exception e =&gt; e -&gt; SomeException
--   frontendExceptionToException = toException . SomeFrontendException
--   
--   frontendExceptionFromException :: Exception e =&gt; SomeException -&gt; Maybe e
--   frontendExceptionFromException x = do
--       SomeFrontendException a &lt;- fromException x
--       cast a
--   
--   ---------------------------------------------------------------------
--   -- Make an exception type for a particular frontend compiler exception
--   
--   data MismatchedParentheses = MismatchedParentheses
--       deriving Show
--   
--   instance Exception MismatchedParentheses where
--       toException   = frontendExceptionToException
--       fromException = frontendExceptionFromException
--   </pre>
--   
--   We can now catch a <tt>MismatchedParentheses</tt> exception as
--   <tt>MismatchedParentheses</tt>, <tt>SomeFrontendException</tt> or
--   <tt>SomeCompilerException</tt>, but not other types, e.g.
--   <tt>IOException</tt>:
--   
--   <pre>
--   *Main&gt; throw MismatchedParentheses `catch` \e -&gt; putStrLn ("Caught " ++ show (e :: MismatchedParentheses))
--   Caught MismatchedParentheses
--   *Main&gt; throw MismatchedParentheses `catch` \e -&gt; putStrLn ("Caught " ++ show (e :: SomeFrontendException))
--   Caught MismatchedParentheses
--   *Main&gt; throw MismatchedParentheses `catch` \e -&gt; putStrLn ("Caught " ++ show (e :: SomeCompilerException))
--   Caught MismatchedParentheses
--   *Main&gt; throw MismatchedParentheses `catch` \e -&gt; putStrLn ("Caught " ++ show (e :: IOException))
--   *** Exception: MismatchedParentheses
--   </pre>
class (Typeable e, Show e) => Exception e
newtype PairT b f a
PairT :: f (b, a) -> PairT b f a
[unPairT] :: PairT b f a -> f (b, a)

-- | <tt>Coercible</tt> is a two-parameter class that has instances for
--   types <tt>a</tt> and <tt>b</tt> if the compiler can infer that they
--   have the same representation. This class does not have regular
--   instances; instead they are created on-the-fly during type-checking.
--   Trying to manually declare an instance of <tt>Coercible</tt> is an
--   error.
--   
--   Nevertheless one can pretend that the following three kinds of
--   instances exist. First, as a trivial base-case:
--   
--   <pre>
--   instance Coercible a a
--   </pre>
--   
--   Furthermore, for every type constructor there is an instance that
--   allows to coerce under the type constructor. For example, let
--   <tt>D</tt> be a prototypical type constructor (<tt>data</tt> or
--   <tt>newtype</tt>) with three type arguments, which have roles
--   <tt>nominal</tt>, <tt>representational</tt> resp. <tt>phantom</tt>.
--   Then there is an instance of the form
--   
--   <pre>
--   instance Coercible b b' =&gt; Coercible (D a b c) (D a b' c')
--   </pre>
--   
--   Note that the <tt>nominal</tt> type arguments are equal, the
--   <tt>representational</tt> type arguments can differ, but need to have
--   a <tt>Coercible</tt> instance themself, and the <tt>phantom</tt> type
--   arguments can be changed arbitrarily.
--   
--   The third kind of instance exists for every <tt>newtype NT = MkNT
--   T</tt> and comes in two variants, namely
--   
--   <pre>
--   instance Coercible a T =&gt; Coercible a NT
--   </pre>
--   
--   <pre>
--   instance Coercible T b =&gt; Coercible NT b
--   </pre>
--   
--   This instance is only usable if the constructor <tt>MkNT</tt> is in
--   scope.
--   
--   If, as a library author of a type constructor like <tt>Set a</tt>, you
--   want to prevent a user of your module to write <tt>coerce :: Set T
--   -&gt; Set NT</tt>, you need to set the role of <tt>Set</tt>'s type
--   parameter to <tt>nominal</tt>, by writing
--   
--   <pre>
--   type role Set nominal
--   </pre>
--   
--   For more details about this feature, please refer to <a>Safe
--   Coercions</a> by Joachim Breitner, Richard A. Eisenberg, Simon Peyton
--   Jones and Stephanie Weirich.
class a ~R# b => Coercible (a :: k) (b :: k)

-- | The class <a>Typeable</a> allows a concrete representation of a type
--   to be calculated.
class Typeable (a :: k)

-- | <pre>
--   type <a>Lens'</a> = <a>Simple</a> <a>Lens</a>
--   </pre>
type Lens' s a = Lens s s a a

-- | Build a <a>Lens</a> from a getter and a setter.
--   
--   <pre>
--   <a>lens</a> :: <a>Functor</a> f =&gt; (s -&gt; a) -&gt; (s -&gt; b -&gt; t) -&gt; (a -&gt; f b) -&gt; s -&gt; f t
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; s ^. lens getter setter
--   getter s
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; s &amp; lens getter setter .~ b
--   setter s b
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; s &amp; lens getter setter %~ f
--   setter s (f (getter s))
--   </pre>
--   
--   <pre>
--   <a>lens</a> :: (s -&gt; a) -&gt; (s -&gt; a -&gt; s) -&gt; <a>Lens'</a> s a
--   </pre>
lens :: (s -> a) -> (s -> b -> t) -> Lens s t a b

-- | View the value pointed to by a <a>Getter</a> or <a>Lens</a> or the
--   result of folding over all the results of a <a>Fold</a> or
--   <a>Traversal</a> that points at a monoidal values.
--   
--   This is the same operation as <a>view</a> with the arguments flipped.
--   
--   The fixity and semantics are such that subsequent field accesses can
--   be performed with (<a>.</a>).
--   
--   <pre>
--   &gt;&gt;&gt; (a,b)^._2
--   b
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; ("hello","world")^._2
--   "world"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; import Data.Complex
--   
--   &gt;&gt;&gt; ((0, 1 :+ 2), 3)^._1._2.to magnitude
--   2.23606797749979
--   </pre>
--   
--   <pre>
--   (<a>^.</a>) ::             s -&gt; <a>Getter</a> s a     -&gt; a
--   (<a>^.</a>) :: <a>Monoid</a> m =&gt; s -&gt; <a>Fold</a> s m       -&gt; m
--   (<a>^.</a>) ::             s -&gt; <a>Iso'</a> s a       -&gt; a
--   (<a>^.</a>) ::             s -&gt; <a>Lens'</a> s a      -&gt; a
--   (<a>^.</a>) :: <a>Monoid</a> m =&gt; s -&gt; <a>Traversal'</a> s m -&gt; m
--   </pre>
(^.) :: s -> Getting a s a -> a
infixl 8 ^.

-- | View the value pointed to by a <a>Getter</a>, <a>Iso</a> or
--   <a>Lens</a> or the result of folding over all the results of a
--   <a>Fold</a> or <a>Traversal</a> that points at a monoidal value.
--   
--   <pre>
--   <a>view</a> <a>.</a> <a>to</a> â‰¡ <a>id</a>
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; view (to f) a
--   f a
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; view _2 (1,"hello")
--   "hello"
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; view (to succ) 5
--   6
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; view (_2._1) ("hello",("world","!!!"))
--   "world"
--   </pre>
--   
--   As <a>view</a> is commonly used to access the target of a
--   <a>Getter</a> or obtain a monoidal summary of the targets of a
--   <a>Fold</a>, It may be useful to think of it as having one of these
--   more restricted signatures:
--   
--   <pre>
--   <a>view</a> ::             <a>Getter</a> s a     -&gt; s -&gt; a
--   <a>view</a> :: <a>Monoid</a> m =&gt; <a>Fold</a> s m       -&gt; s -&gt; m
--   <a>view</a> ::             <a>Iso'</a> s a       -&gt; s -&gt; a
--   <a>view</a> ::             <a>Lens'</a> s a      -&gt; s -&gt; a
--   <a>view</a> :: <a>Monoid</a> m =&gt; <a>Traversal'</a> s m -&gt; s -&gt; m
--   </pre>
--   
--   In a more general setting, such as when working with a <a>Monad</a>
--   transformer stack you can use:
--   
--   <pre>
--   <a>view</a> :: <a>MonadReader</a> s m             =&gt; <a>Getter</a> s a     -&gt; m a
--   <a>view</a> :: (<a>MonadReader</a> s m, <a>Monoid</a> a) =&gt; <a>Fold</a> s a       -&gt; m a
--   <a>view</a> :: <a>MonadReader</a> s m             =&gt; <a>Iso'</a> s a       -&gt; m a
--   <a>view</a> :: <a>MonadReader</a> s m             =&gt; <a>Lens'</a> s a      -&gt; m a
--   <a>view</a> :: (<a>MonadReader</a> s m, <a>Monoid</a> a) =&gt; <a>Traversal'</a> s a -&gt; m a
--   </pre>
view :: MonadReader s m => Getting a s a -> m a

-- | Replace the target of a <a>Lens</a> or all of the targets of a
--   <a>Setter</a> or <a>Traversal</a> with a constant value.
--   
--   This is an infix version of <a>set</a>, provided for consistency with
--   (<a>.=</a>).
--   
--   <pre>
--   f <a>&lt;$</a> a â‰¡ <a>mapped</a> <a>.~</a> f <a>$</a> a
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (a,b,c,d) &amp; _4 .~ e
--   (a,b,c,e)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (42,"world") &amp; _1 .~ "hello"
--   ("hello","world")
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (a,b) &amp; both .~ c
--   (c,c)
--   </pre>
--   
--   <pre>
--   (<a>.~</a>) :: <a>Setter</a> s t a b    -&gt; b -&gt; s -&gt; t
--   (<a>.~</a>) :: <a>Iso</a> s t a b       -&gt; b -&gt; s -&gt; t
--   (<a>.~</a>) :: <a>Lens</a> s t a b      -&gt; b -&gt; s -&gt; t
--   (<a>.~</a>) :: <a>Traversal</a> s t a b -&gt; b -&gt; s -&gt; t
--   </pre>
(.~) :: ASetter s t a b -> b -> s -> t
infixr 4 .~

-- | Replace the target of a <a>Lens</a> or all of the targets of a
--   <a>Setter</a> or <a>Traversal</a> with a constant value.
--   
--   <pre>
--   (<a>&lt;$</a>) â‰¡ <a>set</a> <a>mapped</a>
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; set _2 "hello" (1,())
--   (1,"hello")
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; set mapped () [1,2,3,4]
--   [(),(),(),()]
--   </pre>
--   
--   Note: Attempting to <a>set</a> a <a>Fold</a> or <a>Getter</a> will
--   fail at compile time with an relatively nice error message.
--   
--   <pre>
--   <a>set</a> :: <a>Setter</a> s t a b    -&gt; b -&gt; s -&gt; t
--   <a>set</a> :: <a>Iso</a> s t a b       -&gt; b -&gt; s -&gt; t
--   <a>set</a> :: <a>Lens</a> s t a b      -&gt; b -&gt; s -&gt; t
--   <a>set</a> :: <a>Traversal</a> s t a b -&gt; b -&gt; s -&gt; t
--   </pre>
set :: ASetter s t a b -> b -> s -> t

-- | Modifies the target of a <a>Lens</a> or all of the targets of a
--   <a>Setter</a> or <a>Traversal</a> with a user supplied function.
--   
--   This is an infix version of <a>over</a>.
--   
--   <pre>
--   <a>fmap</a> f â‰¡ <a>mapped</a> <a>%~</a> f
--   <a>fmapDefault</a> f â‰¡ <a>traverse</a> <a>%~</a> f
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (a,b,c) &amp; _3 %~ f
--   (a,b,f c)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; (a,b) &amp; both %~ f
--   (f a,f b)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; _2 %~ length $ (1,"hello")
--   (1,5)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; traverse %~ f $ [a,b,c]
--   [f a,f b,f c]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; traverse %~ even $ [1,2,3]
--   [False,True,False]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; traverse.traverse %~ length $ [["hello","world"],["!!!"]]
--   [[5,5],[3]]
--   </pre>
--   
--   <pre>
--   (<a>%~</a>) :: <a>Setter</a> s t a b    -&gt; (a -&gt; b) -&gt; s -&gt; t
--   (<a>%~</a>) :: <a>Iso</a> s t a b       -&gt; (a -&gt; b) -&gt; s -&gt; t
--   (<a>%~</a>) :: <a>Lens</a> s t a b      -&gt; (a -&gt; b) -&gt; s -&gt; t
--   (<a>%~</a>) :: <a>Traversal</a> s t a b -&gt; (a -&gt; b) -&gt; s -&gt; t
--   </pre>
(%~) :: ASetter s t a b -> (a -> b) -> s -> t
infixr 4 %~

-- | Modify the target of a <a>Lens</a> or all the targets of a
--   <a>Setter</a> or <a>Traversal</a> with a function.
--   
--   <pre>
--   <a>fmap</a> â‰¡ <a>over</a> <a>mapped</a>
--   <a>fmapDefault</a> â‰¡ <a>over</a> <a>traverse</a>
--   <a>sets</a> <a>.</a> <a>over</a> â‰¡ <a>id</a>
--   <a>over</a> <a>.</a> <a>sets</a> â‰¡ <a>id</a>
--   </pre>
--   
--   Given any valid <a>Setter</a> <tt>l</tt>, you can also rely on the
--   law:
--   
--   <pre>
--   <a>over</a> l f <a>.</a> <a>over</a> l g = <a>over</a> l (f <a>.</a> g)
--   </pre>
--   
--   <i>e.g.</i>
--   
--   <pre>
--   &gt;&gt;&gt; over mapped f (over mapped g [a,b,c]) == over mapped (f . g) [a,b,c]
--   True
--   </pre>
--   
--   Another way to view <a>over</a> is to say that it transforms a
--   <a>Setter</a> into a "semantic editor combinator".
--   
--   <pre>
--   &gt;&gt;&gt; over mapped f (Just a)
--   Just (f a)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; over mapped (*10) [1,2,3]
--   [10,20,30]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; over _1 f (a,b)
--   (f a,b)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; over _1 show (10,20)
--   ("10",20)
--   </pre>
--   
--   <pre>
--   <a>over</a> :: <a>Setter</a> s t a b -&gt; (a -&gt; b) -&gt; s -&gt; t
--   <a>over</a> :: <a>ASetter</a> s t a b -&gt; (a -&gt; b) -&gt; s -&gt; t
--   </pre>
over :: ASetter s t a b -> (a -> b) -> s -> t

-- | Compose two folds to make them run in parallel. The results are
--   concatenated.
(<^>) :: Fold s a -> Fold s a -> Fold s a
infixr 6 <^>

-- | Like <a>traceShow</a> but returns the shown value instead of a third
--   value.
--   
--   <pre>
--   &gt;&gt;&gt; traceShowId (1+2+3, "hello" ++ "world")
--   (6,"helloworld")
--   (6,"helloworld")
--   </pre>
traceShowId :: Show a => a -> a

-- | The <a>trace</a> function outputs the trace message given as its first
--   argument, before returning the second argument as its result.
--   
--   For example, this returns the value of <tt>f x</tt> and outputs the
--   message to stderr. Depending on your terminal (settings), they may or
--   may not be mixed.
--   
--   <pre>
--   &gt;&gt;&gt; let x = 123; f = show
--   
--   &gt;&gt;&gt; trace ("calling f with x = " ++ show x) (f x)
--   calling f with x = 123
--   "123"
--   </pre>
--   
--   The <a>trace</a> function should <i>only</i> be used for debugging, or
--   for monitoring execution. The function is not referentially
--   transparent: its type indicates that it is a pure function but it has
--   the side effect of outputting the trace message.
trace :: String -> a -> a
(.*) :: (c -> d) -> (a -> b -> c) -> a -> b -> d
infixr 8 .*
(<<$>>) :: (Functor f1, Functor f2) => (a -> b) -> f1 (f2 a) -> f1 (f2 b)
infixl 4 <<$>>
(<<*>>) :: (Applicative f1, Applicative f2) => f1 (f2 (a -> b)) -> f1 (f2 a) -> f1 (f2 b)
infixl 4 <<*>>
mtraverse :: (Monad m, Traversable m, Applicative f) => (a -> f (m b)) -> m a -> f (m b)

-- | Fold a monadic function over a <a>Foldable</a>. The monadic version of
--   <a>foldMap</a>.
foldMapM :: (Foldable f, Monad m, Monoid b) => (a -> m b) -> f a -> m b

-- | This function generalizes <tt>eitherToMaybe</tt>,
--   <tt>eitherToList</tt>, <tt>listToMaybe</tt> and other such functions.
reoption :: (Foldable f, Alternative g) => f a -> g a

-- | Enumerate all the values of an <a>Enum</a>, from <a>minBound</a> to
--   <a>maxBound</a>.
--   
--   <pre>
--   enumerate == [False, True]
--   </pre>
enumerate :: (Enum a, Bounded a) => [a]

-- | Basically a <tt>Data.Functor.Representable</tt> instance for
--   <a>Array</a>. We can't provide an actual instance because of the
--   <tt>Distributive</tt> superclass: <tt>Array i</tt> is not
--   <tt>Distributive</tt> unless we assume that indices in an array range
--   over the entirety of <tt>i</tt>.
tabulateArray :: (Bounded i, Enum i, Ix i) => (i -> a) -> Array i a

-- | <tt>b ? x</tt> is equal to <tt>pure x</tt> whenever <tt>b</tt> holds
--   and is <a>empty</a> otherwise.
(?) :: Alternative f => Bool -> a -> f a
infixr 2 ?

-- | <tt>ensure p x</tt> is equal to <tt>pure x</tt> whenever <tt>p x</tt>
--   holds and is <a>empty</a> otherwise.
ensure :: Alternative f => (a -> Bool) -> a -> f a

-- | A monadic version of <a>asks</a>.
asksM :: MonadReader r m => (r -> m a) -> m a

-- | The abstract data type <tt><a>Doc</a> ann</tt> represents pretty
--   documents that have been annotated with data of type <tt>ann</tt>.
--   
--   More specifically, a value of type <tt><a>Doc</a></tt> represents a
--   non-empty set of possible layouts of a document. The layout functions
--   select one of these possibilities, taking into account things like the
--   width of the output document.
--   
--   The annotation is an arbitrary piece of data associated with (part of)
--   a document. Annotations may be used by the rendering backends in order
--   to display output differently, such as
--   
--   <ul>
--   <li>color information (e.g. when rendering to the terminal)</li>
--   <li>mouseover text (e.g. when rendering to rich HTML)</li>
--   <li>whether to show something or not (to allow simple or detailed
--   versions)</li>
--   </ul>
--   
--   The simplest way to display a <a>Doc</a> is via the <a>Show</a> class.
--   
--   <pre>
--   &gt;&gt;&gt; putStrLn (show (vsep ["hello", "world"]))
--   hello
--   world
--   </pre>
data Doc ann

-- | A newtype wrapper around <tt>a</tt> whose point is to provide a
--   <a>Show</a> instance for anything that has a <a>Pretty</a> instance.
newtype ShowPretty a
ShowPretty :: a -> ShowPretty a
[unShowPretty] :: ShowPretty a -> a

-- | Overloaded conversion to <a>Doc</a>.
--   
--   Laws:
--   
--   <ol>
--   <li>output should be pretty. :-)</li>
--   </ol>
class Pretty a

-- | <pre>
--   &gt;&gt;&gt; pretty 1 &lt;+&gt; pretty "hello" &lt;+&gt; pretty 1.234
--   1 hello 1.234
--   </pre>
pretty :: Pretty a => a -> Doc ann

-- | <tt><a>prettyList</a></tt> is only used to define the <tt>instance
--   <a>Pretty</a> a =&gt; <a>Pretty</a> [a]</tt>. In normal circumstances
--   only the <tt><a>pretty</a></tt> function is used.
--   
--   <pre>
--   &gt;&gt;&gt; prettyList [1, 23, 456]
--   [1, 23, 456]
--   </pre>
prettyList :: Pretty a => [a] -> Doc ann

-- | A class for pretty-printing values in a configurable manner.
--   
--   A basic example:
--   
--   <pre>
--   &gt;&gt;&gt; data Case = UpperCase | LowerCase
--   
--   &gt;&gt;&gt; data D = D
--   
--   &gt;&gt;&gt; instance PrettyBy Case D where prettyBy UpperCase D = "D"; prettyBy LowerCase D = "d"
--   
--   &gt;&gt;&gt; prettyBy UpperCase D
--   D
--   
--   &gt;&gt;&gt; prettyBy LowerCase D
--   d
--   </pre>
--   
--   The library provides instances for common types like <a>Integer</a> or
--   <a>Bool</a>, so you can't define your own <tt>PrettyBy SomeConfig
--   Integer</tt> instance. And for the same reason you should not define
--   instances like <tt>PrettyBy SomeAnotherConfig a</tt> for universally
--   quantified <tt>a</tt>, because such an instance would overlap with the
--   existing ones. Take for example
--   
--   <pre>
--   &gt;&gt;&gt; data ViaShow = ViaShow
--   
--   &gt;&gt;&gt; instance Show a =&gt; PrettyBy ViaShow a where prettyBy ViaShow = pretty . show
--   </pre>
--   
--   with such an instance <tt>prettyBy ViaShow (1 :: Int)</tt> throws an
--   error about overlapping instances:
--   
--   <pre>
--   â€¢ Overlapping instances for PrettyBy ViaShow Int
--       arising from a use of â€˜prettyByâ€™
--     Matching instances:
--       instance PrettyDefaultBy config Int =&gt; PrettyBy config Int
--       instance [safe] Show a =&gt; PrettyBy ViaShow a
--   </pre>
--   
--   There's a <tt>newtype</tt> provided specifically for the purpose of
--   defining a <a>PrettyBy</a> instance for any <tt>a</tt>:
--   <a>PrettyAny</a>. Read its docs for details on when you might want to
--   use it.
--   
--   The <a>PrettyBy</a> instance for common types is defined in a way that
--   allows to override default pretty-printing behaviour, read the docs of
--   <a>HasPrettyDefaults</a> for details.
class PrettyBy config a

-- | Pretty-print a value of type <tt>a</tt> the way a <tt>config</tt>
--   specifies it. The default implementation of <a>prettyBy</a> is in
--   terms of <a>pretty</a>, <a>defaultPrettyFunctorBy</a> or
--   <a>defaultPrettyBifunctorBy</a> depending on the kind of the data type
--   that you're providing an instance for. For example, the default
--   implementation of <a>prettyBy</a> for a monomorphic type is going to
--   be "ignore the config and call <a>pretty</a> over the value":
--   
--   <pre>
--   &gt;&gt;&gt; newtype N = N Int deriving newtype (Pretty)
--   
--   &gt;&gt;&gt; instance PrettyBy () N
--   
--   &gt;&gt;&gt; prettyBy () (N 42)
--   42
--   </pre>
--   
--   The default implementation of <a>prettyBy</a> for a <a>Functor</a> is
--   going to be in terms of <a>defaultPrettyFunctorBy</a>:
--   
--   <pre>
--   &gt;&gt;&gt; newtype N a = N a deriving stock (Functor) deriving newtype (Pretty)
--   
--   &gt;&gt;&gt; instance PrettyBy () a =&gt; PrettyBy () (N a)
--   
--   &gt;&gt;&gt; prettyBy () (N (42 :: Int))
--   42
--   </pre>
--   
--   It's fine for the data type to have a phantom parameter as long as the
--   data type is still a <a>Functor</a> (i.e. the parameter has to be of
--   kind <tt>Type</tt>). Then <a>defaultPrettyFunctorBy</a> is used again:
--   
--   <pre>
--   &gt;&gt;&gt; newtype N a = N Int deriving stock (Functor) deriving newtype (Pretty)
--   
--   &gt;&gt;&gt; instance PrettyBy () (N b)
--   
--   &gt;&gt;&gt; prettyBy () (N 42)
--   42
--   </pre>
--   
--   If the data type has a single parameter of any other kind, then it's
--   not a functor and so like in the monomorphic case <a>pretty</a> is
--   used:
--   
--   <pre>
--   &gt;&gt;&gt; newtype N (b :: Bool) = N Int deriving newtype (Pretty)
--   
--   &gt;&gt;&gt; instance PrettyBy () (N b)
--   
--   &gt;&gt;&gt; prettyBy () (N 42)
--   42
--   </pre>
--   
--   Same applies to a data type with two parameters: if both the
--   parameters are of kind <tt>Type</tt>, then the data type is assumed to
--   be a <a>Bifunctor</a> and hence <a>defaultPrettyBifunctorBy</a> is
--   used. If the right parameter is of kind <tt>Type</tt> and the left
--   parameter is of any other kind, then we fallback to assuming the data
--   type is a <a>Functor</a> and defining <a>prettyBy</a> as
--   <a>defaultPrettyFunctorBy</a>. If both the parameters are not of kind
--   <tt>Type</tt>, we fallback to implementing <a>prettyBy</a> in terms of
--   <a>pretty</a> like in the monomorphic case.
--   
--   Note that in all those cases a <a>Pretty</a> instance for the data
--   type has to already exist, so that we can derive a <a>PrettyBy</a> one
--   in terms of it. If it doesn't exist or if your data type is not
--   supported (for example, if it has three or more parameters of kind
--   <tt>Type</tt>), then you'll need to provide the implementation
--   manually.
prettyBy :: PrettyBy config a => config -> a -> Doc ann

-- | <a>prettyListBy</a> is used to define the default <a>PrettyBy</a>
--   instance for <tt>[a]</tt> and <tt>NonEmpty a</tt>. In normal
--   circumstances only the <a>prettyBy</a> function is used. The default
--   implementation of <a>prettyListBy</a> is in terms of
--   <a>defaultPrettyFunctorBy</a>.
prettyListBy :: PrettyBy config a => config -> [a] -> Doc ann

-- | Determines whether a pretty-printing config allows default
--   pretty-printing for types that support it. I.e. it's possible to
--   create a new config and get access to pretty-printing for all types
--   supporting default pretty-printing just by providing the right type
--   instance. Example:
--   
--   <pre>
--   &gt;&gt;&gt; data DefCfg = DefCfg
--   
--   &gt;&gt;&gt; type instance HasPrettyDefaults DefCfg = 'True
--   
--   &gt;&gt;&gt; prettyBy DefCfg (['a', 'b', 'c'], (1 :: Int), Just True)
--   (abc, 1, True)
--   </pre>
--   
--   The set of types supporting default pretty-printing is determined by
--   the <tt>prettyprinter</tt> library: whatever <b>there</b> has a
--   <a>Pretty</a> instance also supports default pretty-printing in this
--   library and the behavior of <tt>pretty x</tt> and <tt>prettyBy
--   config_with_defaults x</tt> must be identical when <tt>x</tt> is one
--   of such types.
--   
--   It is possible to override default pretty-printing. For this you need
--   to specify that <a>HasPrettyDefaults</a> is <tt>'False</tt> for your
--   config and then define a <tt>NonDefaultPrettyBy config</tt> instance
--   for each of the types supporting default pretty-printing that you want
--   to pretty-print values of. Note that once <a>HasPrettyDefaults</a> is
--   specified to be <tt>'False</tt>, <b>all defaults are lost</b> for your
--   config, so you can't override default pretty-printing for one type and
--   keep the defaults for all the others. I.e. if you have
--   
--   <pre>
--   &gt;&gt;&gt; data NonDefCfg = NonDefCfg
--   
--   &gt;&gt;&gt; type instance HasPrettyDefaults NonDefCfg = 'False
--   </pre>
--   
--   then you have no defaults available and an attempt to pretty-print a
--   value of a type supporting default pretty-printing
--   
--   <pre>
--   prettyBy NonDefCfg True
--   </pre>
--   
--   results in a type error:
--   
--   <pre>
--   â€¢ No instance for (NonDefaultPrettyBy NonDef Bool)
--        arising from a use of â€˜prettyByâ€™
--   </pre>
--   
--   As the error suggests you need to provide a <a>NonDefaultPrettyBy</a>
--   instance explicitly:
--   
--   <pre>
--   &gt;&gt;&gt; instance NonDefaultPrettyBy NonDefCfg Bool where nonDefaultPrettyBy _ b = if b then "t" else "f"
--   
--   &gt;&gt;&gt; prettyBy NonDefCfg True
--   t
--   </pre>
--   
--   It is also possible not to provide any implementation for
--   <a>nonDefaultPrettyBy</a>, in which case it defaults to being the
--   default pretty-printing for the given type. This can be useful to
--   recover default pretty-printing for types pretty-printing of which you
--   don't want to override:
--   
--   <pre>
--   &gt;&gt;&gt; instance NonDefaultPrettyBy NonDefCfg Int
--   
--   &gt;&gt;&gt; prettyBy NonDefCfg (42 :: Int)
--   42
--   </pre>
--   
--   Look into <tt>test/NonDefault.hs</tt> for an extended example.
--   
--   We could give the user more fine-grained control over what defaults to
--   override instead of requiring to explicitly provide all the instances
--   whenever there's a need to override any default behavior, but that
--   would complicate the library even more, so we opted for not doing that
--   at the moment.
--   
--   Note that you can always override default behavior by wrapping a type
--   in <tt>newtype</tt> and providing a <tt>PrettyBy config_name</tt>
--   instance for that <tt>newtype</tt>.
--   
--   Also note that if you want to extend the set of types supporting
--   default pretty-printing it's not enough to provide a <a>Pretty</a>
--   instance for your type (such logic is hardly expressible in present
--   day Haskell). Read the docs of <a>DefaultPrettyBy</a> for how to
--   extend the set of types supporting default pretty-printing.
type family HasPrettyDefaults config :: Bool

-- | <tt>PrettyDefaultBy config a</tt> is the same thing as <tt>PrettyBy
--   config a</tt>, when <tt>a</tt> supports default pretty-printing. Thus
--   <tt>PrettyDefaultBy config a</tt> and <tt>PrettyBy config a</tt> are
--   interchangeable constraints for such types, but the latter throws an
--   annoying "this makes type inference for inner bindings fragile"
--   warning, unlike the former. <tt>PrettyDefaultBy config a</tt> reads as
--   "<tt>a</tt> supports default pretty-printing and can be pretty-printed
--   via <tt>config</tt> in either default or non-default manner depending
--   on whether <tt>config</tt> supports default pretty-printing".
type PrettyDefaultBy config = DispatchPrettyDefaultBy NonStuckHasPrettyDefaults config config

-- | A <tt>newtype</tt> wrapper around <tt>a</tt> provided for the purporse
--   of defining <a>PrettyBy</a> instances handling any <tt>a</tt>. For
--   example you can wrap values with the <tt>PrettyAny</tt> constructor
--   directly like in this last line of
--   
--   <pre>
--   &gt;&gt;&gt; data ViaShow = ViaShow
--   
--   &gt;&gt;&gt; instance Show a =&gt; PrettyBy ViaShow (PrettyAny a) where prettyBy ViaShow = pretty . show . unPrettyAny
--   
--   &gt;&gt;&gt; prettyBy ViaShow $ PrettyAny True
--   True
--   </pre>
--   
--   or you can use the type to via-derive instances:
--   
--   <pre>
--   &gt;&gt;&gt; data D = D deriving stock (Show)
--   
--   &gt;&gt;&gt; deriving via PrettyAny D instance PrettyBy ViaShow D
--   
--   &gt;&gt;&gt; prettyBy ViaShow D
--   D
--   </pre>
--   
--   One important use case is handling sum-type configs. For example
--   having two configs you can define their sum and derive <a>PrettyBy</a>
--   for the unified config in terms of its components:
--   
--   <pre>
--   &gt;&gt;&gt; data UpperCase = UpperCase
--   
--   &gt;&gt;&gt; data LowerCase = LowerCase
--   
--   &gt;&gt;&gt; data Case = CaseUpperCase UpperCase | CaseLowerCase LowerCase
--   
--   &gt;&gt;&gt; instance (PrettyBy UpperCase a, PrettyBy LowerCase a) =&gt; PrettyBy Case (PrettyAny a) where prettyBy (CaseUpperCase upper) = prettyBy upper . unPrettyAny; prettyBy (CaseLowerCase lower) = prettyBy lower . unPrettyAny
--   </pre>
--   
--   Then having a data type implementing both <tt>PrettyBy UpperCase</tt>
--   and <tt>PrettyBy LowerCase</tt> you can derive <tt>PrettyBy Case</tt>
--   for that data type:
--   
--   <pre>
--   &gt;&gt;&gt; data D = D
--   
--   &gt;&gt;&gt; instance PrettyBy UpperCase D where prettyBy UpperCase D = "D"
--   
--   &gt;&gt;&gt; instance PrettyBy LowerCase D where prettyBy LowerCase D = "d"
--   
--   &gt;&gt;&gt; deriving via PrettyAny D instance PrettyBy Case D
--   
--   &gt;&gt;&gt; prettyBy UpperCase D
--   D
--   
--   &gt;&gt;&gt; prettyBy LowerCase D
--   d
--   </pre>
--   
--   Look into <tt>test/Universal.hs</tt> for an extended example.
newtype PrettyAny a
PrettyAny :: a -> PrettyAny a
[unPrettyAny] :: PrettyAny a -> a

-- | A class for rendering <a>Doc</a>s as string types.
class Render str

-- | Render a <a>Doc</a> as a string type.
render :: Render str => Doc ann -> str

-- | Pretty-print and render a value as a string type.
display :: forall str a. (Pretty a, Render str) => a -> str

-- | A command suitable for use in GHCi as an interactive printer.
printPretty :: Pretty a => a -> IO ()
showText :: Show a => a -> Text

-- | A class for types with a default value.
class Default a

-- | The default value for this type.
def :: Default a => a
instance GHC.Classes.Eq a => GHC.Classes.Eq (PlutusPrelude.ShowPretty a)
instance Text.PrettyBy.Internal.PrettyDefaultBy config (Data.Either.Either a b) => Text.PrettyBy.Internal.PrettyBy config (Data.Either.Either a b)
instance GHC.Base.Functor f => GHC.Base.Functor (PlutusPrelude.PairT b f)
instance Prettyprinter.Internal.Pretty a => GHC.Show.Show (PlutusPrelude.ShowPretty a)
instance (Prettyprinter.Internal.Pretty a, Prettyprinter.Internal.Pretty b) => Prettyprinter.Internal.Pretty (Data.Either.Either a b)
instance (Text.PrettyBy.Internal.PrettyBy config a, Text.PrettyBy.Internal.PrettyBy config b) => Text.PrettyBy.Internal.DefaultPrettyBy config (Data.Either.Either a b)

module PlutusCore.Version

-- | The version of Plutus Core used by this program.
--   
--   The intention is to convey different levels of backwards compatibility
--   for existing scripts: - Major version changes are
--   backwards-incompatible - Minor version changes are
--   backwards-compatible - Patch version changes should be entirely
--   invisible (and we will likely not use this level)
--   
--   The version used should be changed only when the <i>language
--   itself</i> changes. For example, adding a new kind of term to the
--   language would require a minor version bump; removing a kind of term
--   would require a major version bump.
--   
--   Similarly, changing the semantics of the language will require a
--   version bump, typically a major one. This is the main reason why the
--   version is actually tracked in the AST: we can have two language
--   versions with identical ASTs but different semantics, so we need to
--   track the version explicitly.
--   
--   Compatibility is about compatibility for specific scripts, not about
--   e.g. tools which consume scripts. Adding a new kind of term does not
--   change how existing scripts behave, but does change what tools would
--   need to do to process scripts.
data Version
Version :: Natural -> Natural -> Natural -> Version
[_versionMajor] :: Version -> Natural
[_versionMinor] :: Version -> Natural
[_versionPatch] :: Version -> Natural
versionMajor :: Lens' Version Natural
versionMinor :: Lens' Version Natural
versionPatch :: Lens' Version Natural

-- | Plutus Core version 1.0.0
plcVersion100 :: Version

-- | Plutus Core version 1.1.0
plcVersion110 :: Version

-- | The first version of Plutus Core supported by this library.
firstVersion :: Version

-- | The latest version of Plutus Core supported by this library.
latestVersion :: Version

-- | The set of versions that are "known", i.e. that have been released and
--   have actual differences associated with them.
knownVersions :: Set Version
instance GHC.Classes.Ord PlutusCore.Version.Version
instance Prettyprinter.Internal.Pretty PlutusCore.Version.Version
instance Data.Hashable.Class.Hashable PlutusCore.Version.Version
instance Control.DeepSeq.NFData PlutusCore.Version.Version
instance GHC.Generics.Generic PlutusCore.Version.Version
instance GHC.Show.Show PlutusCore.Version.Version
instance GHC.Classes.Eq PlutusCore.Version.Version

module PlutusCore.Name

-- | A <a>Name</a> represents variables/names in Plutus Core.
data Name
Name :: Text -> Unique -> Name

-- | The identifier name, for use in error messages.
[_nameText] :: Name -> Text

-- | A <a>Unique</a> assigned to the name, allowing for cheap comparisons
--   in the compiler.
[_nameUnique] :: Name -> Unique

-- | We use a <tt>newtype</tt> to enforce separation between names used for
--   types and those used for terms.
newtype TyName
TyName :: Name -> TyName
[unTyName] :: TyName -> Name
data Named a
Named :: Text -> a -> Named a
[_namedString] :: Named a -> Text
[_namedValue] :: Named a -> a

-- | A unique identifier
newtype Unique
Unique :: Int -> Unique
[unUnique] :: Unique -> Int

-- | The unique of a type-level name.
newtype TypeUnique
TypeUnique :: Unique -> TypeUnique
[unTypeUnique] :: TypeUnique -> Unique

-- | The unique of a term-level name.
newtype TermUnique
TermUnique :: Unique -> TermUnique
[unTermUnique] :: TermUnique -> Unique

-- | Types which have a textual name attached to them.
class HasText a
theText :: HasText a => Lens' a Text

-- | Types which have a <a>Unique</a> attached to them, mostly names.
class Coercible unique Unique => HasUnique a unique | a -> unique

-- | The default implementation of <a>HasUnique</a> for newtypes.
unique :: HasUnique a unique => Lens' a unique

-- | The default implementation of <a>HasUnique</a> for newtypes.
unique :: (HasUnique a unique, Wrapped a, HasUnique (Unwrapped a) unique', Coercible unique' unique) => Lens' a unique

-- | A lens focused on the <a>Unique</a> of a name.
theUnique :: HasUnique name unique => Lens' name Unique

-- | A mapping from uniques to values of type <tt>a</tt>.
newtype UniqueMap unique a
UniqueMap :: IntMap a -> UniqueMap unique a
[unUniqueMap] :: UniqueMap unique a -> IntMap a

-- | Insert a value by a unique.
insertByUnique :: Coercible unique Unique => unique -> a -> UniqueMap unique a -> UniqueMap unique a

-- | Insert a value by the unique of a name.
insertByName :: HasUnique name unique => name -> a -> UniqueMap unique a -> UniqueMap unique a

-- | Insert a value by the index of the unique of a name. Unlike
--   <a>insertByUnique</a> and <a>insertByName</a>, this function does not
--   provide any static guarantees, so you can for example insert by a
--   type-level name in a map from term-level uniques.
insertByNameIndex :: (HasUnique name unique1, Coercible unique2 Unique) => name -> a -> UniqueMap unique2 a -> UniqueMap unique2 a

-- | Insert a named value by the index of the unique of the name.
insertNamed :: (HasText name, HasUnique name unique) => name -> a -> UniqueMap unique (Named a) -> UniqueMap unique (Named a)

-- | Convert a <a>Foldable</a> into a <a>UniqueMap</a> using the given
--   insertion function.
fromFoldable :: Foldable f => (i -> a -> UniqueMap unique a -> UniqueMap unique a) -> f (i, a) -> UniqueMap unique a

-- | Convert a <a>Foldable</a> with uniques into a <a>UniqueMap</a>.
fromUniques :: Foldable f => Coercible Unique unique => f (unique, a) -> UniqueMap unique a

-- | Convert a <a>Foldable</a> with names into a <a>UniqueMap</a>.
fromNames :: Foldable f => HasUnique name unique => f (name, a) -> UniqueMap unique a

-- | Look up a value by a unique.
lookupUnique :: Coercible unique Unique => unique -> UniqueMap unique a -> Maybe a

-- | Look up a value by the unique of a name.
lookupName :: HasUnique name unique => name -> UniqueMap unique a -> Maybe a

-- | Look up a value by the index of the unique of a name. Unlike
--   <a>lookupUnique</a> and <a>lookupName</a>, this function does not
--   provide any static guarantees, so you can for example look up a
--   type-level name in a map from term-level uniques.
lookupNameIndex :: (HasUnique name unique1, Coercible unique2 Unique) => name -> UniqueMap unique2 a -> Maybe a

-- | Apply a function to the string representation of a <a>Name</a>.
mapNameString :: (Text -> Text) -> Name -> Name

-- | Apply a function to the string representation of a <a>TyName</a>.
mapTyNameString :: (Text -> Text) -> TyName -> TyName
isEmpty :: UniqueMap unique a -> Bool
instance GHC.Base.Functor (PlutusCore.Name.UniqueMap unique)
instance GHC.Base.Monoid (PlutusCore.Name.UniqueMap unique a)
instance GHC.Base.Semigroup (PlutusCore.Name.UniqueMap unique a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (PlutusCore.Name.UniqueMap unique a)
instance GHC.Show.Show a => GHC.Show.Show (PlutusCore.Name.UniqueMap unique a)
instance PlutusCore.Name.HasUnique PlutusCore.Name.Unique PlutusCore.Name.Unique
instance PlutusCore.Name.HasUnique PlutusCore.Name.Name PlutusCore.Name.TermUnique
instance PlutusCore.Name.HasUnique PlutusCore.Name.TyName PlutusCore.Name.TypeUnique
instance PlutusCore.Name.HasText PlutusCore.Name.Name
instance PlutusCore.Name.HasText PlutusCore.Name.TyName
instance Data.Traversable.Traversable PlutusCore.Name.Named
instance Data.Foldable.Foldable PlutusCore.Name.Named
instance GHC.Base.Functor PlutusCore.Name.Named
instance Data.Hashable.Class.Hashable PlutusCore.Name.Unique
instance Prettyprinter.Internal.Pretty PlutusCore.Name.Unique
instance Control.DeepSeq.NFData PlutusCore.Name.Unique
instance GHC.Enum.Enum PlutusCore.Name.Unique
instance Language.Haskell.TH.Syntax.Lift PlutusCore.Name.Unique
instance GHC.Classes.Ord PlutusCore.Name.Unique
instance GHC.Show.Show PlutusCore.Name.Unique
instance GHC.Classes.Eq PlutusCore.Name.Unique
instance Data.Hashable.Class.Hashable PlutusCore.Name.Name
instance Control.DeepSeq.NFData PlutusCore.Name.Name
instance Language.Haskell.TH.Syntax.Lift PlutusCore.Name.Name
instance GHC.Generics.Generic PlutusCore.Name.Name
instance GHC.Show.Show PlutusCore.Name.Name
instance PlutusCore.Pretty.ConfigName.HasPrettyConfigName config => Text.PrettyBy.Internal.PrettyBy config PlutusCore.Name.TyName
instance Data.Hashable.Class.Hashable PlutusCore.Name.TyName
instance Control.DeepSeq.NFData PlutusCore.Name.TyName
instance GHC.Classes.Ord PlutusCore.Name.TyName
instance GHC.Classes.Eq PlutusCore.Name.TyName
instance Language.Haskell.TH.Syntax.Lift PlutusCore.Name.TyName
instance GHC.Generics.Generic PlutusCore.Name.TyName
instance GHC.Show.Show PlutusCore.Name.TyName
instance Data.Hashable.Class.Hashable PlutusCore.Name.TypeUnique
instance GHC.Classes.Ord PlutusCore.Name.TypeUnique
instance GHC.Classes.Eq PlutusCore.Name.TypeUnique
instance Data.Hashable.Class.Hashable PlutusCore.Name.TermUnique
instance GHC.Classes.Ord PlutusCore.Name.TermUnique
instance GHC.Classes.Eq PlutusCore.Name.TermUnique
instance Control.Lens.Wrapped.Wrapped PlutusCore.Name.TyName
instance PlutusCore.Pretty.ConfigName.HasPrettyConfigName config => Text.PrettyBy.Internal.PrettyBy config PlutusCore.Name.Name
instance GHC.Classes.Eq PlutusCore.Name.Name
instance GHC.Classes.Ord PlutusCore.Name.Name

module PlutusCore.Quote

-- | Run a quote from an empty identifier state. Note that the resulting
--   term cannot necessarily be safely combined with other terms - that
--   should happen inside <a>QuoteT</a>.
runQuoteT :: Monad m => QuoteT m a -> m a

-- | See <a>runQuoteT</a>.
runQuote :: Quote a -> a

-- | Get a fresh <a>Unique</a>.
freshUnique :: MonadQuote m => m Unique

-- | Get a fresh <a>Name</a>, given the annotation and the <a>Text</a>
--   name.
freshName :: MonadQuote m => Text -> m Name

-- | Get a fresh <a>TyName</a>, given the annotation and the <a>Text</a>
--   name.
freshTyName :: MonadQuote m => Text -> m TyName

-- | Make a copy of the given <a>Name</a> that is distinct from the old
--   one.
freshenName :: MonadQuote m => Name -> m Name

-- | Make a copy of the given <a>TyName</a> that is distinct from the old
--   one.
freshenTyName :: MonadQuote m => TyName -> m TyName

-- | The "quotation" monad transformer. Within this monad you can do safe
--   construction of PLC terms using quasiquotation, fresh-name generation,
--   and parsing.
newtype QuoteT m a
QuoteT :: StateT FreshState m a -> QuoteT m a
[unQuoteT] :: QuoteT m a -> StateT FreshState m a

-- | A non-transformer version of <a>QuoteT</a>.
type Quote = QuoteT Identity

-- | A monad that allows lifting of quoted expressions.
class Monad m => MonadQuote m

-- | The state contains the "next" <a>Unique</a> that should be used for a
--   name
type FreshState = Unique
liftQuote :: MonadQuote m => Quote a -> m a

-- | Mark all <a>Unique</a>s less than the given <a>Unique</a> as used, so
--   they will not be generated in future.
markNonFreshBelow :: MonadQuote m => Unique -> m ()

-- | Mark a given <a>Unique</a> (and implicitly all <a>Unique</a>s less
--   than it) as used, so they will not be generated in future.
markNonFresh :: MonadQuote m => Unique -> m ()

-- | Mark the maximal <a>Unique</a> from a set of <a>Unique</a>s (and
--   implicitly all <a>Unique</a>s less than it) as used, so they will not
--   be generated in future.
markNonFreshMax :: MonadQuote m => Set Unique -> m ()
instance Control.Monad.Writer.Class.MonadWriter w m => Control.Monad.Writer.Class.MonadWriter w (PlutusCore.Quote.QuoteT m)
instance Control.Monad.IO.Class.MonadIO m => Control.Monad.IO.Class.MonadIO (PlutusCore.Quote.QuoteT m)
instance Control.Monad.Reader.Class.MonadReader r m => Control.Monad.Reader.Class.MonadReader r (PlutusCore.Quote.QuoteT m)
instance Control.Monad.Error.Class.MonadError e m => Control.Monad.Error.Class.MonadError e (PlutusCore.Quote.QuoteT m)
instance Control.Monad.Morph.MFunctor PlutusCore.Quote.QuoteT
instance Control.Monad.Fix.MonadFix m => Control.Monad.Fix.MonadFix (PlutusCore.Quote.QuoteT m)
instance Control.Monad.Trans.Class.MonadTrans PlutusCore.Quote.QuoteT
instance GHC.Base.Monad m => GHC.Base.Monad (PlutusCore.Quote.QuoteT m)
instance GHC.Base.Monad m => GHC.Base.Applicative (PlutusCore.Quote.QuoteT m)
instance GHC.Base.Functor m => GHC.Base.Functor (PlutusCore.Quote.QuoteT m)
instance GHC.Base.Monad m => PlutusCore.Quote.MonadQuote (PlutusCore.Quote.QuoteT m)
instance PlutusCore.Quote.MonadQuote m => PlutusCore.Quote.MonadQuote (Control.Monad.Trans.State.Lazy.StateT s m)
instance PlutusCore.Quote.MonadQuote m => PlutusCore.Quote.MonadQuote (Control.Monad.Trans.Maybe.MaybeT m)
instance PlutusCore.Quote.MonadQuote m => PlutusCore.Quote.MonadQuote (Control.Monad.Trans.Except.ExceptT e m)
instance PlutusCore.Quote.MonadQuote m => PlutusCore.Quote.MonadQuote (Control.Monad.Trans.Reader.ReaderT r m)
instance PlutusCore.Quote.MonadQuote m => PlutusCore.Quote.MonadQuote (Hedgehog.Internal.Gen.GenT m)
instance PlutusCore.Quote.MonadQuote m => PlutusCore.Quote.MonadQuote (Hedgehog.Internal.Property.PropertyT m)
instance Control.Monad.State.Class.MonadState s m => Control.Monad.State.Class.MonadState s (PlutusCore.Quote.QuoteT m)


-- | The monad that the renamer runs in and related infrastructure.
module PlutusCore.Rename.Monad

-- | The monad the renamer runs in.
newtype RenameT ren m a
RenameT :: ReaderT ren m a -> RenameT ren m a
[unRenameT] :: RenameT ren m a -> ReaderT ren m a
type ScopedRenameT = RenameT ScopedRenaming

-- | A renaming is a mapping from old uniques to new ones.
newtype Renaming unique
Renaming :: UniqueMap unique unique -> Renaming unique
[unRenaming] :: Renaming unique -> UniqueMap unique unique

-- | A type-level renaming. Needed for instantiating functions running over
--   types in generic <tt>RenameT ren m</tt> to a particular type of
--   renaming.
type TypeRenaming = Renaming TypeUnique

-- | Scoping-aware mapping from locally unique uniques to globally unique
--   uniques.
data ScopedRenaming
ScopedRenaming :: Renaming TypeUnique -> Renaming TermUnique -> ScopedRenaming
[_scopedRenamingTypes] :: ScopedRenaming -> Renaming TypeUnique
[_scopedRenamingTerms] :: ScopedRenaming -> Renaming TermUnique

-- | A class that specifies which <a>Renaming</a> a <tt>ren</tt> has
--   inside. A <tt>ren</tt> can contain several <a>Renaming</a>s (like
--   <tt>Scoped</tt>, for example).
class Coercible unique Unique => HasRenaming ren unique
renaming :: HasRenaming ren unique => Lens' ren (Renaming unique)
scopedRenamingTypes :: Lens' ScopedRenaming (Renaming TypeUnique)
scopedRenamingTerms :: Lens' ScopedRenaming (Renaming TermUnique)

-- | Run a <a>RenameT</a> computation with an empty renaming.
runRenameT :: Monoid ren => RenameT ren m a -> m a

-- | Look up the new unique a name got mapped to.
lookupNameM :: (HasUnique name unique, HasRenaming ren unique, MonadReader ren m) => name -> m (Maybe unique)

-- | Rename a name that has a unique inside.
renameNameM :: (HasRenaming ren unique, HasUnique name unique, MonadReader ren m) => name -> m name

-- | Replace the unique in a name by a new unique, save the mapping from
--   the old unique to the new one and supply the updated value to a
--   continuation.
withFreshenedName :: (HasRenaming ren unique, HasUnique name unique, MonadQuote m, MonadReader ren m) => name -> (name -> m c) -> m c

-- | Run a <a>RenameT</a> computation in the environment extended by the
--   mapping from an old name to a new one.
withRenamedName :: (HasRenaming ren unique, HasUnique name unique, MonadReader ren m) => name -> name -> m c -> m c
instance GHC.Base.Semigroup PlutusCore.Rename.Monad.ScopedRenaming
instance GHC.Base.Monoid PlutusCore.Rename.Monad.ScopedRenaming
instance (GHC.Types.Coercible unique1 PlutusCore.Name.Unique, unique1 GHC.Types.~ unique2) => PlutusCore.Rename.Monad.HasRenaming (PlutusCore.Rename.Monad.Renaming unique1) unique2
instance PlutusCore.Rename.Monad.HasRenaming PlutusCore.Rename.Monad.ScopedRenaming PlutusCore.Name.TypeUnique
instance PlutusCore.Rename.Monad.HasRenaming PlutusCore.Rename.Monad.ScopedRenaming PlutusCore.Name.TermUnique
instance PlutusCore.Quote.MonadQuote m => PlutusCore.Quote.MonadQuote (PlutusCore.Rename.Monad.RenameT ren m)
instance GHC.Base.Monad m => Control.Monad.Reader.Class.MonadReader ren (PlutusCore.Rename.Monad.RenameT ren m)
instance GHC.Base.Monad m => GHC.Base.Monad (PlutusCore.Rename.Monad.RenameT ren m)
instance GHC.Base.Alternative m => GHC.Base.Alternative (PlutusCore.Rename.Monad.RenameT ren m)
instance GHC.Base.Applicative m => GHC.Base.Applicative (PlutusCore.Rename.Monad.RenameT ren m)
instance GHC.Base.Functor m => GHC.Base.Functor (PlutusCore.Rename.Monad.RenameT ren m)
instance GHC.Base.Monoid (PlutusCore.Rename.Monad.Renaming unique)
instance GHC.Base.Semigroup (PlutusCore.Rename.Monad.Renaming unique)

module PlutusCore.Check.Scoping
data ScopedName
TypeName :: TyName -> ScopedName
TermName :: Name -> ScopedName
isSameScope :: ScopedName -> ScopedName -> Bool

-- | Staying names.
data Stays

-- | An out-of-scope variable does not get renamed and hence stays.
StaysOutOfScopeVariable :: Stays

-- | A free variable does not get renamed and hence stays.
StaysFreeVariable :: Stays

-- | Changing names.
data Disappears

-- | A binding gets renamed and hence the name that it binds disappears.
DisappearsBinding :: Disappears

-- | A bound variable gets renamed and hence its name disappears.
DisappearsVariable :: Disappears

-- | A name either stays or disappears.
data NameAction
Stays :: Stays -> NameAction
Disappears :: Disappears -> NameAction
data NameAnn
NameAction :: NameAction -> ScopedName -> NameAnn
NotAName :: NameAnn
class ToScopedName name
toScopedName :: ToScopedName name => name -> ScopedName

-- | Annotation for a binding saying "supposed to disappear".
introduceBound :: ToScopedName name => name -> NameAnn

-- | Annotation for a bound variable saying "supposed to disappear".
registerBound :: ToScopedName name => name -> NameAnn

-- | Annotation for an out-of-scope variable saying "supposed to stay out
--   of scope".
registerOutOfScope :: ToScopedName name => name -> NameAnn

-- | Annotation for a free variable saying "supposed to stay free".
registerFree :: ToScopedName name => name -> NameAnn
class Reference n t

-- | Take a registering function, apply it to the provided name, create a
--   type/term variable out of the resulting annotation and the original
--   name and reference that variable in the provided type/term by
--   prepending a constructor to it mentioning the variable.
referenceVia :: Reference n t => (forall name. ToScopedName name => name -> NameAnn) -> n -> t NameAnn -> t NameAnn

-- | Reference the provided variable in the provided type/term as an
--   in-scope one.
referenceBound :: Reference n t => n -> t NameAnn -> t NameAnn

-- | Reference the provided variable in the provided type/term as an
--   out-of-scope one.
referenceOutOfScope :: Reference n t => n -> t NameAnn -> t NameAnn

-- | Each kind of old and new names.
data ScopeEntry
DisappearedBindings :: ScopeEntry
DisappearedVariables :: ScopeEntry
AppearedBindings :: ScopeEntry
AppearedVariables :: ScopeEntry
StayedOutOfScopeVariables :: ScopeEntry
StayedFreeVariables :: ScopeEntry

-- | A <a>ScopeInfo</a> is a set of <a>ScopedName</a>s for each of the
--   <a>ScopeEntry</a>. If a <a>ScopeEntry</a> is not present in the map,
--   the corresponding set of <tt>ScopeName</tt>s is considered to be
--   empty.
newtype ScopeInfo
ScopeInfo :: Map ScopeEntry (Set ScopedName) -> ScopeInfo
[unScopeInfo] :: ScopeInfo -> Map ScopeEntry (Set ScopedName)

-- | Extract the set stored in the provided <a>ScopeInfo</a> at the
--   provided <a>ScopeEntry</a>.
to :: ScopeEntry -> ScopeInfo -> Set ScopedName
emptyScopeInfo :: ScopeInfo

-- | Check if a set is empty and report an error with the set embedded in
--   it otherwise.
checkEmpty :: (Set ScopedName -> ScopeError) -> Set ScopedName -> Either ScopeError ()

-- | Merge two <a>ScopeInfo</a>s checking that they do not intersect along
--   the way.
mergeScopeInfo :: ScopeInfo -> ScopeInfo -> Either ScopeError ScopeInfo
newtype ScopeErrorOrInfo
ScopeErrorOrInfo :: Either ScopeError ScopeInfo -> ScopeErrorOrInfo
[unScopeErrorOrInfo] :: ScopeErrorOrInfo -> Either ScopeError ScopeInfo
class EstablishScoping t

-- | Traverse a <tt>t</tt> freshening every name (both at the binding and
--   the use sites) and annotating the freshened names with either
--   <a>DisappearsBinding</a> or <a>StaysFreeVariable</a> depending on
--   whether the name occurs at the binding or the use site.
--   
--   In addition to that every binder should be decorated with one
--   out-of-scope variable (annotated with <a>StaysOutOfScopeVariable</a>)
--   and one in-scope one (annotated with <a>DisappearsVariable</a>).
--   
--   Note that no original name occurring in <tt>t</tt> should survive this
--   procedure (and hence we don't care if any of the freshened names
--   clashes with an original one as all original ones are supposed to be
--   gone).
--   
--   How to provide an implementation:
--   
--   <ol>
--   <li>handle bindings with 'freshen*Name' +
--   <a>establishScopingBinder</a> (or similar)</li>
--   <li>handle variables with 'freshen*Name' + <a>registerFree</a></li>
--   <li>everything else is direct recursion + <a>Applicative</a>
--   stuff</li>
--   </ol>
establishScoping :: EstablishScoping t => t ann -> Quote (t NameAnn)
class CollectScopeInfo t

-- | Collect scoping information after scoping was established and renaming
--   was performed.
--   
--   How to provide an implementation:
--   
--   <ol>
--   <li>handle names (both bindings and variables) with
--   <a>handleSname</a></li>
--   <li>everything else is direct recursion + <a>Monoid</a> stuff</li>
--   </ol>
collectScopeInfo :: CollectScopeInfo t => t NameAnn -> ScopeErrorOrInfo
type Scoping t = (EstablishScoping t, CollectScopeInfo t)

-- | Take a constructor for a binder, a name bound by it, a sort
--   (kind/type), a value of that sort (type/term) and call
--   <a>establishScoping</a> on both the sort and its value and reassemble
--   the original binder with the annotated sort and its value, but also
--   decorate the reassembled binder with one out-of-scope variable and one
--   in-scope one.
establishScopingBinder :: (Reference name value, ToScopedName name, Scoping sort, Scoping value) => (NameAnn -> name -> sort NameAnn -> value NameAnn -> value NameAnn) -> name -> sort ann -> value ann -> Quote (value NameAnn)

-- | Every kind of error thrown by the scope checking machinery at
--   different stages.
data ScopeError
UnannotatedName :: !ScopedName -> ScopeError
NameChangedItsScope :: !ScopedName -> !ScopedName -> ScopeError
NameUnexpectedlyDisappeared :: !ScopedName -> !ScopedName -> ScopeError
NameUnexpectedlyStayed :: !ScopedName -> ScopeError
DuplicateBindersInTheInput :: !Set ScopedName -> ScopeError
DuplicateBindersInTheOutput :: !Set ScopedName -> ScopeError
OldBindingsDiscordWithBoundVariables :: !Set ScopedName -> ScopeError
OldBindingsDiscordWithOutOfScopeVariables :: !Set ScopedName -> ScopeError
NewBindingsDiscordWithBoundVariables :: !Set ScopedName -> ScopeError
OldBindingsClashWithFreeVariables :: !Set ScopedName -> ScopeError
OldBindingsClashWithNewBindings :: !Set ScopedName -> ScopeError
NewBindingsClashWithFreeVariabes :: !Set ScopedName -> ScopeError

-- | Override the set at the provided <a>ScopeEntry</a> to contain only the
--   provided <a>ScopedName</a>.
overrideSname :: ScopeEntry -> ScopedName -> ScopeInfo -> ScopeInfo

-- | Use a <a>Stays</a> to handle an unchanged old name.
applyStays :: Stays -> ScopedName -> ScopeInfo

-- | Use a <a>Disappears</a> to handle differing old and new names.
applyDisappears :: Disappears -> ScopedName -> ScopedName -> ScopeInfo

-- | Use a <a>NameAction</a> to handle an old and a new name.
applyNameAction :: NameAction -> ScopedName -> ScopedName -> Either ScopeError ScopeInfo

-- | Use a <a>NameAnn</a> to handle a new name.
handleSname :: ToScopedName name => NameAnn -> name -> ScopeErrorOrInfo
symmetricDifference :: Ord a => Set a -> Set a -> Set a

-- | Check that each kind of <a>Set</a> from <a>ScopeInfo</a> relates to
--   all other ones in a certain way. We start with these three relations
--   that are based on the assumption that for each binder we add at least
--   one out-of-scope variable and at least one in-scope one:
--   
--   <ol>
--   <li>disappeared bindings should be the same as stayed out of scope
--   variables (an internal sanity check)</li>
--   <li>disappeared bindings should be the same as disappeared variables
--   (ensures that old names consistently disappear at the binding and use
--   sites)</li>
--   <li>appeared bindings should be the same as appeared variables
--   (ensures that new names consistently appear at the binding and use
--   sites)</li>
--   </ol>
--   
--   Once we've ensured all of that, we're left with only three sets and
--   3C2 equals 3, so we only need to consider three more relations:
--   
--   <ol>
--   <li>disappeared bindings should not intersect with free variables (an
--   internal sanity check)</li>
--   <li>appeared bindings should not intersect with disappeared
--   bindings</li>
--   <li>appeared bindings should not intersect with free variables</li>
--   </ol>
--   
--   The last two ensure that no new name has an old name's unique.
checkScopeInfo :: ScopeInfo -> Either ScopeError ()

-- | Check if a renamer respects scoping.
checkRespectsScoping :: Scoping t => (t NameAnn -> t NameAnn) -> t ann -> Either ScopeError ()
instance GHC.Classes.Ord PlutusCore.Check.Scoping.ScopedName
instance GHC.Classes.Eq PlutusCore.Check.Scoping.ScopedName
instance GHC.Show.Show PlutusCore.Check.Scoping.ScopedName
instance GHC.Show.Show PlutusCore.Check.Scoping.Stays
instance GHC.Show.Show PlutusCore.Check.Scoping.Disappears
instance GHC.Show.Show PlutusCore.Check.Scoping.NameAction
instance GHC.Show.Show PlutusCore.Check.Scoping.NameAnn
instance GHC.Classes.Ord PlutusCore.Check.Scoping.ScopeEntry
instance GHC.Classes.Eq PlutusCore.Check.Scoping.ScopeEntry
instance GHC.Show.Show PlutusCore.Check.Scoping.ScopeEntry
instance GHC.Show.Show PlutusCore.Check.Scoping.ScopeInfo
instance GHC.Show.Show PlutusCore.Check.Scoping.ScopeError
instance GHC.Base.Semigroup PlutusCore.Check.Scoping.ScopeErrorOrInfo
instance GHC.Base.Monoid PlutusCore.Check.Scoping.ScopeErrorOrInfo
instance PlutusCore.Check.Scoping.Reference n t => PlutusCore.Check.Scoping.Reference [n] t
instance PlutusCore.Check.Scoping.Reference n t => PlutusCore.Check.Scoping.Reference (GHC.Base.NonEmpty n) t
instance PlutusCore.Check.Scoping.ToScopedName PlutusCore.Name.TyName
instance PlutusCore.Check.Scoping.ToScopedName PlutusCore.Name.Name

module Prettyprinter.Custom

-- | This prints a document enclosed by brackets, possibly indenting the
--   output on a new line if it does not fit.
brackets' :: Doc a -> Doc a

-- | This prints a document enclosed by braces, possibly indenting the
--   output on a new line if it does not fit.
braces' :: Doc a -> Doc a

-- | This prints a document enclosed by parentheses, aligning the opening
--   and closing parentheses.
parens' :: Doc a -> Doc a

-- | Print a "sexp", i.e. something like "(keyword arg1 ... argN)".
sexp :: Doc a -> [Doc a] -> Doc a

-- | Separate two documents <tt>p</tt> and <tt>q</tt> and increase
--   indentation if <tt>q</tt> has to be put on a new line. Useful to e.g.
--   pretty-print function application like `fun <a>?</a> sep arguments`.
(<?>) :: Doc ann -> Doc ann -> Doc ann
infixr 6 <?>

-- | Lay out a sequence of documents vertically with forced lines between
--   documents. Useful for prettyprinting layout-sensitive things like
--   let-bindings.
vcatHard :: [Doc ann] -> Doc ann

module Universe

-- | "Escapes" a type of an arbitrary kind to fit into <a>Type</a>.
data Esc a

-- | Existential. This is type is useful to hide GADTs' parameters.
--   
--   <pre>
--   &gt;&gt;&gt; data Tag :: * -&gt; * where TagInt :: Tag Int; TagBool :: Tag Bool
--   
--   &gt;&gt;&gt; instance GShow Tag where gshowsPrec _ TagInt = showString "TagInt"; gshowsPrec _ TagBool = showString "TagBool"
--   
--   &gt;&gt;&gt; classify s = case s of "TagInt" -&gt; [mkGReadResult TagInt]; "TagBool" -&gt; [mkGReadResult TagBool]; _ -&gt; []
--   
--   &gt;&gt;&gt; instance GRead Tag where greadsPrec _ s = [ (r, rest) | (con, rest) &lt;-  lex s, r &lt;- classify con ]
--   </pre>
--   
--   You can either use <tt>PatternSynonyms</tt> (available with GHC &gt;=
--   8.0)
--   
--   <pre>
--   &gt;&gt;&gt; let x = Some TagInt
--   
--   &gt;&gt;&gt; x
--   Some TagInt
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; case x of { Some TagInt -&gt; "I"; Some TagBool -&gt; "B" } :: String
--   "I"
--   </pre>
--   
--   or you can use functions
--   
--   <pre>
--   &gt;&gt;&gt; let y = mkSome TagBool
--   
--   &gt;&gt;&gt; y
--   Some TagBool
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; withSome y $ \y' -&gt; case y' of { TagInt -&gt; "I"; TagBool -&gt; "B" } :: String
--   "B"
--   </pre>
--   
--   The implementation of <a>mapSome</a> is <i>safe</i>.
--   
--   <pre>
--   &gt;&gt;&gt; let f :: Tag a -&gt; Tag a; f TagInt = TagInt; f TagBool = TagBool
--   
--   &gt;&gt;&gt; mapSome f y
--   Some TagBool
--   </pre>
--   
--   but you can also use:
--   
--   <pre>
--   &gt;&gt;&gt; withSome y (mkSome . f)
--   Some TagBool
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; read "Some TagBool" :: Some Tag
--   Some TagBool
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; read "mkSome TagInt" :: Some Tag
--   Some TagInt
--   </pre>
data Some (tag :: k -> Type)
pattern Some :: forall {k} tag (a :: k). () => tag a -> Some tag

-- | A particular type from a universe.
data SomeTypeIn uni
SomeTypeIn :: !uni (Esc a) -> SomeTypeIn uni
data Kinded uni ta
[Kinded] :: Typeable k => !uni (Esc a) -> Kinded uni (Esc (a :: k))

-- | A value of a particular type from a universe.
data ValueOf uni a
ValueOf :: !uni (Esc a) -> !a -> ValueOf uni a

-- | A class for enumerating types and fully instantiated type formers that
--   <tt>uni</tt> contains. For example, a particular <tt>ExampleUni</tt>
--   may have monomorphic types in it:
--   
--   instance ExampleUni <a>Contains</a> Integer where <a>...</a> instance
--   ExampleUni <a>Contains</a> Bool where <a>...</a>
--   
--   as well as polymorphic ones:
--   
--   instance ExampleUni <a>Contains</a> [] where <a>...</a> instance
--   ExampleUni <a>Contains</a> (,) where <a>...</a>
--   
--   as well as their instantiations:
--   
--   instance ExampleUni <a>Contains</a> a =&gt; ExampleUni <a>Contains</a>
--   [a] where <a>...</a> instance (ExampleUni <a>Contains</a> a,
--   ExampleUni <a>Contains</a> b) =&gt; ExampleUni <a>Contains</a> (a, b)
--   where <a>...</a>
--   
--   (a universe can have any subset of the mentioned sorts of types, for
--   example it's fine to have instantiated polymorphic types and not have
--   uninstantiated ones and vice versa)
--   
--   Note that when used as a constraint of a function <a>Contains</a> does
--   not allow you to directly express things like "<tt>uni</tt> has the
--   <tt>Integer</tt>, <tt>Bool</tt> and <tt>[]</tt> types and type
--   formers", because <tt>[]</tt> is not fully instantiated. So you can
--   only say "<tt>uni</tt> has <tt>Integer</tt>, <tt>Bool</tt>,
--   <tt>[Integer]</tt>, <tt>[Bool]</tt>, <tt>[[Integer]]</tt>,
--   <tt>[[Bool]]</tt> etc" and such manual enumeration is annoying, so
--   we'd really like to be able to say that <tt>uni</tt> has lists of
--   arbitrary built-in types (including lists of lists etc).
--   <a>Contains</a> does not allow that, but <a>Includes</a> does. For
--   example, in the body of the following definition:
--   
--   foo :: (uni <a>Includes</a> Integer, uni <a>Includes</a> Bool, uni
--   <a>Includes</a> []) =&gt; <a>...</a> foo = <a>...</a>
--   
--   you can make use of the fact that <tt>uni</tt> has lists of arbitrary
--   included types (integers, booleans and lists).
--   
--   Hence most of the time opt for using the more flexible
--   <a>Includes</a>.
--   
--   <a>Includes</a> is defined in terms of <a>Contains</a>, so you only
--   need to provide a <a>Contains</a> instance per type from the universe
--   and you'll get <a>Includes</a> for free.
class uni `Contains` a
knownUni :: Contains uni a => uni (Esc a)

-- | <tt>uni <a>Includes</a> a</tt> reads as "<tt>a</tt> is in the
--   <tt>uni</tt>". <tt>a</tt> can be of a higher-kind, see the docs of
--   <a>Contains</a> on why you might want that.
type Includes uni = Permits (Contains uni)

-- | Same as <a>knownUni</a>, but receives a <tt>proxy</tt>.
knownUniOf :: uni `Contains` a => proxy a -> uni (Esc a)

-- | Wrap a type into <tt>SomeTypeIn</tt>, provided it's in the universe.
someType :: forall k (a :: k) uni. uni `Contains` a => SomeTypeIn uni

-- | Wrap a value into <tt>Some (ValueOf uni)</tt>, given its explicit type
--   tag.
someValueOf :: forall a uni. uni (Esc a) -> a -> Some (ValueOf uni)

-- | Wrap a value into <tt>Some (ValueOf uni)</tt>, provided its type is in
--   the universe.
someValue :: forall a uni. uni `Includes` a => a -> Some (ValueOf uni)
someValueType :: Some (ValueOf uni) -> SomeTypeIn uni

-- | A monad to decode types from a universe in. We use a monad for
--   decoding, because parsing arguments of polymorphic built-in types can
--   peel off an arbitrary amount of type tags from the input list of tags
--   and so we have state, which is convenient to handle with, well,
--   <a>StateT</a>.
newtype DecodeUniM a
DecodeUniM :: StateT [Int] Maybe a -> DecodeUniM a
[unDecodeUniM] :: DecodeUniM a -> StateT [Int] Maybe a

-- | A universe is <a>Closed</a>, if it's known how to constrain every type
--   from the universe and every type can be encoded to / decoded from a
--   sequence of integer tags. The universe doesn't have to be finite and
--   providing support for infinite universes is the reason why we encode a
--   type as a sequence of integer tags as opposed to a single integer tag.
--   For example, given
--   
--   <pre>
--   data U a where
--       UList :: !(U a) -&gt; U [a]
--       UInt  :: U Int
--   </pre>
--   
--   <tt>UList (UList UInt)</tt> can be encoded to <tt>[0,0,1]</tt> where
--   <tt>0</tt> and <tt>1</tt> are the integer tags of the <tt>UList</tt>
--   and <tt>UInt</tt> constructors, respectively.
class Closed uni where {
    
    -- | A constrant for "<tt>constr a</tt> holds for any <tt>a</tt> from
    --   <tt>uni</tt>".
    type Everywhere uni (constr :: Type -> Constraint) :: Constraint;
}

-- | Encode a type as a sequence of <a>Int</a> tags. The opposite of
--   <tt>decodeUni</tt>.
encodeUni :: Closed uni => uni a -> [Int]

-- | Decode a type and feed it to the continuation.
withDecodedUni :: Closed uni => (forall k (a :: k). Typeable k => uni (Esc a) -> DecodeUniM r) -> DecodeUniM r

-- | Bring a <tt>constr a</tt> instance in scope, provided <tt>a</tt> is a
--   type from the universe and <tt>constr</tt> holds for any type from the
--   universe.
bring :: (Closed uni, uni `Everywhere` constr) => proxy constr -> uni (Esc a) -> (constr a => r) -> r

-- | Decode a type from a sequence of <a>Int</a> tags. The opposite of
--   <a>encodeUni</a> (modulo invalid input).
decodeKindedUni :: Closed uni => [Int] -> Maybe (SomeTypeIn (Kinded uni))

-- | Peel off a tag from the input list of type tags.
peelUniTag :: DecodeUniM Int

-- | <tt>constr <a>Permits</a> f</tt> elaborates to one of - constr f
--   forall a. constr a =&gt; constr (f a) forall a b. (constr a, constr b)
--   =&gt; constr (f a b) forall a b c. (constr a, constr b, constr c)
--   =&gt; constr (f a b c)
--   
--   depending on the kind of <tt>f</tt>. This allows us to say things like
--   
--   ( constr <a>Permits</a> Integer , constr <a>Permits</a> [] , constr
--   <a>Permits</a> (,) )
--   
--   and thus constraint every type from the universe (including
--   polymorphic ones) to satisfy <tt>constr</tt>, which is how we provide
--   an implementation of <a>Everywhere</a> for universes with polymorphic
--   types.
--   
--   <a>Permits</a> is an open type family, so you can provide type
--   instances for <tt>f</tt>s expecting more type arguments than 3 if you
--   need that.
--   
--   Note that, say, <tt>constr <a>Permits</a> []</tt> elaborates to
--   
--   forall a. constr a =&gt; constr [a]
--   
--   and for certain type classes that does not make sense (e.g. the
--   <tt>Generic</tt> instance of <tt>[]</tt> does not require the type of
--   elements to be <tt>Generic</tt>), however it's not a problem because
--   we use <tt>Permit</tt> to constrain the whole universe and so we know
--   that arguments of polymorphic built-in types are builtins themselves
--   are hence do satisfy the constraint and the fact that these
--   constraints on arguments do not get used in the polymorphic case only
--   means that they get ignored.
type family Permits
type family uni `EverywhereAll` constrs

-- | A constraint for "<tt>uni1</tt> is a subuniverse of <tt>uni2</tt>".
type uni1 <: uni2 = uni1 `Everywhere` Includes uni2

-- | A class for "<tt>uni</tt> has general type application".
class HasUniApply (uni :: Type -> Type)

-- | Apply a type constructor to an argument.
uniApply :: forall k l (f :: k -> l) a. HasUniApply uni => uni (Esc f) -> uni (Esc a) -> uni (Esc (f a))

-- | Deconstruct a type application into the function and the argument and
--   feed them to the continuation. If the type is not an application, then
--   return the default value.
matchUniApply :: HasUniApply uni => uni tb -> r -> (forall k l (f :: k -> l) a. tb ~ Esc (f a) => uni (Esc f) -> uni (Esc a) -> r) -> r

-- | Check if the kind of the given type from the universe is <a>Type</a>.
checkStar :: forall uni a (x :: a). Typeable a => uni (Esc x) -> Maybe (a :~: Type)

-- | Check if one type from the universe can be applied to another (i.e.
--   check that the expected kind of the argument matches the actual one)
--   and call the continuation in the refined context. Fail with
--   <a>mzero</a> otherwise.
withApplicable :: forall (a :: Type) (ab :: Type) f x uni m r. (Typeable ab, Typeable a, MonadPlus m) => uni (Esc (f :: ab)) -> uni (Esc (x :: a)) -> (forall (b :: Type). (Typeable b, ab ~ (a -> b)) => m r) -> m r

-- | Apply a type constructor to an argument, provided kinds match.
tryUniApply :: (MonadPlus m, HasUniApply uni) => SomeTypeIn (Kinded uni) -> SomeTypeIn (Kinded uni) -> m (SomeTypeIn (Kinded uni))

-- | <a>Show</a>-like class for 1-type-parameter GADTs. <tt>GShow t =&gt;
--   ...</tt> is equivalent to something like <tt>(forall a. Show (t a))
--   =&gt; ...</tt>. The easiest way to create instances would probably be
--   to write (or derive) an <tt>instance Show (T a)</tt>, and then simply
--   say:
--   
--   <pre>
--   instance GShow t where gshowsPrec = showsPrec
--   </pre>
class GShow (t :: k -> Type)
gshowsPrec :: forall (a :: k). GShow t => Int -> t a -> ShowS
gshow :: forall {k} t (a :: k). GShow t => t a -> String

-- | A class for type-contexts which contain enough information to (at
--   least in some cases) decide the equality of types occurring within
--   them.
class GEq (f :: k -> Type)

-- | Produce a witness of type-equality, if one exists.
--   
--   A handy idiom for using this would be to pattern-bind in the Maybe
--   monad, eg.:
--   
--   <pre>
--   extract :: GEq tag =&gt; tag a -&gt; DSum tag -&gt; Maybe a
--   extract t1 (t2 :=&gt; x) = do
--       Refl &lt;- geq t1 t2
--       return x
--   </pre>
--   
--   Or in a list comprehension:
--   
--   <pre>
--   extractMany :: GEq tag =&gt; tag a -&gt; [DSum tag] -&gt; [a]
--   extractMany t1 things = [ x | (t2 :=&gt; x) &lt;- things, Refl &lt;- maybeToList (geq t1 t2)]
--   </pre>
--   
--   (Making use of the <tt>DSum</tt> type from <a>Data.Dependent.Sum</a>
--   in both examples)
geq :: forall (a :: k) (b :: k). GEq f => f a -> f b -> Maybe (a :~: b)

-- | If <tt>f</tt> has a <a>GEq</a> instance, this function makes a
--   suitable default implementation of <a>(==)</a>.
defaultEq :: forall {k} f (a :: k) (b :: k). GEq f => f a -> f b -> Bool
deriveGEq :: DeriveGEQ t => t -> Q [Dec]
deriveGCompare :: DeriveGCompare t => t -> Q [Dec]

-- | Propositional equality. If <tt>a :~: b</tt> is inhabited by some
--   terminating value, then the type <tt>a</tt> is the same as the type
--   <tt>b</tt>. To use this equality in practice, pattern-match on the
--   <tt>a :~: b</tt> to get out the <tt>Refl</tt> constructor; in the body
--   of the pattern-match, the compiler knows that <tt>a ~ b</tt>.
data (a :: k) :~: (b :: k)
[Refl] :: forall {k} (a :: k). a :~: a
infix 4 :~:

module PlutusCore.Pretty

-- | The abstract data type <tt><a>Doc</a> ann</tt> represents pretty
--   documents that have been annotated with data of type <tt>ann</tt>.
--   
--   More specifically, a value of type <tt><a>Doc</a></tt> represents a
--   non-empty set of possible layouts of a document. The layout functions
--   select one of these possibilities, taking into account things like the
--   width of the output document.
--   
--   The annotation is an arbitrary piece of data associated with (part of)
--   a document. Annotations may be used by the rendering backends in order
--   to display output differently, such as
--   
--   <ul>
--   <li>color information (e.g. when rendering to the terminal)</li>
--   <li>mouseover text (e.g. when rendering to rich HTML)</li>
--   <li>whether to show something or not (to allow simple or detailed
--   versions)</li>
--   </ul>
--   
--   The simplest way to display a <a>Doc</a> is via the <a>Show</a> class.
--   
--   <pre>
--   &gt;&gt;&gt; putStrLn (show (vsep ["hello", "world"]))
--   hello
--   world
--   </pre>
data Doc ann

-- | Overloaded conversion to <a>Doc</a>.
--   
--   Laws:
--   
--   <ol>
--   <li>output should be pretty. :-)</li>
--   </ol>
class Pretty a

-- | <pre>
--   &gt;&gt;&gt; pretty 1 &lt;+&gt; pretty "hello" &lt;+&gt; pretty 1.234
--   1 hello 1.234
--   </pre>
pretty :: Pretty a => a -> Doc ann

-- | <tt><a>prettyList</a></tt> is only used to define the <tt>instance
--   <a>Pretty</a> a =&gt; <a>Pretty</a> [a]</tt>. In normal circumstances
--   only the <tt><a>pretty</a></tt> function is used.
--   
--   <pre>
--   &gt;&gt;&gt; prettyList [1, 23, 456]
--   [1, 23, 456]
--   </pre>
prettyList :: Pretty a => [a] -> Doc ann

-- | A class for pretty-printing values in a configurable manner.
--   
--   A basic example:
--   
--   <pre>
--   &gt;&gt;&gt; data Case = UpperCase | LowerCase
--   
--   &gt;&gt;&gt; data D = D
--   
--   &gt;&gt;&gt; instance PrettyBy Case D where prettyBy UpperCase D = "D"; prettyBy LowerCase D = "d"
--   
--   &gt;&gt;&gt; prettyBy UpperCase D
--   D
--   
--   &gt;&gt;&gt; prettyBy LowerCase D
--   d
--   </pre>
--   
--   The library provides instances for common types like <a>Integer</a> or
--   <a>Bool</a>, so you can't define your own <tt>PrettyBy SomeConfig
--   Integer</tt> instance. And for the same reason you should not define
--   instances like <tt>PrettyBy SomeAnotherConfig a</tt> for universally
--   quantified <tt>a</tt>, because such an instance would overlap with the
--   existing ones. Take for example
--   
--   <pre>
--   &gt;&gt;&gt; data ViaShow = ViaShow
--   
--   &gt;&gt;&gt; instance Show a =&gt; PrettyBy ViaShow a where prettyBy ViaShow = pretty . show
--   </pre>
--   
--   with such an instance <tt>prettyBy ViaShow (1 :: Int)</tt> throws an
--   error about overlapping instances:
--   
--   <pre>
--   â€¢ Overlapping instances for PrettyBy ViaShow Int
--       arising from a use of â€˜prettyByâ€™
--     Matching instances:
--       instance PrettyDefaultBy config Int =&gt; PrettyBy config Int
--       instance [safe] Show a =&gt; PrettyBy ViaShow a
--   </pre>
--   
--   There's a <tt>newtype</tt> provided specifically for the purpose of
--   defining a <a>PrettyBy</a> instance for any <tt>a</tt>:
--   <a>PrettyAny</a>. Read its docs for details on when you might want to
--   use it.
--   
--   The <a>PrettyBy</a> instance for common types is defined in a way that
--   allows to override default pretty-printing behaviour, read the docs of
--   <a>HasPrettyDefaults</a> for details.
class PrettyBy config a

-- | Pretty-print a value of type <tt>a</tt> the way a <tt>config</tt>
--   specifies it. The default implementation of <a>prettyBy</a> is in
--   terms of <a>pretty</a>, <a>defaultPrettyFunctorBy</a> or
--   <a>defaultPrettyBifunctorBy</a> depending on the kind of the data type
--   that you're providing an instance for. For example, the default
--   implementation of <a>prettyBy</a> for a monomorphic type is going to
--   be "ignore the config and call <a>pretty</a> over the value":
--   
--   <pre>
--   &gt;&gt;&gt; newtype N = N Int deriving newtype (Pretty)
--   
--   &gt;&gt;&gt; instance PrettyBy () N
--   
--   &gt;&gt;&gt; prettyBy () (N 42)
--   42
--   </pre>
--   
--   The default implementation of <a>prettyBy</a> for a <a>Functor</a> is
--   going to be in terms of <a>defaultPrettyFunctorBy</a>:
--   
--   <pre>
--   &gt;&gt;&gt; newtype N a = N a deriving stock (Functor) deriving newtype (Pretty)
--   
--   &gt;&gt;&gt; instance PrettyBy () a =&gt; PrettyBy () (N a)
--   
--   &gt;&gt;&gt; prettyBy () (N (42 :: Int))
--   42
--   </pre>
--   
--   It's fine for the data type to have a phantom parameter as long as the
--   data type is still a <a>Functor</a> (i.e. the parameter has to be of
--   kind <tt>Type</tt>). Then <a>defaultPrettyFunctorBy</a> is used again:
--   
--   <pre>
--   &gt;&gt;&gt; newtype N a = N Int deriving stock (Functor) deriving newtype (Pretty)
--   
--   &gt;&gt;&gt; instance PrettyBy () (N b)
--   
--   &gt;&gt;&gt; prettyBy () (N 42)
--   42
--   </pre>
--   
--   If the data type has a single parameter of any other kind, then it's
--   not a functor and so like in the monomorphic case <a>pretty</a> is
--   used:
--   
--   <pre>
--   &gt;&gt;&gt; newtype N (b :: Bool) = N Int deriving newtype (Pretty)
--   
--   &gt;&gt;&gt; instance PrettyBy () (N b)
--   
--   &gt;&gt;&gt; prettyBy () (N 42)
--   42
--   </pre>
--   
--   Same applies to a data type with two parameters: if both the
--   parameters are of kind <tt>Type</tt>, then the data type is assumed to
--   be a <a>Bifunctor</a> and hence <a>defaultPrettyBifunctorBy</a> is
--   used. If the right parameter is of kind <tt>Type</tt> and the left
--   parameter is of any other kind, then we fallback to assuming the data
--   type is a <a>Functor</a> and defining <a>prettyBy</a> as
--   <a>defaultPrettyFunctorBy</a>. If both the parameters are not of kind
--   <tt>Type</tt>, we fallback to implementing <a>prettyBy</a> in terms of
--   <a>pretty</a> like in the monomorphic case.
--   
--   Note that in all those cases a <a>Pretty</a> instance for the data
--   type has to already exist, so that we can derive a <a>PrettyBy</a> one
--   in terms of it. If it doesn't exist or if your data type is not
--   supported (for example, if it has three or more parameters of kind
--   <tt>Type</tt>), then you'll need to provide the implementation
--   manually.
prettyBy :: PrettyBy config a => config -> a -> Doc ann

-- | <a>prettyListBy</a> is used to define the default <a>PrettyBy</a>
--   instance for <tt>[a]</tt> and <tt>NonEmpty a</tt>. In normal
--   circumstances only the <a>prettyBy</a> function is used. The default
--   implementation of <a>prettyListBy</a> is in terms of
--   <a>defaultPrettyFunctorBy</a>.
prettyListBy :: PrettyBy config a => config -> [a] -> Doc ann

-- | A newtype wrapper around <tt>a</tt> whose point is to provide a
--   <tt>PrettyBy config</tt> instance for anything that has a
--   <a>Pretty</a> instance.
newtype IgnorePrettyConfig a
IgnorePrettyConfig :: a -> IgnorePrettyConfig a
[unIgnorePrettyConfig] :: IgnorePrettyConfig a -> a

-- | A config together with some value. The point is to provide a
--   <a>Pretty</a> instance for anything that has a <tt>PrettyBy
--   config</tt> instance.
data AttachPrettyConfig config a
AttachPrettyConfig :: !config -> !a -> AttachPrettyConfig config a

-- | A class for rendering <a>Doc</a>s as string types.
class Render str

-- | Render a <a>Doc</a> as a string type.
render :: Render str => Doc ann -> str

-- | Pretty-print and render a value as a string type.
display :: forall str a. (Pretty a, Render str) => a -> str

-- | Pretty-print and render a value as a string type in a configurable
--   way.
displayBy :: forall str a config. (PrettyBy config a, Render str) => config -> a -> str

-- | Pretty-print a value in the default mode using the classic view.
prettyPlcDef :: PrettyPlc a => a -> Doc ann

-- | Render a value to <a>String</a> in the default mode using the classic
--   view.
displayPlcDef :: (PrettyPlc a, Render str) => a -> str

-- | Pretty-print a value in the debug mode using the classic view.
prettyPlcDebug :: PrettyPlc a => a -> Doc ann

-- | Render a value to <a>String</a> in the debug mode using the classic
--   view.
displayPlcDebug :: (PrettyPlc a, Render str) => a -> str

-- | Whether to pretty-print PLC errors in full or with some information
--   omitted.
data CondensedErrors
CondensedErrorsYes :: CondensedErrors
CondensedErrorsNo :: CondensedErrors

-- | Options for pretty-printing PLC entities.
newtype PrettyConfigPlcOptions
PrettyConfigPlcOptions :: CondensedErrors -> PrettyConfigPlcOptions
[_pcpoCondensedErrors] :: PrettyConfigPlcOptions -> CondensedErrors

-- | Strategy for pretty-printing PLC entities.
data PrettyConfigPlcStrategy
PrettyConfigPlcClassic :: PrettyConfigClassic PrettyConfigName -> PrettyConfigPlcStrategy
PrettyConfigPlcReadable :: PrettyConfigReadable PrettyConfigName -> PrettyConfigPlcStrategy

-- | Global configuration used for pretty-printing PLC entities.
data PrettyConfigPlc
PrettyConfigPlc :: PrettyConfigPlcOptions -> PrettyConfigPlcStrategy -> PrettyConfigPlc
[_pcpOptions] :: PrettyConfigPlc -> PrettyConfigPlcOptions
[_pcpStrategy] :: PrettyConfigPlc -> PrettyConfigPlcStrategy

-- | The "pretty-printable PLC entity" constraint.
type PrettyPlc = PrettyBy PrettyConfigPlc

-- | The <a>PrettyConfigPlcOptions</a> used by default: print errors in
--   full.
defPrettyConfigPlcOptions :: PrettyConfigPlcOptions

-- | The <a>PrettyConfigPlc</a> used by default: use the classic view and
--   print neither <tt>Unique</tt>s, nor name attachments.
defPrettyConfigPlcClassic :: PrettyConfigPlcOptions -> PrettyConfigPlc

-- | The <a>PrettyConfigPlc</a> used for debugging: use the classic view
--   and print <tt>Unique</tt>s, but not name attachments.
debugPrettyConfigPlcClassic :: PrettyConfigPlcOptions -> PrettyConfigPlc

-- | The <a>PrettyConfigPlc</a> used by default and for readability: use
--   the refined view and print neither <tt>Unique</tt>s, nor name
--   attachments.
defPrettyConfigPlcReadable :: PrettyConfigPlcOptions -> PrettyConfigPlc

-- | The <a>PrettyConfigPlc</a> used for debugging and readability: use the
--   refined view and print <tt>Unique</tt>s, but not name attachments.
debugPrettyConfigPlcReadable :: PrettyConfigPlcOptions -> PrettyConfigPlc

-- | Pretty-print a PLC value in the default mode using the classic view.
prettyPlcClassicDef :: PrettyPlc a => a -> Doc ann

-- | Pretty-print a PLC value in the debug mode using the classic view.
prettyPlcClassicDebug :: PrettyPlc a => a -> Doc ann

-- | Pretty-print a PLC value in the default mode using the readable view.
prettyPlcReadableDef :: PrettyPlc a => a -> Doc ann

-- | Pretty-print a PLC value in the debug mode using the readable view.
prettyPlcReadableDebug :: PrettyPlc a => a -> Doc ann

-- | Pretty-print a PLC value using the condensed way (see
--   <a>CondensedErrors</a>) of pretty-printing PLC errors (in case there
--   are any).
prettyPlcCondensedErrorBy :: PrettyPlc a => (PrettyConfigPlcOptions -> PrettyConfigPlc) -> a -> Doc ann

-- | Render an error to <a>String</a> in the condensed manner using the
--   classic view.
displayPlcCondensedErrorClassic :: (PrettyPlc a, Render str) => a -> str

-- | A config that determines how to pretty-print a PLC name.
newtype PrettyConfigName
PrettyConfigName :: Bool -> PrettyConfigName

-- | Whether to show the <tt>Unique</tt> of a name or not.
[_pcnShowsUnique] :: PrettyConfigName -> Bool

-- | A class of configs from which a <a>PrettyConfigName</a> can be
--   extracted.
class HasPrettyConfigName config
toPrettyConfigName :: HasPrettyConfigName config => config -> PrettyConfigName

-- | The <a>PrettyConfigName</a> used by default: print neither
--   <tt>Unique</tt>s, nor name attachments.
defPrettyConfigName :: PrettyConfigName

-- | The <a>PrettyConfigName</a> used for debugging: print
--   <tt>Unique</tt>s, but not name attachments.
debugPrettyConfigName :: PrettyConfigName

-- | Configuration for the classic pretty-printing.
data PrettyConfigClassic configName
PrettyConfigClassic :: configName -> Bool -> PrettyConfigClassic configName

-- | How to pretty-print names.
[_pccConfigName] :: PrettyConfigClassic configName -> configName

-- | Whether to display annotations.
[_pccDisplayAnn] :: PrettyConfigClassic configName -> Bool

-- | The "classically pretty-printable" constraint.
type PrettyClassicBy configName = PrettyBy (PrettyConfigClassic configName)
type PrettyClassic = PrettyClassicBy PrettyConfigName

-- | Add a pretty-printed annotation to a list of <a>Doc</a>s if the given
--   config enables pretty-printing of annotations.
consAnnIf :: Pretty ann => PrettyConfigClassic configName -> ann -> [Doc dann] -> [Doc dann]

-- | Pretty-print a value in the default mode using the classic view.
prettyClassicDef :: PrettyClassic a => a -> Doc ann

-- | Pretty-print a value in the debug mode using the classic view.
prettyClassicDebug :: PrettyClassic a => a -> Doc ann
data ShowKinds
ShowKindsYes :: ShowKinds
ShowKindsNonType :: ShowKinds
ShowKindsNo :: ShowKinds

-- | Configuration for the readable pretty-printing.
data PrettyConfigReadable configName
PrettyConfigReadable :: configName -> RenderContext -> ShowKinds -> PrettyConfigReadable configName
[_pcrConfigName] :: PrettyConfigReadable configName -> configName
[_pcrRenderContext] :: PrettyConfigReadable configName -> RenderContext
[_pcrShowKinds] :: PrettyConfigReadable configName -> ShowKinds
pcrConfigName :: forall configName_aFkU configName_aFoO. Lens (PrettyConfigReadable configName_aFkU) (PrettyConfigReadable configName_aFoO) configName_aFkU configName_aFoO
pcrRenderContext :: forall configName_aFkU. Lens' (PrettyConfigReadable configName_aFkU) RenderContext
pcrShowKinds :: forall configName_aFkU. Lens' (PrettyConfigReadable configName_aFkU) ShowKinds

-- | The "readably pretty-printable" constraint.
type PrettyReadableBy configName = PrettyBy (PrettyConfigReadable configName)
type PrettyReadable = PrettyReadableBy PrettyConfigName

-- | A <a>PrettyConfigReadable</a> with the fixity specified to
--   <a>topFixity</a>.
topPrettyConfigReadable :: configName -> ShowKinds -> PrettyConfigReadable configName

-- | A <a>PrettyConfigReadable</a> with the fixity specified to
--   <a>botFixity</a>.
botPrettyConfigReadable :: configName -> ShowKinds -> PrettyConfigReadable configName

-- | The fixity of a binder.
binderFixity :: Fixity

-- | The fixity of <tt>(-&gt;)</tt>.
arrowFixity :: Fixity
prettyBytes :: ByteString -> Doc ann
data ConstConfig
ConstConfig :: ConstConfig
type PrettyConst = PrettyBy ConstConfig
prettyConst :: PrettyConst a => a -> Doc ann
displayConst :: forall str a. (PrettyConst a, Render str) => a -> str


-- | This module defines a common type various evaluation machine use to
--   return their results.
module PlutusCore.Evaluation.Result

-- | A class for viewing errors as evaluation failures (in the sense of
--   Plutus).
class AsEvaluationFailure err
_EvaluationFailure :: AsEvaluationFailure err => Prism' err ()
evaluationFailure :: AsEvaluationFailure err => err

-- | Construct a <a>Prism</a> focusing on the <tt>*EvaluationFailure</tt>
--   part of <tt>err</tt> by taking that <tt>*EvaluationFailure</tt> and
--   
--   <ol>
--   <li>returning it for the setter part of the prism</li>
--   <li>checking the error for equality with <tt>*EvaluationFailure</tt>
--   for the opposite direction.</li>
--   </ol>
_EvaluationFailureVia :: Eq err => err -> Prism' err ()

-- | The parameterized type of results various evaluation engines return.
--   On the PLC side this becomes (via <tt>makeKnown</tt>) either a call to
--   <tt>Error</tt> or a value of the PLC counterpart of type <tt>a</tt>.
data EvaluationResult a
EvaluationSuccess :: !a -> EvaluationResult a
EvaluationFailure :: EvaluationResult a

-- | Check whether an <a>EvaluationResult</a> is an
--   <a>EvaluationSuccess</a>.
isEvaluationSuccess :: EvaluationResult a -> Bool

-- | Check whether an <a>EvaluationResult</a> is an
--   <a>EvaluationFailure</a>.
isEvaluationFailure :: EvaluationResult a -> Bool
instance Control.DeepSeq.NFData a => Control.DeepSeq.NFData (PlutusCore.Evaluation.Result.EvaluationResult a)
instance Data.Traversable.Traversable PlutusCore.Evaluation.Result.EvaluationResult
instance Data.Foldable.Foldable PlutusCore.Evaluation.Result.EvaluationResult
instance GHC.Base.Functor PlutusCore.Evaluation.Result.EvaluationResult
instance GHC.Generics.Generic (PlutusCore.Evaluation.Result.EvaluationResult a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (PlutusCore.Evaluation.Result.EvaluationResult a)
instance GHC.Show.Show a => GHC.Show.Show (PlutusCore.Evaluation.Result.EvaluationResult a)
instance Control.Monad.Error.Class.MonadError () PlutusCore.Evaluation.Result.EvaluationResult
instance GHC.Base.Applicative PlutusCore.Evaluation.Result.EvaluationResult
instance GHC.Base.Monad PlutusCore.Evaluation.Result.EvaluationResult
instance GHC.Base.Alternative PlutusCore.Evaluation.Result.EvaluationResult
instance Control.Monad.Fail.MonadFail PlutusCore.Evaluation.Result.EvaluationResult
instance Text.PrettyBy.Internal.PrettyBy config a => Text.PrettyBy.Internal.PrettyBy config (PlutusCore.Evaluation.Result.EvaluationResult a)
instance PlutusCore.Pretty.Classic.PrettyClassic a => Prettyprinter.Internal.Pretty (PlutusCore.Evaluation.Result.EvaluationResult a)
instance PlutusCore.Evaluation.Result.AsEvaluationFailure ()

module Crypto

-- | Ed25519 signature verification This will fail if the key or the
--   signature are not of the expected length. This version uses the
--   cardano-crypto implementation of the verification function.
verifyEd25519Signature_V1 :: ByteString -> ByteString -> ByteString -> Emitter (EvaluationResult Bool)

-- | Ed25519 signature verification This will fail if the key or the
--   signature are not of the expected length. This version uses the
--   cardano-crypto-class implementation of the verification function
--   (using libsodium).
verifyEd25519Signature_V2 :: ByteString -> ByteString -> ByteString -> Emitter (EvaluationResult Bool)

-- | Verify an ECDSA signature made using the SECP256k1 curve.
--   
--   <h1>Note</h1>
--   
--   There are additional well-formation requirements for the arguments
--   beyond their length:
--   
--   <ul>
--   <li>The first byte of the public key must correspond to the sign of
--   the <i>y</i> coordinate: this is <tt>0x02</tt> if <i>y</i> is even,
--   and <tt>0x03</tt> otherwise.</li>
--   <li>The remaining bytes of the public key must correspond to the
--   <i>x</i> coordinate, as a big-endian integer.</li>
--   <li>The first 32 bytes of the signature must correspond to the
--   big-endian integer representation of _r_.</li>
--   <li>The last 32 bytes of the signature must correspond to the
--   big-endian integer representation of _s_.</li>
--   </ul>
--   
--   While this primitive <i>accepts</i> a hash, any caller should only
--   pass it hashes that they computed themselves: specifically, they
--   should receive the <i>message</i> from a sender and hash it, rather
--   than receiving the <i>hash</i> from said sender. Failure to do so can
--   be <a>dangerous</a>. Other than length, we make no requirements of
--   what hash gets used.
verifyEcdsaSecp256k1Signature :: ByteString -> ByteString -> ByteString -> Emitter (EvaluationResult Bool)

-- | Verify a Schnorr signature made using the SECP256k1 curve.
--   
--   <h1>Note</h1>
--   
--   There are additional well-formation requirements for the arguments
--   beyond their length. Throughout, we refer to co-ordinates of the point
--   <tt>R</tt>.
--   
--   <ul>
--   <li>The bytes of the public key must correspond to the <i>x</i>
--   coordinate, as a big-endian integer, as specified in BIP-340.</li>
--   <li>The first 32 bytes of the signature must correspond to the
--   <i>x</i> coordinate, as a big-endian integer, as specified in
--   BIP-340.</li>
--   <li>The last 32 bytes of the signature must correspond to the bytes of
--   <i>s</i>, as a big-endian integer, as specified in BIP-340.</li>
--   </ul>
--   
--   <h1>See also</h1>
--   
--   <ul>
--   <li><a>BIP-340</a></li>
--   </ul>
verifySchnorrSecp256k1Signature :: ByteString -> ByteString -> ByteString -> Emitter (EvaluationResult Bool)


-- | The exceptions that an abstract machine can throw.
module PlutusCore.Evaluation.Machine.Exception

-- | When unlifting of a PLC term into a Haskell value fails, this error is
--   thrown.
newtype UnliftingError
UnliftingErrorE :: Text -> UnliftingError
class AsUnliftingError r_a19Es
_UnliftingError :: AsUnliftingError r_a19Es => Prism' r_a19Es UnliftingError
_UnliftingErrorE :: AsUnliftingError r_a19Es => Prism' r_a19Es Text

-- | The type of errors that <tt>readKnown</tt> and <tt>makeKnown</tt> can
--   return.
data KnownTypeError
KnownTypeUnliftingError :: !UnliftingError -> KnownTypeError
KnownTypeEvaluationFailure :: KnownTypeError

-- | Errors which can occur during a run of an abstract machine.
data MachineError fun

-- | An attempt to reduce a not immediately reducible type instantiation.
NonPolymorphicInstantiationMachineError :: MachineError fun

-- | An attempt to unwrap a not wrapped term.
NonWrapUnwrappedMachineError :: MachineError fun

-- | An attempt to reduce a not immediately reducible application.
NonFunctionalApplicationMachineError :: MachineError fun

-- | An attempt to evaluate an open term.
OpenTermEvaluatedMachineError :: MachineError fun

-- | An attempt to compute a constant application resulted in
--   <tt>ConstAppError</tt>.
UnliftingMachineError :: UnliftingError -> MachineError fun

-- | A builtin expected a term argument, but something else was received
BuiltinTermArgumentExpectedMachineError :: MachineError fun

-- | A builtin received a term argument when something else was expected
UnexpectedBuiltinTermArgumentMachineError :: MachineError fun
UnknownBuiltin :: !fun -> MachineError fun
class AsMachineError r_a19EJ fun_a198N | r_a19EJ -> fun_a198N
_MachineError :: AsMachineError r_a19EJ fun_a198N => Prism' r_a19EJ (MachineError fun_a198N)
_NonPolymorphicInstantiationMachineError :: AsMachineError r_a19EJ fun_a198N => Prism' r_a19EJ ()
_NonWrapUnwrappedMachineError :: AsMachineError r_a19EJ fun_a198N => Prism' r_a19EJ ()
_NonFunctionalApplicationMachineError :: AsMachineError r_a19EJ fun_a198N => Prism' r_a19EJ ()
_OpenTermEvaluatedMachineError :: AsMachineError r_a19EJ fun_a198N => Prism' r_a19EJ ()
_UnliftingMachineError :: AsMachineError r_a19EJ fun_a198N => Prism' r_a19EJ UnliftingError
_BuiltinTermArgumentExpectedMachineError :: AsMachineError r_a19EJ fun_a198N => Prism' r_a19EJ ()
_UnexpectedBuiltinTermArgumentMachineError :: AsMachineError r_a19EJ fun_a198N => Prism' r_a19EJ ()
_UnknownBuiltin :: AsMachineError r_a19EJ fun_a198N => Prism' r_a19EJ fun_a198N

-- | The type of errors (all of them) which can occur during evaluation
--   (some are used-caused, some are internal).
data EvaluationError user internal

-- | Indicates bugs.
InternalEvaluationError :: !internal -> EvaluationError user internal

-- | Indicates user errors.
UserEvaluationError :: !user -> EvaluationError user internal
class AsEvaluationError r_a19F1 user_a198L internal_a198M | r_a19F1 -> user_a198L internal_a198M
_EvaluationError :: AsEvaluationError r_a19F1 user_a198L internal_a198M => Prism' r_a19F1 (EvaluationError user_a198L internal_a198M)
_InternalEvaluationError :: AsEvaluationError r_a19F1 user_a198L internal_a198M => Prism' r_a19F1 internal_a198M
_UserEvaluationError :: AsEvaluationError r_a19F1 user_a198L internal_a198M => Prism' r_a19F1 user_a198L

-- | An error and (optionally) what caused it.
data ErrorWithCause err cause
ErrorWithCause :: !err -> !Maybe cause -> ErrorWithCause err cause
[_ewcError] :: ErrorWithCause err cause -> !err
[_ewcCause] :: ErrorWithCause err cause -> !Maybe cause
type EvaluationException user internal = ErrorWithCause (EvaluationError user internal)
throwNotAConstant :: MonadError KnownTypeError m => m void
mapCauseInMachineException :: (term1 -> term2) -> EvaluationException user (MachineError fun) term1 -> EvaluationException user (MachineError fun) term2

-- | Throw an <tt>Exception</tt> described by a <a>ReifiedPrism</a>.
--   
--   <pre>
--   <a>throwing</a> l â‰¡ <a>reviews</a> l <a>throwError</a>
--   </pre>
--   
--   <pre>
--   <a>throwing</a> :: <a>MonadError</a> e m =&gt; <a>Prism'</a> e t -&gt; t -&gt; a
--   <a>throwing</a> :: <a>MonadError</a> e m =&gt; <a>Iso'</a> e t   -&gt; t -&gt; a
--   </pre>
throwing :: MonadError e m => AReview e t -> t -> m x

-- | Similar to <a>throwing</a> but specialised for the common case of
--   error constructors with no arguments.
--   
--   <pre>
--   data MyError = Foo | Bar
--   makePrisms ''MyError
--   <a>throwing_</a> _Foo :: <a>MonadError</a> MyError m =&gt; m a
--   </pre>
throwing_ :: MonadError e m => AReview e () -> m x

-- | <a>Prismatically</a> throw an error and its (optional) cause.
throwingWithCause :: forall exc e t term m x. (exc ~ ErrorWithCause e term, MonadError exc m) => AReview e t -> t -> Maybe term -> m x

-- | Turn any <a>UserEvaluationError</a> into an <a>EvaluationFailure</a>.
extractEvaluationResult :: Either (EvaluationException user internal term) a -> Either (ErrorWithCause internal term) (EvaluationResult a)
unsafeExtractEvaluationResult :: (PrettyPlc internal, PrettyPlc term, Typeable internal, Typeable term) => Either (EvaluationException user internal term) a -> EvaluationResult a
instance (Control.DeepSeq.NFData err, Control.DeepSeq.NFData cause) => Control.DeepSeq.NFData (PlutusCore.Evaluation.Machine.Exception.ErrorWithCause err cause)
instance GHC.Generics.Generic (PlutusCore.Evaluation.Machine.Exception.ErrorWithCause err cause)
instance Data.Traversable.Traversable (PlutusCore.Evaluation.Machine.Exception.ErrorWithCause err)
instance Data.Foldable.Foldable (PlutusCore.Evaluation.Machine.Exception.ErrorWithCause err)
instance GHC.Base.Functor (PlutusCore.Evaluation.Machine.Exception.ErrorWithCause err)
instance (GHC.Classes.Eq err, GHC.Classes.Eq cause) => GHC.Classes.Eq (PlutusCore.Evaluation.Machine.Exception.ErrorWithCause err cause)
instance (PlutusCore.Pretty.Plc.PrettyPlc cause, PlutusCore.Pretty.Plc.PrettyPlc err, Data.Typeable.Internal.Typeable cause, Data.Typeable.Internal.Typeable err) => GHC.Exception.Type.Exception (PlutusCore.Evaluation.Machine.Exception.ErrorWithCause err cause)
instance Data.Bifunctor.Bifunctor PlutusCore.Evaluation.Machine.Exception.ErrorWithCause
instance PlutusCore.Evaluation.Result.AsEvaluationFailure err => PlutusCore.Evaluation.Result.AsEvaluationFailure (PlutusCore.Evaluation.Machine.Exception.ErrorWithCause err cause)
instance (Prettyprinter.Internal.Pretty err, Prettyprinter.Internal.Pretty cause) => Prettyprinter.Internal.Pretty (PlutusCore.Evaluation.Machine.Exception.ErrorWithCause err cause)
instance (Text.PrettyBy.Internal.PrettyBy config cause, Text.PrettyBy.Internal.PrettyBy config err) => Text.PrettyBy.Internal.PrettyBy config (PlutusCore.Evaluation.Machine.Exception.ErrorWithCause err cause)
instance (PlutusCore.Pretty.Plc.PrettyPlc cause, PlutusCore.Pretty.Plc.PrettyPlc err) => GHC.Show.Show (PlutusCore.Evaluation.Machine.Exception.ErrorWithCause err cause)
instance PlutusCore.Evaluation.Machine.Exception.AsEvaluationError (PlutusCore.Evaluation.Machine.Exception.EvaluationError user internal) user internal
instance (internal GHC.Types.~ PlutusCore.Evaluation.Machine.Exception.MachineError fun) => PlutusCore.Evaluation.Machine.Exception.AsMachineError (PlutusCore.Evaluation.Machine.Exception.EvaluationError user internal) fun
instance PlutusCore.Evaluation.Machine.Exception.AsUnliftingError internal => PlutusCore.Evaluation.Machine.Exception.AsUnliftingError (PlutusCore.Evaluation.Machine.Exception.EvaluationError user internal)
instance PlutusCore.Evaluation.Result.AsEvaluationFailure user => PlutusCore.Evaluation.Result.AsEvaluationFailure (PlutusCore.Evaluation.Machine.Exception.EvaluationError user internal)
instance PlutusCore.Evaluation.Machine.Exception.AsMachineError (PlutusCore.Evaluation.Machine.Exception.MachineError fun) fun
instance PlutusCore.Evaluation.Machine.Exception.AsUnliftingError (PlutusCore.Evaluation.Machine.Exception.MachineError fun)
instance PlutusCore.Evaluation.Machine.Exception.AsKnownTypeError PlutusCore.Evaluation.Machine.Exception.KnownTypeError
instance PlutusCore.Evaluation.Machine.Exception.AsUnliftingError PlutusCore.Evaluation.Machine.Exception.KnownTypeError
instance PlutusCore.Evaluation.Machine.Exception.AsUnliftingError PlutusCore.Evaluation.Machine.Exception.UnliftingError
instance PlutusCore.Evaluation.Result.AsEvaluationFailure PlutusCore.Evaluation.Machine.Exception.KnownTypeError
instance Prettyprinter.Internal.Pretty PlutusCore.Evaluation.Machine.Exception.UnliftingError
instance (Text.PrettyBy.Internal.HasPrettyDefaults config GHC.Types.~ 'GHC.Types.True, Prettyprinter.Internal.Pretty fun) => Text.PrettyBy.Internal.PrettyBy config (PlutusCore.Evaluation.Machine.Exception.MachineError fun)
instance (Text.PrettyBy.Internal.HasPrettyDefaults config GHC.Types.~ 'GHC.Types.True, Text.PrettyBy.Internal.PrettyBy config internal, Prettyprinter.Internal.Pretty user) => Text.PrettyBy.Internal.PrettyBy config (PlutusCore.Evaluation.Machine.Exception.EvaluationError user internal)
instance Control.DeepSeq.NFData PlutusCore.Evaluation.Machine.Exception.UnliftingError
instance GHC.Base.Semigroup PlutusCore.Evaluation.Machine.Exception.UnliftingError
instance Data.String.IsString PlutusCore.Evaluation.Machine.Exception.UnliftingError
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.Exception.UnliftingError
instance GHC.Show.Show PlutusCore.Evaluation.Machine.Exception.UnliftingError
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.Exception.KnownTypeError
instance Control.DeepSeq.NFData fun => Control.DeepSeq.NFData (PlutusCore.Evaluation.Machine.Exception.MachineError fun)
instance GHC.Generics.Generic (PlutusCore.Evaluation.Machine.Exception.MachineError fun)
instance GHC.Base.Functor PlutusCore.Evaluation.Machine.Exception.MachineError
instance GHC.Classes.Eq fun => GHC.Classes.Eq (PlutusCore.Evaluation.Machine.Exception.MachineError fun)
instance GHC.Show.Show fun => GHC.Show.Show (PlutusCore.Evaluation.Machine.Exception.MachineError fun)
instance (Control.DeepSeq.NFData internal, Control.DeepSeq.NFData user) => Control.DeepSeq.NFData (PlutusCore.Evaluation.Machine.Exception.EvaluationError user internal)
instance GHC.Generics.Generic (PlutusCore.Evaluation.Machine.Exception.EvaluationError user internal)
instance GHC.Base.Functor (PlutusCore.Evaluation.Machine.Exception.EvaluationError user)
instance (GHC.Classes.Eq internal, GHC.Classes.Eq user) => GHC.Classes.Eq (PlutusCore.Evaluation.Machine.Exception.EvaluationError user internal)
instance (GHC.Show.Show internal, GHC.Show.Show user) => GHC.Show.Show (PlutusCore.Evaluation.Machine.Exception.EvaluationError user internal)

module PlutusCore.Evaluation.Machine.ExMemory
type CostingInteger = SatInt

-- | Counts size in machine words.
newtype ExMemory
ExMemory :: CostingInteger -> ExMemory

-- | Counts CPU units in picoseconds: maximum value for SatInt is 2^63 ps,
--   or appproximately 106 days.
newtype ExCPU
ExCPU :: CostingInteger -> ExCPU
class ExMemoryUsage a
memoryUsage :: ExMemoryUsage a => a -> ExMemory
instance NoThunks.Class.NoThunks PlutusCore.Evaluation.Machine.ExMemory.ExMemory
instance Codec.Serialise.Class.Serialise PlutusCore.Evaluation.Machine.ExMemory.ExMemory
instance Data.Aeson.Types.ToJSON.ToJSON PlutusCore.Evaluation.Machine.ExMemory.ExMemory
instance Data.Aeson.Types.FromJSON.FromJSON PlutusCore.Evaluation.Machine.ExMemory.ExMemory
instance GHC.Base.Monoid PlutusCore.Evaluation.Machine.ExMemory.ExMemory
instance GHC.Base.Semigroup PlutusCore.Evaluation.Machine.ExMemory.ExMemory
instance GHC.Enum.Bounded PlutusCore.Evaluation.Machine.ExMemory.ExMemory
instance GHC.Read.Read PlutusCore.Evaluation.Machine.ExMemory.ExMemory
instance Control.DeepSeq.NFData PlutusCore.Evaluation.Machine.ExMemory.ExMemory
instance GHC.Num.Num PlutusCore.Evaluation.Machine.ExMemory.ExMemory
instance Language.Haskell.TH.Syntax.Lift PlutusCore.Evaluation.Machine.ExMemory.ExMemory
instance GHC.Generics.Generic PlutusCore.Evaluation.Machine.ExMemory.ExMemory
instance GHC.Show.Show PlutusCore.Evaluation.Machine.ExMemory.ExMemory
instance GHC.Classes.Ord PlutusCore.Evaluation.Machine.ExMemory.ExMemory
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.ExMemory.ExMemory
instance NoThunks.Class.NoThunks PlutusCore.Evaluation.Machine.ExMemory.ExCPU
instance Codec.Serialise.Class.Serialise PlutusCore.Evaluation.Machine.ExMemory.ExCPU
instance Data.Aeson.Types.ToJSON.ToJSON PlutusCore.Evaluation.Machine.ExMemory.ExCPU
instance Data.Aeson.Types.FromJSON.FromJSON PlutusCore.Evaluation.Machine.ExMemory.ExCPU
instance GHC.Base.Monoid PlutusCore.Evaluation.Machine.ExMemory.ExCPU
instance GHC.Base.Semigroup PlutusCore.Evaluation.Machine.ExMemory.ExCPU
instance GHC.Enum.Bounded PlutusCore.Evaluation.Machine.ExMemory.ExCPU
instance GHC.Read.Read PlutusCore.Evaluation.Machine.ExMemory.ExCPU
instance Control.DeepSeq.NFData PlutusCore.Evaluation.Machine.ExMemory.ExCPU
instance GHC.Num.Num PlutusCore.Evaluation.Machine.ExMemory.ExCPU
instance Language.Haskell.TH.Syntax.Lift PlutusCore.Evaluation.Machine.ExMemory.ExCPU
instance GHC.Generics.Generic PlutusCore.Evaluation.Machine.ExMemory.ExCPU
instance GHC.Show.Show PlutusCore.Evaluation.Machine.ExMemory.ExCPU
instance GHC.Classes.Ord PlutusCore.Evaluation.Machine.ExMemory.ExCPU
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.ExMemory.ExCPU
instance (PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage a, PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage b) => PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage (a, b)
instance PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage (Universe.Core.SomeTypeIn uni)
instance (Universe.Core.Closed uni, Universe.Core.Everywhere uni PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage) => PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage (Data.Some.Newtype.Some (Universe.Core.ValueOf uni))
instance PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage ()
instance PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage GHC.Num.Integer.Integer
instance PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage GHC.Word.Word8
instance PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage Data.ByteString.Internal.ByteString
instance PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage Data.Text.Internal.Text
instance PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage GHC.Types.Int
instance PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage GHC.Types.Char
instance PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage GHC.Types.Bool
instance PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage a => PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage [a]
instance PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage PlutusCore.Data.Data
instance Prettyprinter.Internal.Pretty PlutusCore.Evaluation.Machine.ExMemory.ExCPU
instance Text.PrettyBy.Internal.PrettyBy config PlutusCore.Evaluation.Machine.ExMemory.ExCPU
instance Prettyprinter.Internal.Pretty PlutusCore.Evaluation.Machine.ExMemory.ExMemory
instance Text.PrettyBy.Internal.PrettyBy config PlutusCore.Evaluation.Machine.ExMemory.ExMemory


-- | Note [Budgeting units]
--   
--   We use picoseconds for measuring times and words for measuring memory
--   usage. Some care is required with time units because different units
--   are used in different places.
--   
--   <ul>
--   <li>The basic data for models of execution time is produced by
--   Criterion benchmarks (run via plutus-core:cost-model-budgeting-bench)
--   and saved in a CSV file (usually 'benching.csv'). At this point the
--   time units are seconds.</li>
--   <li>The data in the CSV file is used by
--   plutus-core:generate-cost-model to create cost-prediction models for
--   the built-in functions, and data describing these is written to a JSON
--   file (usually 'builtinCostModel.json'. This process involves several
--   steps:<ul><li>The CreateBuiltinCostModel module reads in the data from
--   the CSV file and runs R code in 'models.R' to fit linear models to the
--   benchmark results for each builtin. This process (and its results)
--   necessarily involves the use of floating-point
--   numbers.</li></ul>Builtin execution times are typically of the order
--   of 10^(-6) or 10^(-7) seconds, and the benching data is converted to
--   microseconds in 'models.R' because it's sometimes useful to work with
--   the data interactively and this makes the numbers a lot more
--   human-readable.<ul><li>The coefficents from the R models are returned
--   to the Haskell code in CreateBuiltinCostModel and written out to a
--   JSON file. To avoid the use of floats in JSON and in cost prediction
--   at runtime (which might be machine-dependent if floats were used),
--   numbers are multiplied by 10^6 and rounded to the nearest integer,
--   shfting from the microsecond scale to the picosecond scale. This
--   rescaling is safe because all of our models are (currently) linear in
--   their inputs.</li></ul></li>
--   <li>When the Plutus Core evaluator is compiled, the JSON data in
--   'builtinCostModel.json' is read in and used to create the
--   defaultCostModel object. This also includes information about the
--   costs of basic CEK machine operations obtained from
--   'cekMachineCosts.json' (currently generated manually).</li>
--   <li>When the Plutus Core evaluator is run, the code in
--   PlutusCore.Evaluation.Machine.BuiltinCostModel uses the data in
--   defaultCostModel to create Haskell versions of the cost models which
--   estimate the execution time of a built-in function given the sizes of
--   its inputs. This (and the memory usage) are fed into a budgeting
--   process which measures the ongoing resource consumption during script
--   execution.</li>
--   </ul>
--   
--   All budget calculations are (at least on 64-bit machines) done using
--   the <tt>SatInt</tt> type which deals with overflow by truncating
--   excessivly large values to the maximum <tt>SatInt</tt> value, 2^63-1.
--   In picoseconds this is about 106 days, which should suffice for any
--   code we expect to run. Memory budgeting is entirely in terms of
--   machine words, and floating-point issues are irrelevant.
--   
--   Some precision is lost during the conversion from R's floating-point
--   models to the integral numbers used in the Haskell models. However,
--   experimentation shows that the difference is very small. The tests in
--   plutus-core: cost-model-test run the R models and the Haskell models
--   with a large number of random inputs and check that they agree to
--   within one part in 10,000, which is well within the accuracy we
--   require for the cost model.
module PlutusCore.Evaluation.Machine.ExBudget
data ExBudget
ExBudget :: ExCPU -> ExMemory -> ExBudget
[exBudgetCPU] :: ExBudget -> ExCPU
[exBudgetMemory] :: ExBudget -> ExMemory

-- | Subract one <a>ExBudget</a> from another. Does not guarantee that the
--   result is positive.
minusExBudget :: ExBudget -> ExBudget -> ExBudget

-- | A class for injecting a <tt>Builtin</tt> into an <tt>exBudgetCat</tt>.
--   We need it, because the constant application machinery calls
--   <tt>spendBudget</tt> before reducing a constant application and we
--   want to be general over <tt>exBudgetCat</tt> there, but still track
--   the built-in functions category, hence the ad hoc polymorphism.
class ExBudgetBuiltin fun exBudgetCat
exBudgetBuiltin :: ExBudgetBuiltin fun exBudgetCat => fun -> exBudgetCat
newtype ExRestrictingBudget
ExRestrictingBudget :: ExBudget -> ExRestrictingBudget
[unExRestrictingBudget] :: ExRestrictingBudget -> ExBudget

-- | This is used elsewhere to convert cost models into JSON objects where
--   the names of the fields are exactly the same as the names of the
--   builtins.
data LowerIntialCharacter

-- | When we want to just evaluate the program we use the
--   <tt>Restricting</tt> mode with an enormous budget, so that evaluation
--   costs of on-chain budgeting are reflected accurately in benchmarks.
enormousBudget :: ExRestrictingBudget
instance Data.Aeson.Types.ToJSON.ToJSON PlutusCore.Evaluation.Machine.ExBudget.ExBudget
instance Data.Aeson.Types.FromJSON.FromJSON PlutusCore.Evaluation.Machine.ExBudget.ExBudget
instance Codec.Serialise.Class.Serialise PlutusCore.Evaluation.Machine.ExBudget.ExBudget
instance NoThunks.Class.NoThunks PlutusCore.Evaluation.Machine.ExBudget.ExBudget
instance Control.DeepSeq.NFData PlutusCore.Evaluation.Machine.ExBudget.ExBudget
instance Text.PrettyBy.Internal.PrettyBy config PlutusCore.Evaluation.Machine.ExBudget.ExBudget
instance Language.Haskell.TH.Syntax.Lift PlutusCore.Evaluation.Machine.ExBudget.ExBudget
instance GHC.Generics.Generic PlutusCore.Evaluation.Machine.ExBudget.ExBudget
instance GHC.Show.Show PlutusCore.Evaluation.Machine.ExBudget.ExBudget
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.ExBudget.ExBudget
instance Control.DeepSeq.NFData PlutusCore.Evaluation.Machine.ExBudget.ExRestrictingBudget
instance Text.PrettyBy.Internal.PrettyBy config PlutusCore.Evaluation.Machine.ExBudget.ExRestrictingBudget
instance Prettyprinter.Internal.Pretty PlutusCore.Evaluation.Machine.ExBudget.ExRestrictingBudget
instance GHC.Base.Monoid PlutusCore.Evaluation.Machine.ExBudget.ExRestrictingBudget
instance GHC.Base.Semigroup PlutusCore.Evaluation.Machine.ExBudget.ExRestrictingBudget
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.ExBudget.ExRestrictingBudget
instance GHC.Show.Show PlutusCore.Evaluation.Machine.ExBudget.ExRestrictingBudget
instance GHC.Base.Semigroup PlutusCore.Evaluation.Machine.ExBudget.ExBudget
instance GHC.Base.Monoid PlutusCore.Evaluation.Machine.ExBudget.ExBudget
instance Prettyprinter.Internal.Pretty PlutusCore.Evaluation.Machine.ExBudget.ExBudget
instance PlutusCore.Evaluation.Machine.ExBudget.ExBudgetBuiltin fun ()
instance Deriving.Aeson.StringModifier PlutusCore.Evaluation.Machine.ExBudget.LowerIntialCharacter

module PlutusCore.Evaluation.Machine.CostingFun.Core
data CostingFun model
CostingFun :: model -> model -> CostingFun model
[costingFunCpu] :: CostingFun model -> model
[costingFunMemory] :: CostingFun model -> model

-- | s * (x + y) + I
data ModelAddedSizes
ModelAddedSizes :: CostingInteger -> CostingInteger -> ModelAddedSizes
[modelAddedSizesIntercept] :: ModelAddedSizes -> CostingInteger
[modelAddedSizesSlope] :: ModelAddedSizes -> CostingInteger

-- | s * (x - y) + I
data ModelSubtractedSizes
ModelSubtractedSizes :: CostingInteger -> CostingInteger -> CostingInteger -> ModelSubtractedSizes
[modelSubtractedSizesIntercept] :: ModelSubtractedSizes -> CostingInteger
[modelSubtractedSizesSlope] :: ModelSubtractedSizes -> CostingInteger
[modelSubtractedSizesMinimum] :: ModelSubtractedSizes -> CostingInteger

-- | if p then s*x else c; p depends on usage
data ModelConstantOrLinear
ModelConstantOrLinear :: CostingInteger -> CostingInteger -> CostingInteger -> ModelConstantOrLinear
[modelConstantOrLinearConstant] :: ModelConstantOrLinear -> CostingInteger
[modelConstantOrLinearIntercept] :: ModelConstantOrLinear -> CostingInteger
[modelConstantOrLinearSlope] :: ModelConstantOrLinear -> CostingInteger

-- | if p then f(x,y) else c; p depends on usage
data ModelConstantOrTwoArguments
ModelConstantOrTwoArguments :: CostingInteger -> ModelTwoArguments -> ModelConstantOrTwoArguments
[modelConstantOrTwoArgumentsConstant] :: ModelConstantOrTwoArguments -> CostingInteger
[modelConstantOrTwoArgumentsModel] :: ModelConstantOrTwoArguments -> ModelTwoArguments
data ModelLinearSize
ModelLinearSize :: CostingInteger -> CostingInteger -> ModelLinearSize
[modelLinearSizeIntercept] :: ModelLinearSize -> CostingInteger
[modelLinearSizeSlope] :: ModelLinearSize -> CostingInteger

-- | s * (x * y) + I
data ModelMultipliedSizes
ModelMultipliedSizes :: CostingInteger -> CostingInteger -> ModelMultipliedSizes
[modelMultipliedSizesIntercept] :: ModelMultipliedSizes -> CostingInteger
[modelMultipliedSizesSlope] :: ModelMultipliedSizes -> CostingInteger

-- | s * min(x, y) + I
data ModelMinSize
ModelMinSize :: CostingInteger -> CostingInteger -> ModelMinSize
[modelMinSizeIntercept] :: ModelMinSize -> CostingInteger
[modelMinSizeSlope] :: ModelMinSize -> CostingInteger

-- | s * max(x, y) + I
data ModelMaxSize
ModelMaxSize :: CostingInteger -> CostingInteger -> ModelMaxSize
[modelMaxSizeIntercept] :: ModelMaxSize -> CostingInteger
[modelMaxSizeSlope] :: ModelMaxSize -> CostingInteger
data ModelOneArgument
ModelOneArgumentConstantCost :: CostingInteger -> ModelOneArgument
ModelOneArgumentLinearCost :: ModelLinearSize -> ModelOneArgument
data ModelTwoArguments
ModelTwoArgumentsConstantCost :: CostingInteger -> ModelTwoArguments
ModelTwoArgumentsLinearInX :: ModelLinearSize -> ModelTwoArguments
ModelTwoArgumentsLinearInY :: ModelLinearSize -> ModelTwoArguments
ModelTwoArgumentsAddedSizes :: ModelAddedSizes -> ModelTwoArguments
ModelTwoArgumentsSubtractedSizes :: ModelSubtractedSizes -> ModelTwoArguments
ModelTwoArgumentsMultipliedSizes :: ModelMultipliedSizes -> ModelTwoArguments
ModelTwoArgumentsMinSize :: ModelMinSize -> ModelTwoArguments
ModelTwoArgumentsMaxSize :: ModelMaxSize -> ModelTwoArguments
ModelTwoArgumentsLinearOnDiagonal :: ModelConstantOrLinear -> ModelTwoArguments
ModelTwoArgumentsConstAboveDiagonal :: ModelConstantOrTwoArguments -> ModelTwoArguments
ModelTwoArgumentsConstBelowDiagonal :: ModelConstantOrTwoArguments -> ModelTwoArguments
data ModelThreeArguments
ModelThreeArgumentsConstantCost :: CostingInteger -> ModelThreeArguments
ModelThreeArgumentsAddedSizes :: ModelAddedSizes -> ModelThreeArguments
ModelThreeArgumentsLinearInX :: ModelLinearSize -> ModelThreeArguments
ModelThreeArgumentsLinearInY :: ModelLinearSize -> ModelThreeArguments
ModelThreeArgumentsLinearInZ :: ModelLinearSize -> ModelThreeArguments
data ModelFourArguments
ModelFourArgumentsConstantCost :: CostingInteger -> ModelFourArguments
data ModelFiveArguments
ModelFiveArgumentsConstantCost :: CostingInteger -> ModelFiveArguments
data ModelSixArguments
ModelSixArgumentsConstantCost :: CostingInteger -> ModelSixArguments
runCostingFunOneArgument :: ExMemoryUsage a1 => CostingFun ModelOneArgument -> a1 -> ExBudget
runCostingFunTwoArguments :: (ExMemoryUsage a1, ExMemoryUsage a2) => CostingFun ModelTwoArguments -> a1 -> a2 -> ExBudget
runCostingFunThreeArguments :: (ExMemoryUsage a1, ExMemoryUsage a2, ExMemoryUsage a3) => CostingFun ModelThreeArguments -> a1 -> a2 -> a3 -> ExBudget
runCostingFunFourArguments :: (ExMemoryUsage a1, ExMemoryUsage a2, ExMemoryUsage a3, ExMemoryUsage a4) => CostingFun ModelFourArguments -> a1 -> a2 -> a3 -> a4 -> ExBudget
runCostingFunFiveArguments :: (ExMemoryUsage a1, ExMemoryUsage a2, ExMemoryUsage a3, ExMemoryUsage a4, ExMemoryUsage a5) => CostingFun ModelFiveArguments -> a1 -> a2 -> a3 -> a4 -> a5 -> ExBudget
runCostingFunSixArguments :: (ExMemoryUsage a1, ExMemoryUsage a2, ExMemoryUsage a3, ExMemoryUsage a4, ExMemoryUsage a5, ExMemoryUsage a6) => CostingFun ModelSixArguments -> a1 -> a2 -> a3 -> a4 -> a5 -> a6 -> ExBudget

-- | The class of types that can be converted to a hash value.
--   
--   Minimal implementation: <a>hashWithSalt</a>.
--   
--   <i>Note:</i> the hash is not guaranteed to be stable across library
--   versions, operating systems or architectures. For stable hashing use
--   named hashes: SHA256, CRC32 etc.
--   
--   If you are looking for <a>Hashable</a> instance in <tt>time</tt>
--   package, check <a>time-compat</a>
class Eq a => Hashable a
instance Control.DeepSeq.NFData model => Control.DeepSeq.NFData (PlutusCore.Evaluation.Machine.CostingFun.Core.CostingFun model)
instance Data.Default.Class.Default model => Data.Default.Class.Default (PlutusCore.Evaluation.Machine.CostingFun.Core.CostingFun model)
instance Language.Haskell.TH.Syntax.Lift model => Language.Haskell.TH.Syntax.Lift (PlutusCore.Evaluation.Machine.CostingFun.Core.CostingFun model)
instance GHC.Generics.Generic (PlutusCore.Evaluation.Machine.CostingFun.Core.CostingFun model)
instance GHC.Classes.Eq model => GHC.Classes.Eq (PlutusCore.Evaluation.Machine.CostingFun.Core.CostingFun model)
instance GHC.Show.Show model => GHC.Show.Show (PlutusCore.Evaluation.Machine.CostingFun.Core.CostingFun model)
instance Control.DeepSeq.NFData PlutusCore.Evaluation.Machine.CostingFun.Core.ModelAddedSizes
instance Language.Haskell.TH.Syntax.Lift PlutusCore.Evaluation.Machine.CostingFun.Core.ModelAddedSizes
instance GHC.Generics.Generic PlutusCore.Evaluation.Machine.CostingFun.Core.ModelAddedSizes
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.CostingFun.Core.ModelAddedSizes
instance GHC.Show.Show PlutusCore.Evaluation.Machine.CostingFun.Core.ModelAddedSizes
instance Control.DeepSeq.NFData PlutusCore.Evaluation.Machine.CostingFun.Core.ModelSubtractedSizes
instance Language.Haskell.TH.Syntax.Lift PlutusCore.Evaluation.Machine.CostingFun.Core.ModelSubtractedSizes
instance GHC.Generics.Generic PlutusCore.Evaluation.Machine.CostingFun.Core.ModelSubtractedSizes
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.CostingFun.Core.ModelSubtractedSizes
instance GHC.Show.Show PlutusCore.Evaluation.Machine.CostingFun.Core.ModelSubtractedSizes
instance Control.DeepSeq.NFData PlutusCore.Evaluation.Machine.CostingFun.Core.ModelLinearSize
instance Language.Haskell.TH.Syntax.Lift PlutusCore.Evaluation.Machine.CostingFun.Core.ModelLinearSize
instance GHC.Generics.Generic PlutusCore.Evaluation.Machine.CostingFun.Core.ModelLinearSize
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.CostingFun.Core.ModelLinearSize
instance GHC.Show.Show PlutusCore.Evaluation.Machine.CostingFun.Core.ModelLinearSize
instance Control.DeepSeq.NFData PlutusCore.Evaluation.Machine.CostingFun.Core.ModelOneArgument
instance Language.Haskell.TH.Syntax.Lift PlutusCore.Evaluation.Machine.CostingFun.Core.ModelOneArgument
instance GHC.Generics.Generic PlutusCore.Evaluation.Machine.CostingFun.Core.ModelOneArgument
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.CostingFun.Core.ModelOneArgument
instance GHC.Show.Show PlutusCore.Evaluation.Machine.CostingFun.Core.ModelOneArgument
instance Control.DeepSeq.NFData PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMultipliedSizes
instance Language.Haskell.TH.Syntax.Lift PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMultipliedSizes
instance GHC.Generics.Generic PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMultipliedSizes
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMultipliedSizes
instance GHC.Show.Show PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMultipliedSizes
instance Control.DeepSeq.NFData PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMinSize
instance Language.Haskell.TH.Syntax.Lift PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMinSize
instance GHC.Generics.Generic PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMinSize
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMinSize
instance GHC.Show.Show PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMinSize
instance Control.DeepSeq.NFData PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMaxSize
instance Language.Haskell.TH.Syntax.Lift PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMaxSize
instance GHC.Generics.Generic PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMaxSize
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMaxSize
instance GHC.Show.Show PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMaxSize
instance Control.DeepSeq.NFData PlutusCore.Evaluation.Machine.CostingFun.Core.ModelConstantOrLinear
instance Language.Haskell.TH.Syntax.Lift PlutusCore.Evaluation.Machine.CostingFun.Core.ModelConstantOrLinear
instance GHC.Generics.Generic PlutusCore.Evaluation.Machine.CostingFun.Core.ModelConstantOrLinear
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.CostingFun.Core.ModelConstantOrLinear
instance GHC.Show.Show PlutusCore.Evaluation.Machine.CostingFun.Core.ModelConstantOrLinear
instance Control.DeepSeq.NFData PlutusCore.Evaluation.Machine.CostingFun.Core.ModelConstantOrTwoArguments
instance Language.Haskell.TH.Syntax.Lift PlutusCore.Evaluation.Machine.CostingFun.Core.ModelConstantOrTwoArguments
instance GHC.Generics.Generic PlutusCore.Evaluation.Machine.CostingFun.Core.ModelConstantOrTwoArguments
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.CostingFun.Core.ModelConstantOrTwoArguments
instance GHC.Show.Show PlutusCore.Evaluation.Machine.CostingFun.Core.ModelConstantOrTwoArguments
instance Control.DeepSeq.NFData PlutusCore.Evaluation.Machine.CostingFun.Core.ModelTwoArguments
instance Language.Haskell.TH.Syntax.Lift PlutusCore.Evaluation.Machine.CostingFun.Core.ModelTwoArguments
instance GHC.Generics.Generic PlutusCore.Evaluation.Machine.CostingFun.Core.ModelTwoArguments
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.CostingFun.Core.ModelTwoArguments
instance GHC.Show.Show PlutusCore.Evaluation.Machine.CostingFun.Core.ModelTwoArguments
instance Control.DeepSeq.NFData PlutusCore.Evaluation.Machine.CostingFun.Core.ModelThreeArguments
instance Language.Haskell.TH.Syntax.Lift PlutusCore.Evaluation.Machine.CostingFun.Core.ModelThreeArguments
instance GHC.Generics.Generic PlutusCore.Evaluation.Machine.CostingFun.Core.ModelThreeArguments
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.CostingFun.Core.ModelThreeArguments
instance GHC.Show.Show PlutusCore.Evaluation.Machine.CostingFun.Core.ModelThreeArguments
instance Control.DeepSeq.NFData PlutusCore.Evaluation.Machine.CostingFun.Core.ModelFourArguments
instance Language.Haskell.TH.Syntax.Lift PlutusCore.Evaluation.Machine.CostingFun.Core.ModelFourArguments
instance GHC.Generics.Generic PlutusCore.Evaluation.Machine.CostingFun.Core.ModelFourArguments
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.CostingFun.Core.ModelFourArguments
instance GHC.Show.Show PlutusCore.Evaluation.Machine.CostingFun.Core.ModelFourArguments
instance Control.DeepSeq.NFData PlutusCore.Evaluation.Machine.CostingFun.Core.ModelFiveArguments
instance Language.Haskell.TH.Syntax.Lift PlutusCore.Evaluation.Machine.CostingFun.Core.ModelFiveArguments
instance GHC.Generics.Generic PlutusCore.Evaluation.Machine.CostingFun.Core.ModelFiveArguments
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.CostingFun.Core.ModelFiveArguments
instance GHC.Show.Show PlutusCore.Evaluation.Machine.CostingFun.Core.ModelFiveArguments
instance Control.DeepSeq.NFData PlutusCore.Evaluation.Machine.CostingFun.Core.ModelSixArguments
instance Language.Haskell.TH.Syntax.Lift PlutusCore.Evaluation.Machine.CostingFun.Core.ModelSixArguments
instance GHC.Generics.Generic PlutusCore.Evaluation.Machine.CostingFun.Core.ModelSixArguments
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.CostingFun.Core.ModelSixArguments
instance GHC.Show.Show PlutusCore.Evaluation.Machine.CostingFun.Core.ModelSixArguments
instance Data.Default.Class.Default PlutusCore.Evaluation.Machine.CostingFun.Core.ModelSixArguments
instance Data.Default.Class.Default PlutusCore.Evaluation.Machine.CostingFun.Core.ModelFiveArguments
instance Data.Default.Class.Default PlutusCore.Evaluation.Machine.CostingFun.Core.ModelFourArguments
instance Data.Default.Class.Default PlutusCore.Evaluation.Machine.CostingFun.Core.ModelThreeArguments
instance Data.Default.Class.Default PlutusCore.Evaluation.Machine.CostingFun.Core.ModelTwoArguments
instance Data.Default.Class.Default PlutusCore.Evaluation.Machine.CostingFun.Core.ModelOneArgument
instance (ab GHC.Types.~ (a -> b), PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage a, PlutusCore.Evaluation.Machine.CostingFun.Core.OnMemoryUsages c b) => PlutusCore.Evaluation.Machine.CostingFun.Core.OnMemoryUsages (PlutusCore.Evaluation.Machine.ExMemory.ExMemory -> c) ab
instance (ab GHC.Types.~ PlutusCore.Evaluation.Machine.ExBudget.ExBudget) => PlutusCore.Evaluation.Machine.CostingFun.Core.OnMemoryUsages PlutusCore.Evaluation.Machine.ExBudget.ExBudget ab


-- | A separate module for JSON instances, so that we can stick
--   <tt>-O0</tt> on it and avoid spending a lot of time optimizing loads
--   of Core whose performance doesn't matter.
module PlutusCore.Evaluation.Machine.CostingFun.JSON
instance Data.Aeson.Types.FromJSON.FromJSON model => Data.Aeson.Types.FromJSON.FromJSON (PlutusCore.Evaluation.Machine.CostingFun.Core.CostingFun model)
instance Data.Aeson.Types.ToJSON.ToJSON model => Data.Aeson.Types.ToJSON.ToJSON (PlutusCore.Evaluation.Machine.CostingFun.Core.CostingFun model)
instance Data.Aeson.Types.FromJSON.FromJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelOneArgument
instance Data.Aeson.Types.ToJSON.ToJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelOneArgument
instance Data.Aeson.Types.FromJSON.FromJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelTwoArguments
instance Data.Aeson.Types.ToJSON.ToJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelTwoArguments
instance Data.Aeson.Types.FromJSON.FromJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelThreeArguments
instance Data.Aeson.Types.ToJSON.ToJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelThreeArguments
instance Data.Aeson.Types.FromJSON.FromJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelFourArguments
instance Data.Aeson.Types.ToJSON.ToJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelFourArguments
instance Data.Aeson.Types.FromJSON.FromJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelFiveArguments
instance Data.Aeson.Types.ToJSON.ToJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelFiveArguments
instance Data.Aeson.Types.FromJSON.FromJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelSixArguments
instance Data.Aeson.Types.ToJSON.ToJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelSixArguments
instance Data.Aeson.Types.FromJSON.FromJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelAddedSizes
instance Data.Aeson.Types.ToJSON.ToJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelAddedSizes
instance Data.Aeson.Types.FromJSON.FromJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelSubtractedSizes
instance Data.Aeson.Types.ToJSON.ToJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelSubtractedSizes
instance Data.Aeson.Types.FromJSON.FromJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelLinearSize
instance Data.Aeson.Types.ToJSON.ToJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelLinearSize
instance Data.Aeson.Types.FromJSON.FromJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMultipliedSizes
instance Data.Aeson.Types.ToJSON.ToJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMultipliedSizes
instance Data.Aeson.Types.FromJSON.FromJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMinSize
instance Data.Aeson.Types.ToJSON.ToJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMinSize
instance Data.Aeson.Types.FromJSON.FromJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMaxSize
instance Data.Aeson.Types.ToJSON.ToJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelMaxSize
instance Data.Aeson.Types.FromJSON.FromJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelConstantOrLinear
instance Data.Aeson.Types.ToJSON.ToJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelConstantOrLinear
instance Data.Aeson.Types.FromJSON.FromJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelConstantOrTwoArguments
instance Data.Aeson.Types.ToJSON.ToJSON PlutusCore.Evaluation.Machine.CostingFun.Core.ModelConstantOrTwoArguments

module PlutusCore.Evaluation.Machine.BuiltinCostModel
type BuiltinCostModel = BuiltinCostModelBase CostingFun

-- | The main model which contains all data required to predict the cost of
--   builtin functions. See <a>md</a> for how this is generated. Calibrated
--   for the CEK machine.
data BuiltinCostModelBase f
BuiltinCostModelBase :: f ModelTwoArguments -> f ModelTwoArguments -> f ModelTwoArguments -> f ModelTwoArguments -> f ModelTwoArguments -> f ModelTwoArguments -> f ModelTwoArguments -> f ModelTwoArguments -> f ModelTwoArguments -> f ModelTwoArguments -> f ModelTwoArguments -> f ModelTwoArguments -> f ModelThreeArguments -> f ModelOneArgument -> f ModelTwoArguments -> f ModelTwoArguments -> f ModelTwoArguments -> f ModelTwoArguments -> f ModelOneArgument -> f ModelOneArgument -> f ModelOneArgument -> f ModelThreeArguments -> f ModelThreeArguments -> f ModelThreeArguments -> f ModelTwoArguments -> f ModelTwoArguments -> f ModelOneArgument -> f ModelOneArgument -> f ModelThreeArguments -> f ModelTwoArguments -> f ModelTwoArguments -> f ModelOneArgument -> f ModelOneArgument -> f ModelThreeArguments -> f ModelTwoArguments -> f ModelOneArgument -> f ModelOneArgument -> f ModelOneArgument -> f ModelSixArguments -> f ModelTwoArguments -> f ModelOneArgument -> f ModelOneArgument -> f ModelOneArgument -> f ModelOneArgument -> f ModelOneArgument -> f ModelOneArgument -> f ModelOneArgument -> f ModelOneArgument -> f ModelOneArgument -> f ModelTwoArguments -> f ModelTwoArguments -> f ModelOneArgument -> f ModelOneArgument -> f ModelOneArgument -> BuiltinCostModelBase f
[paramAddInteger] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramSubtractInteger] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramMultiplyInteger] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramDivideInteger] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramQuotientInteger] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramRemainderInteger] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramModInteger] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramEqualsInteger] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramLessThanInteger] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramLessThanEqualsInteger] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramAppendByteString] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramConsByteString] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramSliceByteString] :: BuiltinCostModelBase f -> f ModelThreeArguments
[paramLengthOfByteString] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramIndexByteString] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramEqualsByteString] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramLessThanByteString] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramLessThanEqualsByteString] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramSha2_256] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramSha3_256] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramBlake2b_256] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramVerifyEd25519Signature] :: BuiltinCostModelBase f -> f ModelThreeArguments
[paramVerifyEcdsaSecp256k1Signature] :: BuiltinCostModelBase f -> f ModelThreeArguments
[paramVerifySchnorrSecp256k1Signature] :: BuiltinCostModelBase f -> f ModelThreeArguments
[paramAppendString] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramEqualsString] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramEncodeUtf8] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramDecodeUtf8] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramIfThenElse] :: BuiltinCostModelBase f -> f ModelThreeArguments
[paramChooseUnit] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramTrace] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramFstPair] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramSndPair] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramChooseList] :: BuiltinCostModelBase f -> f ModelThreeArguments
[paramMkCons] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramHeadList] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramTailList] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramNullList] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramChooseData] :: BuiltinCostModelBase f -> f ModelSixArguments
[paramConstrData] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramMapData] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramListData] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramIData] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramBData] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramUnConstrData] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramUnMapData] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramUnListData] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramUnIData] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramUnBData] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramEqualsData] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramMkPairData] :: BuiltinCostModelBase f -> f ModelTwoArguments
[paramMkNilData] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramMkNilPairData] :: BuiltinCostModelBase f -> f ModelOneArgument
[paramSerialiseData] :: BuiltinCostModelBase f -> f ModelOneArgument
data CostingFun model
CostingFun :: model -> model -> CostingFun model
[costingFunCpu] :: CostingFun model -> model
[costingFunMemory] :: CostingFun model -> model

-- | s * (x + y) + I
data ModelAddedSizes
ModelAddedSizes :: CostingInteger -> CostingInteger -> ModelAddedSizes
[modelAddedSizesIntercept] :: ModelAddedSizes -> CostingInteger
[modelAddedSizesSlope] :: ModelAddedSizes -> CostingInteger

-- | s * (x - y) + I
data ModelSubtractedSizes
ModelSubtractedSizes :: CostingInteger -> CostingInteger -> CostingInteger -> ModelSubtractedSizes
[modelSubtractedSizesIntercept] :: ModelSubtractedSizes -> CostingInteger
[modelSubtractedSizesSlope] :: ModelSubtractedSizes -> CostingInteger
[modelSubtractedSizesMinimum] :: ModelSubtractedSizes -> CostingInteger

-- | if p then s*x else c; p depends on usage
data ModelConstantOrLinear
ModelConstantOrLinear :: CostingInteger -> CostingInteger -> CostingInteger -> ModelConstantOrLinear
[modelConstantOrLinearConstant] :: ModelConstantOrLinear -> CostingInteger
[modelConstantOrLinearIntercept] :: ModelConstantOrLinear -> CostingInteger
[modelConstantOrLinearSlope] :: ModelConstantOrLinear -> CostingInteger

-- | if p then f(x,y) else c; p depends on usage
data ModelConstantOrTwoArguments
ModelConstantOrTwoArguments :: CostingInteger -> ModelTwoArguments -> ModelConstantOrTwoArguments
[modelConstantOrTwoArgumentsConstant] :: ModelConstantOrTwoArguments -> CostingInteger
[modelConstantOrTwoArgumentsModel] :: ModelConstantOrTwoArguments -> ModelTwoArguments
data ModelLinearSize
ModelLinearSize :: CostingInteger -> CostingInteger -> ModelLinearSize
[modelLinearSizeIntercept] :: ModelLinearSize -> CostingInteger
[modelLinearSizeSlope] :: ModelLinearSize -> CostingInteger

-- | s * (x * y) + I
data ModelMultipliedSizes
ModelMultipliedSizes :: CostingInteger -> CostingInteger -> ModelMultipliedSizes
[modelMultipliedSizesIntercept] :: ModelMultipliedSizes -> CostingInteger
[modelMultipliedSizesSlope] :: ModelMultipliedSizes -> CostingInteger

-- | s * min(x, y) + I
data ModelMinSize
ModelMinSize :: CostingInteger -> CostingInteger -> ModelMinSize
[modelMinSizeIntercept] :: ModelMinSize -> CostingInteger
[modelMinSizeSlope] :: ModelMinSize -> CostingInteger

-- | s * max(x, y) + I
data ModelMaxSize
ModelMaxSize :: CostingInteger -> CostingInteger -> ModelMaxSize
[modelMaxSizeIntercept] :: ModelMaxSize -> CostingInteger
[modelMaxSizeSlope] :: ModelMaxSize -> CostingInteger
data ModelOneArgument
ModelOneArgumentConstantCost :: CostingInteger -> ModelOneArgument
ModelOneArgumentLinearCost :: ModelLinearSize -> ModelOneArgument
data ModelTwoArguments
ModelTwoArgumentsConstantCost :: CostingInteger -> ModelTwoArguments
ModelTwoArgumentsLinearInX :: ModelLinearSize -> ModelTwoArguments
ModelTwoArgumentsLinearInY :: ModelLinearSize -> ModelTwoArguments
ModelTwoArgumentsAddedSizes :: ModelAddedSizes -> ModelTwoArguments
ModelTwoArgumentsSubtractedSizes :: ModelSubtractedSizes -> ModelTwoArguments
ModelTwoArgumentsMultipliedSizes :: ModelMultipliedSizes -> ModelTwoArguments
ModelTwoArgumentsMinSize :: ModelMinSize -> ModelTwoArguments
ModelTwoArgumentsMaxSize :: ModelMaxSize -> ModelTwoArguments
ModelTwoArgumentsLinearOnDiagonal :: ModelConstantOrLinear -> ModelTwoArguments
ModelTwoArgumentsConstAboveDiagonal :: ModelConstantOrTwoArguments -> ModelTwoArguments
ModelTwoArgumentsConstBelowDiagonal :: ModelConstantOrTwoArguments -> ModelTwoArguments
data ModelThreeArguments
ModelThreeArgumentsConstantCost :: CostingInteger -> ModelThreeArguments
ModelThreeArgumentsAddedSizes :: ModelAddedSizes -> ModelThreeArguments
ModelThreeArgumentsLinearInX :: ModelLinearSize -> ModelThreeArguments
ModelThreeArgumentsLinearInY :: ModelLinearSize -> ModelThreeArguments
ModelThreeArgumentsLinearInZ :: ModelLinearSize -> ModelThreeArguments
data ModelFourArguments
ModelFourArgumentsConstantCost :: CostingInteger -> ModelFourArguments
data ModelFiveArguments
ModelFiveArgumentsConstantCost :: CostingInteger -> ModelFiveArguments
data ModelSixArguments
ModelSixArgumentsConstantCost :: CostingInteger -> ModelSixArguments
runCostingFunOneArgument :: ExMemoryUsage a1 => CostingFun ModelOneArgument -> a1 -> ExBudget
runCostingFunTwoArguments :: (ExMemoryUsage a1, ExMemoryUsage a2) => CostingFun ModelTwoArguments -> a1 -> a2 -> ExBudget
runCostingFunThreeArguments :: (ExMemoryUsage a1, ExMemoryUsage a2, ExMemoryUsage a3) => CostingFun ModelThreeArguments -> a1 -> a2 -> a3 -> ExBudget
runCostingFunFourArguments :: (ExMemoryUsage a1, ExMemoryUsage a2, ExMemoryUsage a3, ExMemoryUsage a4) => CostingFun ModelFourArguments -> a1 -> a2 -> a3 -> a4 -> ExBudget
runCostingFunFiveArguments :: (ExMemoryUsage a1, ExMemoryUsage a2, ExMemoryUsage a3, ExMemoryUsage a4, ExMemoryUsage a5) => CostingFun ModelFiveArguments -> a1 -> a2 -> a3 -> a4 -> a5 -> ExBudget
runCostingFunSixArguments :: (ExMemoryUsage a1, ExMemoryUsage a2, ExMemoryUsage a3, ExMemoryUsage a4, ExMemoryUsage a5, ExMemoryUsage a6) => CostingFun ModelSixArguments -> a1 -> a2 -> a3 -> a4 -> a5 -> a6 -> ExBudget

-- | The class of types that can be converted to a hash value.
--   
--   Minimal implementation: <a>hashWithSalt</a>.
--   
--   <i>Note:</i> the hash is not guaranteed to be stable across library
--   versions, operating systems or architectures. For stable hashing use
--   named hashes: SHA256, CRC32 etc.
--   
--   If you are looking for <a>Hashable</a> instance in <tt>time</tt>
--   package, check <a>time-compat</a>
class Eq a => Hashable a

-- | Same as <a>CostingFun</a> but maybe missing. We could use 'Compose
--   Maybe CostinFun' instead but we would then need an orphan ToJSON
--   instance.
newtype MCostingFun a
MCostingFun :: Maybe (CostingFun a) -> MCostingFun a
instance Barbies.Internal.ConstraintsB.ConstraintsB PlutusCore.Evaluation.Machine.BuiltinCostModel.BuiltinCostModelBase
instance Barbies.Internal.TraversableB.TraversableB PlutusCore.Evaluation.Machine.BuiltinCostModel.BuiltinCostModelBase
instance Barbies.Internal.FunctorB.FunctorB PlutusCore.Evaluation.Machine.BuiltinCostModel.BuiltinCostModelBase
instance GHC.Generics.Generic (PlutusCore.Evaluation.Machine.BuiltinCostModel.BuiltinCostModelBase f)
instance GHC.Base.Monoid (PlutusCore.Evaluation.Machine.BuiltinCostModel.MCostingFun a)
instance GHC.Base.Semigroup (PlutusCore.Evaluation.Machine.BuiltinCostModel.MCostingFun a)
instance Data.Aeson.Types.ToJSON.ToJSON a => Data.Aeson.Types.ToJSON.ToJSON (PlutusCore.Evaluation.Machine.BuiltinCostModel.MCostingFun a)
instance Data.Aeson.Types.ToJSON.ToJSON (PlutusCore.Evaluation.Machine.BuiltinCostModel.BuiltinCostModelBase PlutusCore.Evaluation.Machine.CostingFun.Core.CostingFun)
instance Data.Aeson.Types.FromJSON.FromJSON (PlutusCore.Evaluation.Machine.BuiltinCostModel.BuiltinCostModelBase PlutusCore.Evaluation.Machine.CostingFun.Core.CostingFun)
instance Data.Aeson.Types.ToJSON.ToJSON (PlutusCore.Evaluation.Machine.BuiltinCostModel.BuiltinCostModelBase PlutusCore.Evaluation.Machine.BuiltinCostModel.MCostingFun)
instance PlutusCore.Evaluation.Machine.BuiltinCostModel.AllArgumentModels Control.DeepSeq.NFData f => Control.DeepSeq.NFData (PlutusCore.Evaluation.Machine.BuiltinCostModel.BuiltinCostModelBase f)
instance PlutusCore.Evaluation.Machine.BuiltinCostModel.AllArgumentModels Data.Default.Class.Default f => Data.Default.Class.Default (PlutusCore.Evaluation.Machine.BuiltinCostModel.BuiltinCostModelBase f)
instance PlutusCore.Evaluation.Machine.BuiltinCostModel.AllArgumentModels Language.Haskell.TH.Syntax.Lift f => Language.Haskell.TH.Syntax.Lift (PlutusCore.Evaluation.Machine.BuiltinCostModel.BuiltinCostModelBase f)
instance PlutusCore.Evaluation.Machine.BuiltinCostModel.AllArgumentModels GHC.Show.Show f => GHC.Show.Show (PlutusCore.Evaluation.Machine.BuiltinCostModel.BuiltinCostModelBase f)
instance PlutusCore.Evaluation.Machine.BuiltinCostModel.AllArgumentModels GHC.Classes.Eq f => GHC.Classes.Eq (PlutusCore.Evaluation.Machine.BuiltinCostModel.BuiltinCostModelBase f)


-- | Support for using de Bruijn indices for term and type names.
module PlutusCore.DeBruijn

-- | A relative index used for de Bruijn identifiers.
newtype Index
Index :: Word64 -> Index
class HasIndex a
index :: HasIndex a => Lens' a Index

-- | A term name as a de Bruijn index, without the name string.
newtype DeBruijn
DeBruijn :: Index -> DeBruijn
[dbnIndex] :: DeBruijn -> Index

-- | A term name as a de Bruijn index.
data NamedDeBruijn
NamedDeBruijn :: !Text -> !Index -> NamedDeBruijn
[ndbnString] :: NamedDeBruijn -> !Text
[ndbnIndex] :: NamedDeBruijn -> !Index

-- | A wrapper around nameddebruijn that must hold the invariant of
--   name=<a>fakeName</a>.
newtype FakeNamedDeBruijn
FakeNamedDeBruijn :: NamedDeBruijn -> FakeNamedDeBruijn

-- | A type name as a de Bruijn index, without the name string.
newtype TyDeBruijn
TyDeBruijn :: DeBruijn -> TyDeBruijn

-- | A type name as a de Bruijn index.
newtype NamedTyDeBruijn
NamedTyDeBruijn :: NamedDeBruijn -> NamedTyDeBruijn

-- | We cannot do a correct translation to or from de Bruijn indices if the
--   program is not well-scoped. So we throw an error in such a case.
data FreeVariableError
FreeUnique :: !Unique -> FreeVariableError
FreeIndex :: !Index -> FreeVariableError
class AsFreeVariableError r_a1hHq
_FreeVariableError :: AsFreeVariableError r_a1hHq => Prism' r_a1hHq FreeVariableError
_FreeUnique :: AsFreeVariableError r_a1hHq => Prism' r_a1hHq Unique
_FreeIndex :: AsFreeVariableError r_a1hHq => Prism' r_a1hHq Index
unNameDeBruijn :: NamedDeBruijn -> DeBruijn
unNameTyDeBruijn :: NamedTyDeBruijn -> TyDeBruijn
fakeNameDeBruijn :: DeBruijn -> NamedDeBruijn

-- | Convert a <a>Kind</a> with <a>TyName</a>s into a <a>Kind</a> with
--   <a>NamedTyDeBruijn</a>s. Will throw an error if a free variable is
--   encountered.
deBruijnTy :: (AsFreeVariableError e, MonadError e m) => Type TyName uni ann -> m (Type NamedTyDeBruijn uni ann)

-- | Convert a <a>Term</a> with <a>TyName</a>s and <a>Name</a>s into a
--   <a>Term</a> with <a>NamedTyDeBruijn</a>s and <a>NamedDeBruijn</a>s.
--   Will throw an error if a free variable is encountered.
deBruijnTerm :: (AsFreeVariableError e, MonadError e m) => Term TyName Name uni fun ann -> m (Term NamedTyDeBruijn NamedDeBruijn uni fun ann)

-- | Convert a <a>Kind</a> with <a>NamedTyDeBruijn</a>s into a <a>Kind</a>
--   with <a>TyName</a>s. Will throw an error if a free variable is
--   encountered.
unDeBruijnTy :: (MonadQuote m, AsFreeVariableError e, MonadError e m) => Type NamedTyDeBruijn uni ann -> m (Type TyName uni ann)

-- | Convert a <a>Term</a> with <a>NamedTyDeBruijn</a>s and
--   <a>NamedDeBruijn</a>s into a <a>Term</a> with <a>TyName</a>s and
--   <a>Name</a>s. Will throw an error if a free variable is encountered.
unDeBruijnTerm :: (MonadQuote m, AsFreeVariableError e, MonadError e m) => Term NamedTyDeBruijn NamedDeBruijn uni fun ann -> m (Term TyName Name uni fun ann)
deBruijnTyWith :: Monad m => (Unique -> ReaderT Levels m Index) -> Type TyName uni ann -> m (Type NamedTyDeBruijn uni ann)
deBruijnTermWith :: Monad m => (Unique -> ReaderT Levels m Index) -> Term TyName Name uni fun ann -> m (Term NamedTyDeBruijn NamedDeBruijn uni fun ann)

-- | Takes a "handler" function to execute when encountering free
--   variables.
unDeBruijnTyWith :: MonadQuote m => (Index -> ReaderT Levels m Unique) -> Type NamedTyDeBruijn uni ann -> m (Type TyName uni ann)

-- | Takes a "handler" function to execute when encountering free
--   variables.
unDeBruijnTermWith :: MonadQuote m => (Index -> ReaderT Levels m Unique) -> Term NamedTyDeBruijn NamedDeBruijn uni fun ann -> m (Term TyName Name uni fun ann)

-- | A different implementation of a handler, where "free" debruijn indices
--   do not throw an error but are instead gracefully converted to fresh
--   uniques. These generated uniques remain free; i.e. if the original
--   term was open, it will remain open after applying this handler. These
--   generated free uniques are consistent across the open term (by using a
--   state cache).
freeIndexAsConsistentLevel :: (MonadReader Levels m, MonadState (Map Level Unique) m, MonadQuote m) => Index -> m Unique

-- | The LamAbs index (for debruijn indices) and the starting level of
--   DeBruijn monad
deBruijnInitIndex :: Index
fromFake :: FakeNamedDeBruijn -> DeBruijn
toFake :: DeBruijn -> FakeNamedDeBruijn

module PlutusCore.Core
data Kind ann
Type :: ann -> Kind ann
KindArrow :: ann -> Kind ann -> Kind ann -> Kind ann

-- | The kind of a pattern functor (the first <a>Kind</a> argument of
--   <a>TyIFix</a>) at a given kind (of the second <a>Kind</a> argument of
--   <a>TyIFix</a>):
--   
--   <pre>
--   toPatFuncKind k = (k -&gt; *) -&gt; k -&gt; *
--   </pre>
toPatFuncKind :: Kind () -> Kind ()
fromPatFuncKind :: Kind () -> Maybe (Kind ())

-- | Extract all <tt>a_i</tt> from <tt>a_0 -&gt; a_1 -&gt; ... -&gt;
--   r</tt>.
argsFunKind :: Kind ann -> [Kind ann]

-- | A <a>Kind</a> assigned to expressions.
data Type tyname uni ann
TyVar :: ann -> tyname -> Type tyname uni ann
TyFun :: ann -> Type tyname uni ann -> Type tyname uni ann -> Type tyname uni ann

-- | Fix-point type, for constructing self-recursive types
TyIFix :: ann -> Type tyname uni ann -> Type tyname uni ann -> Type tyname uni ann
TyForall :: ann -> tyname -> Kind ann -> Type tyname uni ann -> Type tyname uni ann

-- | Builtin type
TyBuiltin :: ann -> SomeTypeIn uni -> Type tyname uni ann
TyLam :: ann -> tyname -> Kind ann -> Type tyname uni ann -> Type tyname uni ann
TyApp :: ann -> Type tyname uni ann -> Type tyname uni ann -> Type tyname uni ann
data Term tyname name uni fun ann

-- | a named variable
Var :: ann -> name -> Term tyname name uni fun ann
TyAbs :: ann -> tyname -> Kind ann -> Term tyname name uni fun ann -> Term tyname name uni fun ann
LamAbs :: ann -> name -> Type tyname uni ann -> Term tyname name uni fun ann -> Term tyname name uni fun ann
Apply :: ann -> Term tyname name uni fun ann -> Term tyname name uni fun ann -> Term tyname name uni fun ann

-- | a constant term
Constant :: ann -> Some (ValueOf uni) -> Term tyname name uni fun ann
Builtin :: ann -> fun -> Term tyname name uni fun ann
TyInst :: ann -> Term tyname name uni fun ann -> Type tyname uni ann -> Term tyname name uni fun ann
Unwrap :: ann -> Term tyname name uni fun ann -> Term tyname name uni fun ann
IWrap :: ann -> Type tyname uni ann -> Type tyname uni ann -> Term tyname name uni fun ann -> Term tyname name uni fun ann
Error :: ann -> Type tyname uni ann -> Term tyname name uni fun ann

-- | A <a>Program</a> is simply a <a>Term</a> coupled with a <a>Version</a>
--   of the core language.
data Program tyname name uni fun ann
Program :: ann -> Version -> Term tyname name uni fun ann -> Program tyname name uni fun ann
[_progAnn] :: Program tyname name uni fun ann -> ann
[_progVer] :: Program tyname name uni fun ann -> Version
[_progTerm] :: Program tyname name uni fun ann -> Term tyname name uni fun ann

-- | Extract the universe from a type.
type family UniOf a :: Type -> Type
newtype Normalized a
Normalized :: a -> Normalized a
[unNormalized] :: Normalized a -> a

-- | A "type variable declaration", i.e. a name and a kind for a type
--   variable.
data TyVarDecl tyname ann
TyVarDecl :: ann -> tyname -> Kind ann -> TyVarDecl tyname ann
[_tyVarDeclAnn] :: TyVarDecl tyname ann -> ann
[_tyVarDeclName] :: TyVarDecl tyname ann -> tyname
[_tyVarDeclKind] :: TyVarDecl tyname ann -> Kind ann

-- | A "variable declaration", i.e. a name and a type for a variable.
data VarDecl tyname name uni ann
VarDecl :: ann -> name -> Type tyname uni ann -> VarDecl tyname name uni ann
[_varDeclAnn] :: VarDecl tyname name uni ann -> ann
[_varDeclName] :: VarDecl tyname name uni ann -> name
[_varDeclType] :: VarDecl tyname name uni ann -> Type tyname uni ann

-- | A "type declaration", i.e. a kind for a type.
data TyDecl tyname uni ann
TyDecl :: ann -> Type tyname uni ann -> Kind ann -> TyDecl tyname uni ann
[_tyDeclAnn] :: TyDecl tyname uni ann -> ann
[_tyDeclType] :: TyDecl tyname uni ann -> Type tyname uni ann
[_tyDeclKind] :: TyDecl tyname uni ann -> Kind ann
tyDeclVar :: TyVarDecl tyname ann -> TyDecl tyname uni ann

-- | All kinds of uniques an entity contains.
type family HasUniques a :: Constraint

-- | This is a wrapper to mark the place where the binder is introduced
--   (i.e. LamAbs/TyAbs) and not where it is actually used (TyVar/Var..).
--   This marking allows us to skip the (de)serialization of binders at
--   LamAbs/TyAbs positions iff <tt>name</tt> is DeBruijn-encoded (level or
--   index). See for example the instance of <a>Flat</a>
newtype Binder name
Binder :: name -> Binder name
[unBinder] :: Binder name -> name
termAnn :: Term tyname name uni fun ann -> ann
typeAnn :: Type tyname uni ann -> ann

-- | Map a function over the set of built-in functions.
mapFun :: (fun -> fun') -> Term tyname name uni fun ann -> Term tyname name uni fun' ann
tyVarDeclAnn :: forall tyname_a4xnB ann_a4xnC. Lens' (TyVarDecl tyname_a4xnB ann_a4xnC) ann_a4xnC
tyVarDeclName :: forall tyname_a4xnB ann_a4xnC tyname_a4xxb. Lens (TyVarDecl tyname_a4xnB ann_a4xnC) (TyVarDecl tyname_a4xxb ann_a4xnC) tyname_a4xnB tyname_a4xxb
tyVarDeclKind :: forall tyname_a4xnB ann_a4xnC. Lens' (TyVarDecl tyname_a4xnB ann_a4xnC) (Kind ann_a4xnC)
varDeclAnn :: forall tyname_a4xxz name_a4xxA uni_a4xxB ann_a4xxC. Lens' (VarDecl tyname_a4xxz name_a4xxA uni_a4xxB ann_a4xxC) ann_a4xxC
varDeclName :: forall tyname_a4xxz name_a4xxA uni_a4xxB ann_a4xxC name_a4xH0. Lens (VarDecl tyname_a4xxz name_a4xxA uni_a4xxB ann_a4xxC) (VarDecl tyname_a4xxz name_a4xH0 uni_a4xxB ann_a4xxC) name_a4xxA name_a4xH0
varDeclType :: forall tyname_a4xxz name_a4xxA uni_a4xxB ann_a4xxC tyname_a4xH1 uni_a4xH2. Lens (VarDecl tyname_a4xxz name_a4xxA uni_a4xxB ann_a4xxC) (VarDecl tyname_a4xH1 name_a4xxA uni_a4xH2 ann_a4xxC) (Type tyname_a4xxz uni_a4xxB ann_a4xxC) (Type tyname_a4xH1 uni_a4xH2 ann_a4xxC)
tyDeclAnn :: forall tyname_a4xHq uni_a4xHr ann_a4xHs. Lens' (TyDecl tyname_a4xHq uni_a4xHr ann_a4xHs) ann_a4xHs
tyDeclType :: forall tyname_a4xHq uni_a4xHr ann_a4xHs tyname_a4xR8 uni_a4xR9. Lens (TyDecl tyname_a4xHq uni_a4xHr ann_a4xHs) (TyDecl tyname_a4xR8 uni_a4xR9 ann_a4xHs) (Type tyname_a4xHq uni_a4xHr ann_a4xHs) (Type tyname_a4xR8 uni_a4xR9 ann_a4xHs)
tyDeclKind :: forall tyname_a4xHq uni_a4xHr ann_a4xHs. Lens' (TyDecl tyname_a4xHq uni_a4xHr ann_a4xHs) (Kind ann_a4xHs)
progAnn :: forall tyname_a4vlK name_a4vlL uni_a4vlM fun_a4vlN ann_a4vlO. Lens' (Program tyname_a4vlK name_a4vlL uni_a4vlM fun_a4vlN ann_a4vlO) ann_a4vlO
progVer :: forall tyname_a4vlK name_a4vlL uni_a4vlM fun_a4vlN ann_a4vlO. Lens' (Program tyname_a4vlK name_a4vlL uni_a4vlM fun_a4vlN ann_a4vlO) Version
progTerm :: forall tyname_a4vlK name_a4vlL uni_a4vlM fun_a4vlN ann_a4vlO tyname_a4xn9 name_a4xna uni_a4xnb fun_a4xnc. Lens (Program tyname_a4vlK name_a4vlL uni_a4vlM fun_a4vlN ann_a4vlO) (Program tyname_a4xn9 name_a4xna uni_a4xnb fun_a4xnc ann_a4vlO) (Term tyname_a4vlK name_a4vlL uni_a4vlM fun_a4vlN ann_a4vlO) (Term tyname_a4xn9 name_a4xna uni_a4xnb fun_a4xnc ann_a4vlO)
kindSubkinds :: Traversal' (Kind ann) (Kind ann)
kindSubkindsDeep :: Fold (Kind ann) (Kind ann)

-- | Get all the direct child <a>Kind</a>s of the given <a>TyVarDecl</a>.
tyVarDeclSubkinds :: Traversal' (TyVarDecl tyname a) (Kind a)

-- | Get all the direct child 'tyname a's of the given <a>Kind</a> from
--   binders.
typeTyBinds :: Traversal' (Type tyname uni ann) tyname

-- | Get all the direct child 'tyname a's of the given <a>Kind</a> from
--   <a>TyVar</a>s.
typeTyVars :: Traversal' (Type tyname uni ann) tyname

-- | Get all the direct child <a>Unique</a>s of the given <a>Kind</a> from
--   binders <a>TyVar</a>s.
typeUniques :: HasUniques (Type tyname uni ann) => Traversal' (Type tyname uni ann) Unique

-- | Get all the direct child <a>Kind</a>s of the given <a>Kind</a>.
typeSubkinds :: Traversal' (Type tyname uni ann) (Kind ann)

-- | Get all the direct child <a>Kind</a>s of the given <a>Kind</a>.
typeSubtypes :: Traversal' (Type tyname uni ann) (Type tyname uni ann)

-- | Get all the transitive child <a>Kind</a>s of the given <a>Kind</a>.
typeSubtypesDeep :: Fold (Type tyname uni ann) (Type tyname uni ann)

-- | Get all the direct child <a>Kind</a>s of the given <a>VarDecl</a>.
varDeclSubtypes :: Traversal' (VarDecl tyname name uni a) (Type tyname uni a)

-- | Get all the direct child 'tyname a's of the given <a>Term</a> from
--   <a>TyAbs</a>es.
termTyBinds :: Traversal' (Term tyname name uni fun ann) tyname

-- | Get all the direct child 'name a's of the given <a>Term</a> from
--   <a>LamAbs</a>es.
termBinds :: Traversal' (Term tyname name uni fun ann) name

-- | Get all the direct child 'name a's of the given <a>Term</a> from
--   <a>Var</a>s.
termVars :: Traversal' (Term tyname name uni fun ann) name

-- | Get all the direct child <a>Unique</a>s of the given <a>Term</a>
--   (including the type-level ones).
termUniques :: HasUniques (Term tyname name uni fun ann) => Traversal' (Term tyname name uni fun ann) Unique

-- | Get all the direct child <a>Kind</a>s of the given <a>Term</a>.
termSubkinds :: Traversal' (Term tyname name uni fun ann) (Kind ann)

-- | Get all the direct child <a>Kind</a>s of the given <a>Term</a>.
termSubtypes :: Traversal' (Term tyname name uni fun ann) (Type tyname uni ann)

-- | Get all the transitive child <a>Kind</a>s of the given <a>Term</a>.
termSubtypesDeep :: Fold (Term tyname name uni fun ann) (Type tyname uni ann)

-- | Get all the direct child <a>Term</a>s of the given <a>Term</a>.
termSubterms :: Traversal' (Term tyname name uni fun ann) (Term tyname name uni fun ann)

-- | Get all the transitive child <a>Term</a>s of the given <a>Term</a>.
termSubtermsDeep :: Fold (Term tyname name uni fun ann) (Term tyname name uni fun ann)

-- | Get all the transitive child <a>Unique</a>s of the given <a>Kind</a>.
typeUniquesDeep :: HasUniques (Type tyname uni ann) => Fold (Type tyname uni ann) Unique

-- | Get all the transitive child <a>Unique</a>s of the given <a>Term</a>
--   (including the type-level ones).
termUniquesDeep :: HasUniques (Term tyname name uni fun ann) => Fold (Term tyname name uni fun ann) Unique
data TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
VarF :: ann_i4GRs -> name_i4GRp -> TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
TyAbsF :: ann_i4GRs -> tyname_i4GRo -> Kind ann_i4GRs -> r_a4Mq8 -> TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
LamAbsF :: ann_i4GRs -> name_i4GRp -> Type tyname_i4GRo uni_i4GRq ann_i4GRs -> r_a4Mq8 -> TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
ApplyF :: ann_i4GRs -> r_a4Mq8 -> r_a4Mq8 -> TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
ConstantF :: ann_i4GRs -> Some (ValueOf uni_i4GRq) -> TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
BuiltinF :: ann_i4GRs -> fun_i4GRr -> TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
TyInstF :: ann_i4GRs -> r_a4Mq8 -> Type tyname_i4GRo uni_i4GRq ann_i4GRs -> TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
UnwrapF :: ann_i4GRs -> r_a4Mq8 -> TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
IWrapF :: ann_i4GRs -> Type tyname_i4GRo uni_i4GRq ann_i4GRs -> Type tyname_i4GRo uni_i4GRq ann_i4GRs -> r_a4Mq8 -> TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
ErrorF :: ann_i4GRs -> Type tyname_i4GRo uni_i4GRq ann_i4GRs -> TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
data TypeF (tyname_i4GS3 :: Type) (uni_i4GS4 :: Type -> Type) (ann_i4GS5 :: Type) r_a4MlQ
TyVarF :: ann_i4GS5 -> tyname_i4GS3 -> TypeF (tyname_i4GS3 :: Type) (uni_i4GS4 :: Type -> Type) (ann_i4GS5 :: Type) r_a4MlQ
TyFunF :: ann_i4GS5 -> r_a4MlQ -> r_a4MlQ -> TypeF (tyname_i4GS3 :: Type) (uni_i4GS4 :: Type -> Type) (ann_i4GS5 :: Type) r_a4MlQ
TyIFixF :: ann_i4GS5 -> r_a4MlQ -> r_a4MlQ -> TypeF (tyname_i4GS3 :: Type) (uni_i4GS4 :: Type -> Type) (ann_i4GS5 :: Type) r_a4MlQ
TyForallF :: ann_i4GS5 -> tyname_i4GS3 -> Kind ann_i4GS5 -> r_a4MlQ -> TypeF (tyname_i4GS3 :: Type) (uni_i4GS4 :: Type -> Type) (ann_i4GS5 :: Type) r_a4MlQ
TyBuiltinF :: ann_i4GS5 -> SomeTypeIn uni_i4GS4 -> TypeF (tyname_i4GS3 :: Type) (uni_i4GS4 :: Type -> Type) (ann_i4GS5 :: Type) r_a4MlQ
TyLamF :: ann_i4GS5 -> tyname_i4GS3 -> Kind ann_i4GS5 -> r_a4MlQ -> TypeF (tyname_i4GS3 :: Type) (uni_i4GS4 :: Type -> Type) (ann_i4GS5 :: Type) r_a4MlQ
TyAppF :: ann_i4GS5 -> r_a4MlQ -> r_a4MlQ -> TypeF (tyname_i4GS3 :: Type) (uni_i4GS4 :: Type -> Type) (ann_i4GS5 :: Type) r_a4MlQ
data KindF (ann_i4GYU :: Type) r_a4Mli
TypeF :: ann_i4GYU -> KindF (ann_i4GYU :: Type) r_a4Mli
KindArrowF :: ann_i4GYU -> r_a4Mli -> r_a4Mli -> KindF (ann_i4GYU :: Type) r_a4Mli

module PlutusCore.Subst

-- | Applicatively replace a type variable using the given function.
substTyVarA :: Applicative f => (tyname -> f (Maybe (Type tyname uni ann))) -> Type tyname uni ann -> f (Type tyname uni ann)

-- | Applicatively replace a variable using the given function.
substVarA :: Applicative f => (name -> f (Maybe (Term tyname name uni fun ann))) -> Term tyname name uni fun ann -> f (Term tyname name uni fun ann)

-- | Replace a type variable using the given function.
substTyVar :: (tyname -> Maybe (Type tyname uni ann)) -> Type tyname uni ann -> Type tyname uni ann

-- | Replace a variable using the given function.
substVar :: (name -> Maybe (Term tyname name uni fun ann)) -> Term tyname name uni fun ann -> Term tyname name uni fun ann

-- | Naively monadically substitute names using the given function (i.e. do
--   not substitute binders).
termSubstNamesM :: Monad m => (name -> m (Maybe (Term tyname name uni fun ann))) -> Term tyname name uni fun ann -> m (Term tyname name uni fun ann)

-- | Naively monadically substitute type names using the given function
--   (i.e. do not substitute binders).
termSubstTyNamesM :: Monad m => (tyname -> m (Maybe (Type tyname uni ann))) -> Term tyname name uni fun ann -> m (Term tyname name uni fun ann)

-- | Naively monadically substitute type names (i.e. do not substitute
--   binders). INLINE is important here because the function is too
--   polymorphic (determined from profiling)
typeSubstTyNamesM :: Monad m => (tyname -> m (Maybe (Type tyname uni ann))) -> Type tyname uni ann -> m (Type tyname uni ann)

-- | Naively substitute names using the given function (i.e. do not
--   substitute binders).
termSubstNames :: (name -> Maybe (Term tyname name uni fun ann)) -> Term tyname name uni fun ann -> Term tyname name uni fun ann

-- | Naively substitute type names using the given function (i.e. do not
--   substitute binders).
termSubstTyNames :: (tyname -> Maybe (Type tyname uni ann)) -> Term tyname name uni fun ann -> Term tyname name uni fun ann

-- | Naively substitute type names (i.e. do not substitute binders).
typeSubstTyNames :: (tyname -> Maybe (Type tyname uni ann)) -> Type tyname uni ann -> Type tyname uni ann

-- | Substitute the given closed <a>Kind</a> for the given type variable in
--   the given <a>Kind</a>. Does not descend under binders that bind the
--   same variable as the one we're substituting for (since from there that
--   variable is no longer free). The resulting <a>Term</a> may and likely
--   will not satisfy global uniqueness.
typeSubstClosedType :: Eq tyname => tyname -> Type tyname uni a -> Type tyname uni a -> Type tyname uni a

-- | Substitute the given closed <a>Kind</a> for the given type variable in
--   the given <a>Term</a>. Does not descend under binders that bind the
--   same variable as the one we're substituting for (since from there that
--   variable is no longer free). The resulting <a>Term</a> may and likely
--   will not satisfy global uniqueness.
termSubstClosedType :: Eq tyname => tyname -> Type tyname uni a -> Term tyname name uni fun a -> Term tyname name uni fun a

-- | Substitute the given closed <a>Term</a> for the given term variable in
--   the given <a>Term</a>. Does not descend under binders that bind the
--   same variable as the one we're substituting for (since from there that
--   variable is no longer free). The resulting <a>Term</a> may and likely
--   will not satisfy global uniqueness.
termSubstClosedTerm :: Eq name => name -> Term tyname name uni fun a -> Term tyname name uni fun a -> Term tyname name uni fun a

-- | Get all the free term variables in a term.
fvTerm :: Ord name => Traversal' (Term tyname name uni fun ann) name

-- | Get all the free type variables in a term.
ftvTerm :: Ord tyname => Traversal' (Term tyname name uni fun ann) tyname

-- | Get all the free type variables in a type.
ftvTy :: Ord tyname => Traversal' (Type tyname uni ann) tyname
ftvTyCtx :: Ord tyname => Set tyname -> Traversal' (Type tyname uni ann) tyname

-- | Get all the term variables in a term.
vTerm :: Fold (Term tyname name uni fun ann) name

-- | Get all the type variables in a term.
tvTerm :: Fold (Term tyname name uni fun ann) tyname

-- | Get all the type variables in a type.
tvTy :: Fold (Type tyname uni ann) tyname

module PlutusCore.Size
newtype Size
Size :: Integer -> Size
[unSize] :: Size -> Integer

-- | Count the number of AST nodes in a kind.
--   
--   <pre>
--   &gt;&gt;&gt; kindSize $ Type ()
--   Size {unSize = 1}
--   
--   &gt;&gt;&gt; kindSize $ KindArrow () (KindArrow () (Type ()) (Type ())) (Type ())
--   Size {unSize = 5}
--   </pre>
kindSize :: Kind a -> Size

-- | Count the number of AST nodes in a type.
typeSize :: Type tyname uni ann -> Size
tyVarDeclSize :: TyVarDecl tyname ann -> Size

-- | Count the number of AST nodes in a term.
termSize :: Term tyname name uni fun ann -> Size
varDeclSize :: VarDecl tyname name uni ann -> Size

-- | Count the number of AST nodes in a program.
programSize :: Program tyname name uni fun ann -> Size

-- | Compute the size of the serializabled form of a value.
serialisedSize :: Flat a => a -> Integer
instance GHC.Base.Monoid PlutusCore.Size.Size
instance GHC.Base.Semigroup PlutusCore.Size.Size
instance GHC.Num.Num PlutusCore.Size.Size
instance GHC.Classes.Ord PlutusCore.Size.Size
instance GHC.Classes.Eq PlutusCore.Size.Size
instance Prettyprinter.Internal.Pretty PlutusCore.Size.Size
instance GHC.Show.Show PlutusCore.Size.Size


-- | The internal module of the renamer that defines the actual algorithms,
--   but not the user-facing API.
module PlutusCore.Rename.Internal

-- | A wrapper for signifying that the value inside of it satisfies global
--   uniqueness.
--   
--   It's safe to call <a>unRenamed</a>, it's not safe to call
--   <a>Renamed</a>, hence the latter is only exported from this internal
--   module and should not be exported from the main API.
--   
--   Don't provide any instances allowing the user to create a
--   <a>Renamed</a> (even out of an existing one like with <a>Functor</a>).
newtype Renamed a
Renamed :: a -> Renamed a
[unRenamed] :: Renamed a -> a

-- | <tt>Dupable a</tt> is isomorphic to <tt>a</tt>, but the only way to
--   extract the <tt>a</tt> is via <tt>liftDupable</tt> (defined in the
--   main API module because of a constraint requirement) which renames the
--   stored value along the way. This type is used whenever
--   
--   <ol>
--   <li>preserving global uniqueness is required</li>
--   <li>some value may be used multiple times</li>
--   </ol>
--   
--   so we annotate such a value with <a>Dupable</a> and call
--   <tt>liftDupable</tt> at each usage, which ensures global uniqueness is
--   preserved.
--   
--   <a>unDupable</a> is not supposed to be exported. Don't provide any
--   instances allowing the user to access the underlying value.
newtype Dupable a
Dupable :: a -> Dupable a
[unDupable] :: Dupable a -> a

-- | Replace the unique in the name stored in a <a>TyVarDecl</a> by a new
--   unique, save the mapping from the old unique to the new one and supply
--   the updated <a>TyVarDecl</a> to a continuation.
withFreshenedTyVarDecl :: (HasRenaming ren TypeUnique, HasUniques (Type tyname uni ann), MonadQuote m, MonadReader ren m) => TyVarDecl tyname ann -> (TyVarDecl tyname ann -> m c) -> m c

-- | Replace the unique in the name stored in a <a>VarDecl</a> by a new
--   unique, save the mapping from the old unique to the new one and supply
--   to a continuation the computation that renames the type stored in the
--   updated <a>VarDecl</a>. The reason the continuation receives a
--   computation rather than a pure term is that we may want to bring
--   several term and type variables in scope before renaming the types of
--   term variables. This situation arises when we want to rename a bunch
--   of mutually recursive bindings.
withFreshenedVarDecl :: (HasUniques (Term tyname name uni fun ann), MonadQuote m, MonadReader ScopedRenaming m) => VarDecl tyname name uni ann -> (m (VarDecl tyname name uni ann) -> m c) -> m c

-- | Rename a <a>Kind</a> in the <tt>RenameM</tt> monad.
renameTypeM :: (HasRenaming ren TypeUnique, HasUniques (Type tyname uni ann), MonadQuote m, MonadReader ren m) => Type tyname uni ann -> m (Type tyname uni ann)

-- | Rename a <a>Term</a> in the <tt>RenameM</tt> monad.
renameTermM :: (HasUniques (Term tyname name uni fun ann), MonadQuote m, MonadReader ScopedRenaming m) => Term tyname name uni fun ann -> m (Term tyname name uni fun ann)

-- | Rename a <a>Program</a> in the <tt>RenameM</tt> monad.
renameProgramM :: (HasUniques (Program tyname name uni fun ann), MonadQuote m, MonadReader ScopedRenaming m) => Program tyname name uni fun ann -> m (Program tyname name uni fun ann)
instance GHC.Classes.Eq a => GHC.Classes.Eq (PlutusCore.Rename.Internal.Renamed a)
instance GHC.Show.Show a => GHC.Show.Show (PlutusCore.Rename.Internal.Renamed a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (PlutusCore.Rename.Internal.Dupable a)
instance GHC.Show.Show a => GHC.Show.Show (PlutusCore.Rename.Internal.Dupable a)

module PlutusCore.MkPlc

-- | A final encoding for Term, to allow PLC terms to be used transparently
--   as PIR terms.
class TermLike term tyname name uni fun | term -> tyname name uni fun
var :: TermLike term tyname name uni fun => ann -> name -> term ann
tyAbs :: TermLike term tyname name uni fun => ann -> tyname -> Kind ann -> term ann -> term ann
lamAbs :: TermLike term tyname name uni fun => ann -> name -> Type tyname uni ann -> term ann -> term ann
apply :: TermLike term tyname name uni fun => ann -> term ann -> term ann -> term ann
constant :: TermLike term tyname name uni fun => ann -> Some (ValueOf uni) -> term ann
builtin :: TermLike term tyname name uni fun => ann -> fun -> term ann
tyInst :: TermLike term tyname name uni fun => ann -> term ann -> Type tyname uni ann -> term ann
unwrap :: TermLike term tyname name uni fun => ann -> term ann -> term ann
iWrap :: TermLike term tyname name uni fun => ann -> Type tyname uni ann -> Type tyname uni ann -> term ann -> term ann
error :: TermLike term tyname name uni fun => ann -> Type tyname uni ann -> term ann
termLet :: TermLike term tyname name uni fun => ann -> TermDef term tyname name uni ann -> term ann -> term ann
typeLet :: TermLike term tyname name uni fun => ann -> TypeDef tyname uni ann -> term ann -> term ann

-- | Extract the universe from a type.
type family UniOf a :: Type -> Type

-- | Embed a type (given its explicit type tag) into a PLC type.
mkTyBuiltinOf :: forall k (a :: k) uni tyname ann. ann -> uni (Esc a) -> Type tyname uni ann

-- | Embed a type (provided it's in the universe) into a PLC type.
mkTyBuiltin :: forall k (a :: k) uni tyname ann. uni `Contains` a => ann -> Type tyname uni ann

-- | Embed a Haskell value (given its explicit type tag) into a PLC term.
mkConstantOf :: forall a uni fun term tyname name ann. TermLike term tyname name uni fun => ann -> uni (Esc a) -> a -> term ann

-- | Embed a Haskell value (provided its type is in the universe) into a
--   PLC term.
mkConstant :: forall a uni fun term tyname name ann. (TermLike term tyname name uni fun, uni `Includes` a) => ann -> a -> term ann

-- | A "variable declaration", i.e. a name and a type for a variable.
data VarDecl tyname name uni ann
VarDecl :: ann -> name -> Type tyname uni ann -> VarDecl tyname name uni ann
[_varDeclAnn] :: VarDecl tyname name uni ann -> ann
[_varDeclName] :: VarDecl tyname name uni ann -> name
[_varDeclType] :: VarDecl tyname name uni ann -> Type tyname uni ann

-- | A "type variable declaration", i.e. a name and a kind for a type
--   variable.
data TyVarDecl tyname ann
TyVarDecl :: ann -> tyname -> Kind ann -> TyVarDecl tyname ann
[_tyVarDeclAnn] :: TyVarDecl tyname ann -> ann
[_tyVarDeclName] :: TyVarDecl tyname ann -> tyname
[_tyVarDeclKind] :: TyVarDecl tyname ann -> Kind ann

-- | A "type declaration", i.e. a kind for a type.
data TyDecl tyname uni ann
TyDecl :: ann -> Type tyname uni ann -> Kind ann -> TyDecl tyname uni ann
[_tyDeclAnn] :: TyDecl tyname uni ann -> ann
[_tyDeclType] :: TyDecl tyname uni ann -> Type tyname uni ann
[_tyDeclKind] :: TyDecl tyname uni ann -> Kind ann

-- | Make a <a>Var</a> referencing the given <a>VarDecl</a>.
mkVar :: TermLike term tyname name uni fun => ann -> VarDecl tyname name uni ann -> term ann

-- | Make a <a>TyVar</a> referencing the given <a>TyVarDecl</a>.
mkTyVar :: ann -> TyVarDecl tyname ann -> Type tyname uni ann
tyDeclVar :: TyVarDecl tyname ann -> TyDecl tyname uni ann

-- | A definition. Pretty much just a pair with more descriptive names.
data Def var val
Def :: var -> val -> Def var val
[defVar] :: Def var val -> var
[defVal] :: Def var val -> val
embed :: TermLike term tyname name uni fun => Term tyname name uni fun ann -> term ann

-- | A term definition as a variable.
type TermDef term tyname name uni ann = Def (VarDecl tyname name uni ann) (term ann)

-- | A type definition as a type variable.
type TypeDef tyname uni ann = Def (TyVarDecl tyname ann) (Type tyname uni ann)

-- | The type of a PLC function.
data FunctionType tyname uni ann
FunctionType :: ann -> Type tyname uni ann -> Type tyname uni ann -> FunctionType tyname uni ann

-- | An annotation.
[_functionTypeAnn] :: FunctionType tyname uni ann -> ann

-- | The domain of a function.
[_functionTypeDom] :: FunctionType tyname uni ann -> Type tyname uni ann

-- | The codomain of the function.
[_functionTypeCod] :: FunctionType tyname uni ann -> Type tyname uni ann

-- | A PLC function.
data FunctionDef term tyname name uni fun ann
FunctionDef :: ann -> name -> FunctionType tyname uni ann -> term ann -> FunctionDef term tyname name uni fun ann

-- | An annotation.
[_functionDefAnn] :: FunctionDef term tyname name uni fun ann -> ann

-- | The name of a function.
[_functionDefName] :: FunctionDef term tyname name uni fun ann -> name

-- | The type of the function.
[_functionDefType] :: FunctionDef term tyname name uni fun ann -> FunctionType tyname uni ann

-- | The definition of the function.
[_functionDefTerm] :: FunctionDef term tyname name uni fun ann -> term ann

-- | Convert a <a>FunctionType</a> to the corresponding <a>Kind</a>.
functionTypeToType :: FunctionType tyname uni ann -> Type tyname uni ann

-- | Get the type of a <a>FunctionDef</a>.
functionDefToType :: FunctionDef term tyname name uni fun ann -> Type tyname uni ann

-- | Convert a <a>FunctionDef</a> to a <a>VarDecl</a>. I.e. ignore the
--   actual term.
functionDefVarDecl :: FunctionDef term tyname name uni fun ann -> VarDecl tyname name uni ann

-- | Make a <a>FunctionDef</a>. Return <a>Nothing</a> if the provided type
--   is not functional.
mkFunctionDef :: ann -> name -> Type tyname uni ann -> term ann -> Maybe (FunctionDef term tyname name uni fun ann)

-- | Make a "let-binding" for a term as an immediately applied lambda
--   abstraction.
mkImmediateLamAbs :: TermLike term tyname name uni fun => ann -> TermDef term tyname name uni ann -> term ann -> term ann

-- | Make a "let-binding" for a type as an immediately instantiated type
--   abstraction. Note: the body must be a value.
mkImmediateTyAbs :: TermLike term tyname name uni fun => ann -> TypeDef tyname uni ann -> term ann -> term ann

-- | Universally quantify a list of names.
mkIterTyForall :: [TyVarDecl tyname ann] -> Type tyname uni ann -> Type tyname uni ann

-- | Lambda abstract a list of names.
mkIterTyLam :: [TyVarDecl tyname ann] -> Type tyname uni ann -> Type tyname uni ann

-- | Make an iterated application.
mkIterApp :: TermLike term tyname name uni fun => ann -> term ann -> [term ann] -> term ann

-- | Make an iterated function type.
mkIterTyFun :: ann -> [Type tyname uni ann] -> Type tyname uni ann -> Type tyname uni ann

-- | Lambda abstract a list of names.
mkIterLamAbs :: TermLike term tyname name uni fun => [VarDecl tyname name uni ann] -> term ann -> term ann

-- | Make an iterated instantiation.
mkIterInst :: TermLike term tyname name uni fun => ann -> term ann -> [Type tyname uni ann] -> term ann

-- | Type abstract a list of names.
mkIterTyAbs :: TermLike term tyname name uni fun => [TyVarDecl tyname ann] -> term ann -> term ann

-- | Make an iterated type application.
mkIterTyApp :: ann -> Type tyname uni ann -> [Type tyname uni ann] -> Type tyname uni ann

-- | Make an iterated function kind.
mkIterKindArrow :: ann -> [Kind ann] -> Kind ann -> Kind ann
instance GHC.Generics.Generic (PlutusCore.MkPlc.Def var val)
instance (GHC.Classes.Ord var, GHC.Classes.Ord val) => GHC.Classes.Ord (PlutusCore.MkPlc.Def var val)
instance (GHC.Classes.Eq var, GHC.Classes.Eq val) => GHC.Classes.Eq (PlutusCore.MkPlc.Def var val)
instance (GHC.Show.Show var, GHC.Show.Show val) => GHC.Show.Show (PlutusCore.MkPlc.Def var val)
instance PlutusCore.MkPlc.TermLike (PlutusCore.Core.Type.Term tyname name uni fun) tyname name uni fun


-- | This module defines Haskell data types that simplify construction of
--   PLC types and terms.
module PlutusCore.StdLib.Type

-- | A recursive type packaged along with a specified <tt>Wrap</tt> that
--   allows to construct elements of this type.
data RecursiveType uni fun ann
RecursiveType :: Type TyName uni ann -> (forall term. TermLike term TyName Name uni fun => [Type TyName uni ann] -> term ann -> term ann) -> RecursiveType uni fun ann
[_recursiveType] :: RecursiveType uni fun ann -> Type TyName uni ann
[_recursiveWrap] :: RecursiveType uni fun ann -> forall term. TermLike term TyName Name uni fun => [Type TyName uni ann] -> term ann -> term ann

-- | Construct a <a>RecursiveType</a> out of its name, variables bound in
--   its pattern functor and the body of the pattern functor. The 0- and
--   1-ary pattern functors are special-cased, while in the general case
--   the pattern functor and type arguments get encoded into a 1-ary form
--   first.
makeRecursiveType :: FromDataPieces uni ann (RecursiveType uni fun ann)
instance GHC.Exception.Type.Exception PlutusCore.StdLib.Type.IndicesLengthsMismatchException
instance GHC.Show.Show PlutusCore.StdLib.Type.IndicesLengthsMismatchException


-- | <tt>tuple</tt>s of various sizes and related functions.
module PlutusCore.StdLib.Meta.Data.Tuple

-- | A Plutus Core (Scott-encoded) tuple.
data Tuple term uni ann
[Tuple] :: TermLike term TyName Name uni fun => [Type TyName uni ann] -> term ann -> Tuple term uni ann

-- | Get the type of a <a>Tuple</a>.
--   
--   <pre>
--   getTupleType _ (Tuple [a1, ... , an] _) = all r. (a1 -&gt; ... -&gt; an -&gt; r) -&gt; r
--   </pre>
getTupleType :: MonadQuote m => ann -> Tuple term uni ann -> m (Type TyName uni ann)

-- | Get the type of the ith element of a <a>Tuple</a> along with the
--   element itself.
--   
--   <pre>
--   tupleTypeTermAt _ i (Tuple [a0, ... , an] term) =
--       (ai, term {ai} (\(x0 : a0) ... (xn : an) -&gt; xi))
--   </pre>
tupleTypeTermAt :: (TermLike term TyName Name uni fun, MonadQuote m) => ann -> Int -> Tuple term uni ann -> m (Type TyName uni ann, term ann)

-- | Get the ith element of a <a>Tuple</a>.
tupleTermAt :: (TermLike term TyName Name uni fun, MonadQuote m) => ann -> Int -> Tuple term uni ann -> m (term ann)

-- | Get the ith element of a <a>Tuple</a> as a <a>TermDef</a>.
tupleDefAt :: (TermLike term TyName Name uni fun, MonadQuote m) => ann -> Int -> Name -> Tuple term uni ann -> m (TermDef term TyName Name uni ann)

-- | Bind all elements of a <a>Tuple</a> inside a <a>Term</a>.
--   
--   <pre>
--   bindTuple _ [x_1, ... , x_n] (Tuple [a1, ... , an] term) body =
--       (\(tup : all r. (a_1 -&gt; ... -&gt; a_n -&gt; r) -&gt; r) -&gt;
--         let x_1 = _1 tup
--             ...
--             x_n = _n tup
--           in body
--       ) term
--   </pre>
bindTuple :: (TermLike term TyName Name uni fun, MonadQuote m) => ann -> [Name] -> Tuple term uni ann -> term ann -> m (term ann)

-- | Given an arity <tt>n</tt>, create the n-ary product type.
--   
--   <pre>
--   (T_1 :: *) .. (T_n :: *) . all (R :: *) . (T_1 -&gt; .. -&gt; T_n -&gt; R) -&gt; R
--   </pre>
prodN :: Int -> Type TyName uni ()

-- | Given an arity <tt>n</tt>, create the constructor for n-ary products.
--   
--   <pre>
--   /(T_1 :: *) .. (T_n :: *) .
--       (arg_1 : T_1) .. (arg_n : T_n) .
--           /(R :: *).
--               (case : T_1 -&gt; .. -&gt; T_n -&gt; R) -&gt; case arg_1 .. arg_n
--   </pre>
prodNConstructor :: TermLike term TyName Name uni fun => Int -> term ()

-- | Given an arity <tt>n</tt> and an index <tt>i</tt>, create a function
--   for accessing the i'th component of a n-tuple.
--   
--   <pre>
--   /(T_1 :: *) .. (T_n :: *) .
--       (tuple : all (R :: *) . (T_1 -&gt; .. -&gt; T_n -&gt; R) -&gt; R)) .
--           tuple {T_i} ((arg_1 : T_1) .. (arg_n : T_n) . arg_i)
--   </pre>
prodNAccessor :: TermLike term TyName Name uni fun => Int -> Int -> term ()

-- | Convert a Haskell spine of <a>Term</a>s to a PLC <a>Tuple</a>.
--   
--   <pre>
--   getSpineToTuple _ [(a1, x1), ... , (an, xn)] =
--       Tuple [a1, ... , an] (/\(r :: *) -&gt; \(f :: a1 -&gt; ... -&gt; an -&gt; r) -&gt; f x1 ... xn)
--   </pre>
getSpineToTuple :: (TermLike term TyName Name uni fun, MonadQuote m) => ann -> [(Type TyName uni ann, term ann)] -> m (Tuple term uni ann)


-- | Meta-functions relating to functions.
module PlutusCore.StdLib.Meta.Data.Function

-- | <a>const</a> as a PLC term.
--   
--   <pre>
--   constPartial t = /\(A :: *) -&gt; \(x : A) -&gt; t
--   </pre>
constPartial :: TermLike term TyName Name uni fun => term () -> term ()

-- | Eta-expand a function at a given type. Note that this has to be a
--   "meta" function for it not force the function it receives and instead
--   directly hide it under a lambda.
--   
--   <pre>
--   etaExpand ty fun = \(x : ty) -&gt; fun x
--   </pre>
etaExpand :: TermLike term TyName Name uni fun => Type TyName uni () -> term () -> term ()


-- | <tt>unit</tt> and related functions.
module PlutusCore.StdLib.Data.Unit

-- | <tt>()</tt> as a PLC type.
unit :: uni `Includes` () => Type TyName uni ()

-- | <tt>()</tt> as a PLC term.
unitval :: (TermLike term TyName Name uni fun, uni `Includes` ()) => term ()

-- | <a>seq</a> specified to <tt>()</tt> as a PLC term.
sequ :: (TermLike term TyName Name uni fun, uni `Includes` ()) => term ()


-- | <tt>sum</tt> and related functions.
module PlutusCore.StdLib.Data.Sum

-- | <a>Either</a> as a PLC type.
--   
--   <pre>
--   \(a b :: *) -&gt; all (r :: *). (a -&gt; r) -&gt; (b -&gt; r) -&gt; r
--   </pre>
sum :: Type TyName uni ()

-- | <a>Left</a> as a PLC term.
--   
--   <pre>
--   /\(a b :: *) -&gt; \(x : a) -&gt; /\(r :: *) -&gt; \(f : a -&gt; r) -&gt; (g : b -&gt; r) -&gt; f x
--   </pre>
left :: TermLike term TyName Name uni fun => term ()

-- | <a>Right</a> as a PLC term.
--   
--   <pre>
--   /\(a b :: *) -&gt; \(y : b) -&gt; /\(r :: *) -&gt; \(f : a -&gt; r) -&gt; (g : b -&gt; r) -&gt; g y
--   </pre>
right :: TermLike term TyName Name uni fun => term ()


-- | Scott-encoded <tt>unit</tt> and related functions.
module PlutusCore.StdLib.Data.ScottUnit

-- | <tt>()</tt> as a PLC type.
--   
--   <pre>
--   all (A :: *). A -&gt; A
--   </pre>
unit :: Type TyName uni ()

-- | <tt>()</tt> as a PLC term.
--   
--   <pre>
--   /\(A :: *) -&gt; \(x : A) -&gt; x
--   </pre>
unitval :: TermLike term TyName Name uni fun => term ()


-- | Combinators.
module PlutusCore.StdLib.Data.Function

-- | <a>const</a> as a PLC term.
--   
--   <pre>
--   /\(A B :: *) -&gt; \(x : A) (y : B) -&gt; x
--   </pre>
const :: TermLike term TyName Name uni fun => term ()

-- | <a>id</a> as a PLC term.
--   
--   <pre>
--   /\(A :: *) -&gt; \(x : A) -&gt; x
--   </pre>
idFun :: TermLike term TyName Name uni fun => term ()

-- | <a>($)</a> as a PLC term.
--   
--   <pre>
--   /\(A B :: *) -&gt; \(f : A -&gt; B) (x : A) -&gt; f x
--   </pre>
applyFun :: TermLike term TyName Name uni fun => term ()

-- | <tt>Self</tt> as a PLC type.
--   
--   <pre>
--   fix \(self :: * -&gt; *) (a :: *) -&gt; self a -&gt; a
--   </pre>
selfData :: RecursiveType uni fun ()

-- | <tt>unroll</tt> as a PLC term.
--   
--   <pre>
--   /\(a :: *) -&gt; \(s : self a) -&gt; unwrap s s
--   </pre>
unroll :: TermLike term TyName Name uni fun => term ()

-- | <a>fix</a> as a PLC term.
--   
--   <pre>
--   /\(a b :: *) -&gt; \(f : (a -&gt; b) -&gt; a -&gt; b) -&gt;
--      unroll {a -&gt; b} (iwrap selfF (a -&gt; b) \(s : self (a -&gt; b)) \(x : a) -&gt; f (unroll {a -&gt; b} s) x)
--   </pre>
--   
--   See <tt>plutus<i>runQuote $
--   docs</i>fomega/z-combinator-benchmarks</tt> for details.
fix :: TermLike term TyName Name uni fun => term ()
fixAndType :: TermLike term TyName Name uni fun => (term (), Type TyName uni ())

-- | The <a>fixBy</a> combinator.
--   
--   <pre>
--   fixBy :
--       forall (F :: * -&gt; *) .
--       ((F ~&gt; Id) -&gt; (F ~&gt; Id)) -&gt;
--       ((F ~&gt; F) -&gt; (F ~&gt; Id))
--   </pre>
fixBy :: TermLike term TyName Name uni fun => term ()
fixByAndType :: TermLike term TyName Name uni fun => (term (), Type TyName uni ())

-- | Make a <tt>n</tt>-ary fixpoint combinator.
--   
--   <pre>
--   FixN n :
--       forall A1 B1 ... An Bn :: * .
--       (forall Q :: * .
--           ((A1 -&gt; B1) -&gt; ... -&gt; (An -&gt; Bn) -&gt; Q) -&gt;
--           (A1 -&gt; B1) -&gt;
--           ... -&gt;
--           (An -&gt; Bn) -&gt;
--           Q) -&gt;
--       (forall R :: * . ((A1 -&gt; B1) -&gt; ... (An -&gt; Bn) -&gt; R) -&gt; R)
--   </pre>
fixN :: TermLike term TyName Name uni fun => Integer -> term () -> term ()
fixNAndType :: TermLike term TyName Name uni fun => Integer -> term () -> (term (), Type TyName uni ())

-- | A PLC function.
data FunctionDef term tyname name uni fun ann
FunctionDef :: ann -> name -> FunctionType tyname uni ann -> term ann -> FunctionDef term tyname name uni fun ann

-- | An annotation.
[_functionDefAnn] :: FunctionDef term tyname name uni fun ann -> ann

-- | The name of a function.
[_functionDefName] :: FunctionDef term tyname name uni fun ann -> name

-- | The type of the function.
[_functionDefType] :: FunctionDef term tyname name uni fun ann -> FunctionType tyname uni ann

-- | The definition of the function.
[_functionDefTerm] :: FunctionDef term tyname name uni fun ann -> term ann

-- | Get the fixed-point of a list of mutually recursive functions.
--   
--   <pre>
--   MutualFixOf _ fixN [ FunctionDef _ fN1 (FunctionType _ a1 b1) f1
--                      , ...
--                      , FunctionDef _ fNn (FunctionType _ an bn) fn
--                      ] =
--       Tuple [(a1 -&gt; b1) ... (an -&gt; bn)] $
--           fixN {a1} {b1} ... {an} {bn}
--               /\(q :: *) -&gt; \(choose : (a1 -&gt; b1) -&gt; ... -&gt; (an -&gt; bn) -&gt; q) -&gt;
--                   \(fN1 : a1 -&gt; b1) ... (fNn : an -&gt; bn) -&gt; choose f1 ... fn
--   </pre>
getMutualFixOf :: TermLike term TyName Name uni fun => ann -> term ann -> [FunctionDef term TyName Name uni fun ann] -> Quote (Tuple term uni ann)

-- | Get the fixed-point of a single recursive function.
getSingleFixOf :: TermLike term TyName Name uni fun => ann -> term ann -> FunctionDef term TyName Name uni fun ann -> term ann


-- | Church-encoded <tt>nat</tt> and related functions.
module PlutusCore.StdLib.Data.ChurchNat

-- | Church-encoded <tt>Nat</tt> as a PLC type.
--   
--   <pre>
--   all (r :: *). r -&gt; (r -&gt; r) -&gt; r
--   </pre>
churchNat :: Type TyName uni ()

-- | Church-encoded '0' as a PLC term.
--   
--   <pre>
--   /\(r :: *) -&gt; \(z : r) (f : r -&gt; r) -&gt; z
--   </pre>
churchZero :: TermLike term TyName Name uni fun => term ()

-- | Church-encoded <a>succ</a> as a PLC term.
--   
--   <pre>
--   \(n : nat) -&gt; /\(r :: *) -&gt; \(z : r) (f : r -&gt; r) -&gt; f (n {r} z f)
--   </pre>
churchSucc :: TermLike term TyName Name uni fun => term ()

module PlutusCore.Mark

-- | Marks all the <a>Unique</a>s in a term as used, so they will not be
--   generated in future. Useful if you have a term which was not generated
--   in <a>Quote</a>.
markNonFreshTerm :: (HasUniques (Term tyname name uni fun ann), MonadQuote m) => Term tyname name uni fun ann -> m ()

-- | Marks all the <a>Unique</a>s in a type as used, so they will not be
--   generated in future. Useful if you have a type which was not generated
--   in <a>Quote</a>.
markNonFreshType :: (HasUniques (Type tyname uni ann), MonadQuote m) => Type tyname uni ann -> m ()

-- | Marks all the <a>Unique</a>s in a program as used, so they will not be
--   generated in future. Useful if you have a program which was not
--   generated in <a>Quote</a>.
markNonFreshProgram :: (HasUnique tyname TypeUnique, HasUnique name TermUnique, MonadQuote m) => Program tyname name uni fun ann -> m ()


-- | The user-facing API of the renamer.
module PlutusCore.Rename

-- | A wrapper for signifying that the value inside of it satisfies global
--   uniqueness.
--   
--   It's safe to call <a>unRenamed</a>, it's not safe to call
--   <a>Renamed</a>, hence the latter is only exported from this internal
--   module and should not be exported from the main API.
--   
--   Don't provide any instances allowing the user to create a
--   <a>Renamed</a> (even out of an existing one like with <a>Functor</a>).
data Renamed a

-- | The class of things that can be renamed. I.e. things that are capable
--   of satisfying the global uniqueness condition.
class Rename a

-- | Rename <a>Unique</a>s so that they're globally unique. In case there
--   are any free variables, they must be left untouched and bound
--   variables must not get renamed to free ones. Must always assign new
--   names to bound variables, so that <tt>rename</tt> can be used for
--   alpha-renaming as well.
rename :: (Rename a, MonadQuote m) => a -> m a

-- | <a>rename</a> a value and wrap the result in <a>Renamed</a>, so that
--   it can be passed around and it's visible in the types that the thing
--   inside satisfies global uniqueness.
getRenamed :: (Rename a, MonadQuote m) => a -> m (Renamed a)

-- | <tt>Dupable a</tt> is isomorphic to <tt>a</tt>, but the only way to
--   extract the <tt>a</tt> is via <tt>liftDupable</tt> (defined in the
--   main API module because of a constraint requirement) which renames the
--   stored value along the way. This type is used whenever
--   
--   <ol>
--   <li>preserving global uniqueness is required</li>
--   <li>some value may be used multiple times</li>
--   </ol>
--   
--   so we annotate such a value with <a>Dupable</a> and call
--   <tt>liftDupable</tt> at each usage, which ensures global uniqueness is
--   preserved.
--   
--   <a>unDupable</a> is not supposed to be exported. Don't provide any
--   instances allowing the user to access the underlying value.
data Dupable a

-- | Wrap a value in <a>Dupable</a>.
dupable :: a -> Dupable a

-- | Extract the value stored in a <tt>Dupable a</tt> and rename it.
liftDupable :: (MonadQuote m, Rename a) => Dupable a -> m a
instance PlutusCore.Core.Type.HasUniques (PlutusCore.Core.Type.Type tyname uni ann) => PlutusCore.Rename.Rename (PlutusCore.Core.Type.Type tyname uni ann)
instance PlutusCore.Core.Type.HasUniques (PlutusCore.Core.Type.Term tyname name uni fun ann) => PlutusCore.Rename.Rename (PlutusCore.Core.Type.Term tyname name uni fun ann)
instance PlutusCore.Core.Type.HasUniques (PlutusCore.Core.Type.Program tyname name uni fun ann) => PlutusCore.Rename.Rename (PlutusCore.Core.Type.Program tyname name uni fun ann)
instance PlutusCore.Rename.Rename a => PlutusCore.Rename.Rename (PlutusCore.Core.Type.Normalized a)


-- | The internals of the normalizer.
module PlutusCore.Normalize.Internal

-- | The monad transformer that type normalization runs in.
data NormalizeTypeT m tyname uni ann a

-- | The constraints that type normalization requires.
type MonadNormalizeType uni m = (MonadQuote m, HasUniApply uni)

-- | Run a <a>NormalizeTypeT</a> computation.
runNormalizeTypeT :: NormalizeTypeT m tyname uni ann a -> m a

-- | Locally extend a <a>TypeVarEnv</a> in a <a>NormalizeTypeT</a>
--   computation.
withExtendedTypeVarEnv :: (HasUnique tyname TypeUnique, Monad m) => tyname -> Normalized (Type tyname uni ann) -> NormalizeTypeT m tyname uni ann a -> NormalizeTypeT m tyname uni ann a

-- | Normalize a <a>Kind</a> in the <a>NormalizeTypeT</a> monad.
normalizeTypeM :: (HasUnique tyname TypeUnique, MonadNormalizeType uni m) => Type tyname uni ann -> NormalizeTypeT m tyname uni ann (Normalized (Type tyname uni ann))

-- | Substitute a type for a variable in a type and normalize in the
--   <a>NormalizeTypeT</a> monad.
substNormalizeTypeM :: (HasUnique tyname TypeUnique, MonadNormalizeType uni m) => Normalized (Type tyname uni ann) -> tyname -> Type tyname uni ann -> NormalizeTypeT m tyname uni ann (Normalized (Type tyname uni ann))

-- | Normalize every <a>Kind</a> in a <a>Term</a>.
normalizeTypesInM :: (HasUnique tyname TypeUnique, MonadNormalizeType uni m) => Term tyname name uni fun ann -> NormalizeTypeT m tyname uni ann (Term tyname name uni fun ann)
instance PlutusCore.Quote.MonadQuote m => PlutusCore.Quote.MonadQuote (PlutusCore.Normalize.Internal.NormalizeTypeT m tyname uni ann)
instance Control.Monad.State.Class.MonadState s m => Control.Monad.State.Class.MonadState s (PlutusCore.Normalize.Internal.NormalizeTypeT m tyname uni ann)
instance GHC.Base.Monad m => Control.Monad.Reader.Class.MonadReader (PlutusCore.Normalize.Internal.NormalizeTypeEnv tyname uni ann) (PlutusCore.Normalize.Internal.NormalizeTypeT m tyname uni ann)
instance GHC.Base.MonadPlus m => GHC.Base.MonadPlus (PlutusCore.Normalize.Internal.NormalizeTypeT m tyname uni ann)
instance GHC.Base.Monad m => GHC.Base.Monad (PlutusCore.Normalize.Internal.NormalizeTypeT m tyname uni ann)
instance GHC.Base.Alternative m => GHC.Base.Alternative (PlutusCore.Normalize.Internal.NormalizeTypeT m tyname uni ann)
instance GHC.Base.Applicative m => GHC.Base.Applicative (PlutusCore.Normalize.Internal.NormalizeTypeT m tyname uni ann)
instance GHC.Base.Functor m => GHC.Base.Functor (PlutusCore.Normalize.Internal.NormalizeTypeT m tyname uni ann)


-- | The user-facing API of the normalizer.
module PlutusCore.Normalize

-- | Normalize a <a>Kind</a>.
normalizeType :: (HasUnique tyname TypeUnique, MonadNormalizeType uni m) => Type tyname uni ann -> m (Normalized (Type tyname uni ann))

-- | Normalize every <a>Kind</a> in a <a>Term</a>.
normalizeTypesIn :: (HasUnique tyname TypeUnique, HasUnique name TermUnique, MonadNormalizeType uni m) => Term tyname name uni fun ann -> m (Term tyname name uni fun ann)

-- | Normalize every <a>Kind</a> in a <a>Program</a>.
normalizeTypesInProgram :: (HasUnique tyname TypeUnique, HasUnique name TermUnique, MonadNormalizeType uni m) => Program tyname name uni fun ann -> m (Program tyname name uni fun ann)


-- | Machinery defined in this module allows to export mulptiple Plutus
--   Core definitions (types and terms) as a single value which enables
--   convenient testing of various procedures (pretty-printing, type
--   checking, etc): each time a function / data type is added to that
--   value, none of the tests is required to be adapted, instead all the
--   tests see the new definition automatically.
module PlutusCore.FsTree

-- | An <a>FsTree</a> is either a file or a folder with a list of
--   <a>FsTree</a>s inside.
data FsTree a
FsFolder :: String -> FolderContents a -> FsTree a
FsFile :: String -> a -> FsTree a

-- | The contents of a folder. A wrapper around <tt>[FsTree a]</tt>. Exists
--   because of its <a>Semigroup</a> instance which allows to concatenate
--   two <a>FolderContents</a>s without placing them into the same folder
--   immediately, so we can have various PLC "modules" (<tt>stdlib</tt>,
--   <tt>examples</tt>, etc), define compound modules (e.g. <tt>stdlib
--   &lt;&gt; examples</tt>) and run various tests (pretty-printing, type
--   synthesis, etc) against simple and compound modules uniformly.
newtype FolderContents a
FolderContents :: [FsTree a] -> FolderContents a
[unFolderContents] :: FolderContents a -> [FsTree a]

-- | A <a>PlcEntity</a> is either a <a>Kind</a> or a <a>Term</a>.
data PlcEntity uni fun
PlcType :: Type TyName uni () -> PlcEntity uni fun
PlcTerm :: Term TyName Name uni fun () -> PlcEntity uni fun
type PlcFsTree uni fun = FsTree (PlcEntity uni fun)
type PlcFolderContents uni fun = FolderContents (PlcEntity uni fun)

-- | Construct an <a>FsTree</a> out of the name of a folder and a list of
--   <a>FsTree</a>s.
treeFolderContents :: String -> [FsTree a] -> FsTree a

-- | Construct a single-file <a>PlcFsTree</a> out of a type.
plcTypeFile :: String -> Type TyName uni () -> PlcFsTree uni fun

-- | Construct a single-file <a>PlcFsTree</a> out of a term.
plcTermFile :: String -> Term TyName Name uni fun () -> PlcFsTree uni fun

-- | Fold a <a>FsTree</a>.
foldFsTree :: (String -> [b] -> b) -> (String -> a -> b) -> FsTree a -> b

-- | Fold a <a>PlcFsTree</a>.
foldPlcFsTree :: (String -> [b] -> b) -> (String -> Type TyName uni () -> b) -> (String -> Term TyName Name uni fun () -> b) -> PlcFsTree uni fun -> b

-- | Fold the contents of a PLC folder.
foldPlcFolderContents :: (String -> [b] -> b) -> (String -> Type TyName uni () -> b) -> (String -> Term TyName Name uni fun () -> b) -> PlcFolderContents uni fun -> [b]
instance GHC.Base.Monoid (PlutusCore.FsTree.FolderContents a)
instance GHC.Base.Semigroup (PlutusCore.FsTree.FolderContents a)


-- | Flat instances for Plutus Core types. Make sure to read the Note
--   [Stable encoding of PLC] before touching anything in this file. Also
--   see the Notes [Serialising unit annotations] and [Serialising Scripts]
--   before using anything in this file.
module PlutusCore.Flat

-- | For deriving <a>Flat</a> instances via <tt>Serialize</tt>.
newtype AsSerialize a
AsSerialize :: a -> AsSerialize a
[unAsSerialize] :: AsSerialize a -> a
safeEncodeBits :: NumBits -> Word8 -> Encoding
instance Codec.Serialise.Class.Serialise a => Codec.Serialise.Class.Serialise (PlutusCore.Flat.AsSerialize a)
instance Flat.Class.Flat PlutusCore.Data.Data
instance Flat.Class.Flat PlutusCore.Name.Unique
instance Flat.Class.Flat PlutusCore.Name.TyName
instance Flat.Class.Flat a => Flat.Class.Flat (PlutusCore.Core.Type.Normalized a)
instance Flat.Class.Flat PlutusCore.DeBruijn.Internal.DeBruijn
instance Flat.Class.Flat PlutusCore.DeBruijn.Internal.TyDeBruijn
instance Flat.Class.Flat PlutusCore.DeBruijn.Internal.NamedTyDeBruijn
instance Flat.Class.Flat (PlutusCore.Core.Type.Binder PlutusCore.Name.Name)
instance Flat.Class.Flat (PlutusCore.Core.Type.Binder PlutusCore.Name.TyName)
instance Flat.Class.Flat (PlutusCore.Core.Type.Binder PlutusCore.DeBruijn.Internal.NamedDeBruijn)
instance Flat.Class.Flat (PlutusCore.Core.Type.Binder PlutusCore.DeBruijn.Internal.NamedTyDeBruijn)
instance Codec.Serialise.Class.Serialise a => Flat.Class.Flat (PlutusCore.Flat.AsSerialize a)
instance Universe.Core.Closed uni => Flat.Class.Flat (Universe.Core.SomeTypeIn uni)
instance (Universe.Core.Closed uni, Universe.Core.Everywhere uni Flat.Class.Flat) => Flat.Class.Flat (Data.Some.Newtype.Some (Universe.Core.ValueOf uni))
instance Flat.Class.Flat PlutusCore.Name.Name
instance Flat.Class.Flat PlutusCore.Version.Version
instance Flat.Class.Flat ann => Flat.Class.Flat (PlutusCore.Core.Type.Kind ann)
instance (Universe.Core.Closed uni, Flat.Class.Flat ann, Flat.Class.Flat tyname) => Flat.Class.Flat (PlutusCore.Core.Type.Type tyname uni ann)
instance (Universe.Core.Closed uni, Universe.Core.Everywhere uni Flat.Class.Flat, Flat.Class.Flat fun, Flat.Class.Flat ann, Flat.Class.Flat tyname, Flat.Class.Flat name) => Flat.Class.Flat (PlutusCore.Core.Type.Term tyname name uni fun ann)
instance (Universe.Core.Closed uni, Flat.Class.Flat ann, Flat.Class.Flat tyname, Flat.Class.Flat name) => Flat.Class.Flat (PlutusCore.Core.Type.VarDecl tyname name uni ann)
instance (Flat.Class.Flat ann, Flat.Class.Flat tyname) => Flat.Class.Flat (PlutusCore.Core.Type.TyVarDecl tyname ann)
instance (Flat.Class.Flat ann, Flat.Class.Flat (PlutusCore.Core.Type.Term tyname name uni fun ann)) => Flat.Class.Flat (PlutusCore.Core.Type.Program tyname name uni fun ann)
instance Flat.Class.Flat PlutusCore.DeBruijn.Internal.Index
instance Flat.Class.Flat PlutusCore.DeBruijn.Internal.NamedDeBruijn
instance Flat.Class.Flat (PlutusCore.Core.Type.Binder PlutusCore.DeBruijn.Internal.DeBruijn)
instance Flat.Class.Flat PlutusCore.DeBruijn.Internal.FakeNamedDeBruijn
instance Flat.Class.Flat (PlutusCore.Core.Type.Binder PlutusCore.DeBruijn.Internal.FakeNamedDeBruijn)

module PlutusCore.Examples.Data.TreeForest
treeData :: RecursiveType uni fun ()
forestData :: RecursiveType uni fun ()

-- | <pre>
--   /\(a :: *) -&gt; \(x : a) (fr : forest a) -&gt;
--       wrapTree [a] /\(r :: *) -&gt; \(f : a -&gt; forest a -&gt; r) -&gt; f x fr
--   </pre>
treeNode :: HasUniApply uni => Term TyName Name uni fun ()

-- | <pre>
--   /\(a :: *) -&gt;
--       wrapForest [a] /\(r :: *) -&gt; \(z : r) (f : tree a -&gt; forest a -&gt; r) -&gt; z
--   </pre>
forestNil :: HasUniApply uni => Term TyName Name uni fun ()

-- | <pre>
--   /\(a :: *) -&gt; \(tr : tree a) (fr : forest a)
--       wrapForest [a] /\(r :: *) -&gt; \(z : r) (f : tree a -&gt; forest a -&gt; r) -&gt; f tr fr
--   </pre>
forestCons :: HasUniApply uni => Term TyName Name uni fun ()
instance (a GHC.Types.~ ()) => PlutusCore.Examples.Data.TreeForest.HasArrow (PlutusCore.Core.Type.Kind a)
instance (a GHC.Types.~ ()) => PlutusCore.Examples.Data.TreeForest.HasArrow (PlutusCore.Core.Type.Type tyname uni a)

module PlutusCore.Examples.Data.Shad

-- | <pre>
--   \(a :: *) -&gt; ifix (getShadF a) a
--   </pre>
shad :: uni `Includes` Integer => Type TyName uni ()

-- | Test that shadowing does not result in variable capture. The
--   definition is as follows:
--   
--   <pre>
--   /\(a :: *) -&gt; wrap (getShadF a) a (\(x : a) -&gt; /\(f :: * -&gt; *) -&gt; \(y : f i) -&gt; 0)
--   </pre>
--   
--   Type checking this term we eventually reach
--   
--   <pre>
--   NORM (vPat (\(a :: k) -&gt; ifix vPat a) arg)
--   </pre>
--   
--   (where in our case <tt>vPat</tt> is <tt>shadF</tt> and <tt>arg</tt> is
--   <tt>a</tt>), which, if we were naive, would unfold into
--   
--   <pre>
--   a -&gt; all (a :: * -&gt; *). a a -&gt; integer
--   </pre>
--   
--   i.e. we substituted the outer <tt>a</tt> for <tt>i</tt>, but due to
--   variable capture via <tt>all</tt> that outer <tt>a</tt> now became an
--   inner one, which would be a bug.
--   
--   But that problem is already solved before type checking starts as we
--   rename the program and that makes all binders uniques, so no variable
--   capture is possible due to the outer and inner bindings being
--   distinct.
mkShad :: uni `Includes` Integer => Term TyName Name uni fun ()

-- | <pre>
--   ifix recUnitF ()
--   </pre>
recUnit :: uni `Includes` () => Type TyName uni ()

-- | Test that a binder in a pattern functor does not get duplicated. The
--   definition is as follows:
--   
--   <pre>
--   /\(a :: *) -&gt; \(ru : recUnit) -&gt; unwrap ru {a} ru
--   </pre>
--   
--   Type checking this term we eventually reach
--   
--   <pre>
--   NORM (vPat (\(a :: k) -&gt; ifix vPat a) arg)
--   </pre>
--   
--   (where in our case <tt>vPat</tt> is <tt>recUnitF</tt> and <tt>arg</tt>
--   is <tt>()</tt>), which, if we were naive, would unfold into
--   
--   <pre>
--   all (r :: *). ifix (\(rec :: * -&gt; *) (i :: *) -&gt; all (r :: *). rec i -&gt; r -&gt; r) () -&gt; r -&gt; r
--   </pre>
--   
--   and break global uniqueness as the <tt>all (r :: *)</tt> binder
--   appears twice.
--   
--   But this doesn't happen in the actual code, since when a variable gets
--   looked up during type normalization, its value gets renamed, which
--   means that a fresh variable will be generated for the inner binder and
--   there will be no shadowing.
runRecUnit :: uni `Includes` () => Term TyName Name uni fun ()

module PlutusCore.Examples.Data.InterList

-- | <tt>InterList</tt> as a PLC type.
--   
--   <pre>
--   fix \(interlist :: * -&gt; * -&gt; *) (a :: *) (b :: *) -&gt;
--       all (r :: *). r -&gt; (a -&gt; b -&gt; interlist b a -&gt; r) -&gt; r
--   </pre>
interListData :: RecursiveType uni fun ()
interNil :: Term TyName Name uni fun ()
interCons :: Term TyName Name uni fun ()
foldrInterList :: uni `Includes` () => Term TyName Name uni fun ()

module PlutusCore.Error

-- | An error encountered during parsing.
data ParserError
UnknownBuiltinType :: !Text -> !SourcePos -> ParserError
BuiltinTypeNotAStar :: !Text -> !SourcePos -> ParserError
UnknownBuiltinFunction :: !Text -> !SourcePos -> ![Text] -> ParserError
InvalidBuiltinConstant :: !Text -> !Text -> !SourcePos -> ParserError
InvalidData :: !Text -> !SourcePos -> ParserError
class AsParserErrorBundle r_a5ofM
_ParserErrorBundle :: AsParserErrorBundle r_a5ofM => Prism' r_a5ofM ParserErrorBundle
_ParseErrorB :: AsParserErrorBundle r_a5ofM => Prism' r_a5ofM (ParseErrorBundle Text ParserError)
data ParserErrorBundle
ParseErrorB :: !ParseErrorBundle Text ParserError -> ParserErrorBundle
data NormCheckError tyname name uni fun ann
BadType :: !ann -> !Type tyname uni ann -> !Text -> NormCheckError tyname name uni fun ann
BadTerm :: !ann -> !Term tyname name uni fun ann -> !Text -> NormCheckError tyname name uni fun ann
class AsNormCheckError r_a5onp tyname_a5m0D name_a5m0E uni_a5m0F fun_a5m0G ann_a5m0H | r_a5onp -> tyname_a5m0D name_a5m0E uni_a5m0F fun_a5m0G ann_a5m0H
_NormCheckError :: AsNormCheckError r_a5onp tyname_a5m0D name_a5m0E uni_a5m0F fun_a5m0G ann_a5m0H => Prism' r_a5onp (NormCheckError tyname_a5m0D name_a5m0E uni_a5m0F fun_a5m0G ann_a5m0H)
_BadType :: AsNormCheckError r_a5onp tyname_a5m0D name_a5m0E uni_a5m0F fun_a5m0G ann_a5m0H => Prism' r_a5onp (ann_a5m0H, Type tyname_a5m0D uni_a5m0F ann_a5m0H, Text)
_BadTerm :: AsNormCheckError r_a5onp tyname_a5m0D name_a5m0E uni_a5m0F fun_a5m0G ann_a5m0H => Prism' r_a5onp (ann_a5m0H, Term tyname_a5m0D name_a5m0E uni_a5m0F fun_a5m0G ann_a5m0H, Text)
data UniqueError ann
MultiplyDefined :: !Unique -> !ann -> !ann -> UniqueError ann
IncoherentUsage :: !Unique -> !ann -> !ann -> UniqueError ann
FreeVariable :: !Unique -> !ann -> UniqueError ann
class AsUniqueError r_a5ohX ann_a5m0I | r_a5ohX -> ann_a5m0I
_UniqueError :: AsUniqueError r_a5ohX ann_a5m0I => Prism' r_a5ohX (UniqueError ann_a5m0I)
_MultiplyDefined :: AsUniqueError r_a5ohX ann_a5m0I => Prism' r_a5ohX (Unique, ann_a5m0I, ann_a5m0I)
_IncoherentUsage :: AsUniqueError r_a5ohX ann_a5m0I => Prism' r_a5ohX (Unique, ann_a5m0I, ann_a5m0I)
_FreeVariable :: AsUniqueError r_a5ohX ann_a5m0I => Prism' r_a5ohX (Unique, ann_a5m0I)
data TypeError term uni fun ann
KindMismatch :: !ann -> !Type TyName uni () -> !Kind () -> !Kind () -> TypeError term uni fun ann
TypeMismatch :: !ann -> !term -> !Type TyName uni () -> !Normalized (Type TyName uni ()) -> TypeError term uni fun ann
TyNameMismatch :: !ann -> !TyName -> !TyName -> TypeError term uni fun ann
NameMismatch :: !ann -> !Name -> !Name -> TypeError term uni fun ann
FreeTypeVariableE :: !ann -> !TyName -> TypeError term uni fun ann
FreeVariableE :: !ann -> !Name -> TypeError term uni fun ann
UnknownBuiltinFunctionE :: !ann -> !fun -> TypeError term uni fun ann
class AsTypeError r_a5ot2 term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C | r_a5ot2 -> term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C
_TypeError :: AsTypeError r_a5ot2 term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C => Prism' r_a5ot2 (TypeError term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C)
_KindMismatch :: AsTypeError r_a5ot2 term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C => Prism' r_a5ot2 (ann_a5m0C, Type TyName uni_a5m0A (), Kind (), Kind ())
_TypeMismatch :: AsTypeError r_a5ot2 term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C => Prism' r_a5ot2 (ann_a5m0C, term_a5m0z, Type TyName uni_a5m0A (), Normalized (Type TyName uni_a5m0A ()))
_TyNameMismatch :: AsTypeError r_a5ot2 term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C => Prism' r_a5ot2 (ann_a5m0C, TyName, TyName)
_NameMismatch :: AsTypeError r_a5ot2 term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C => Prism' r_a5ot2 (ann_a5m0C, Name, Name)
_FreeTypeVariableE :: AsTypeError r_a5ot2 term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C => Prism' r_a5ot2 (ann_a5m0C, TyName)
_FreeVariableE :: AsTypeError r_a5ot2 term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C => Prism' r_a5ot2 (ann_a5m0C, Name)
_UnknownBuiltinFunctionE :: AsTypeError r_a5ot2 term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C => Prism' r_a5ot2 (ann_a5m0C, fun_a5m0B)

-- | We cannot do a correct translation to or from de Bruijn indices if the
--   program is not well-scoped. So we throw an error in such a case.
data FreeVariableError
FreeUnique :: !Unique -> FreeVariableError
FreeIndex :: !Index -> FreeVariableError
class AsFreeVariableError r_a1hHq
_FreeVariableError :: AsFreeVariableError r_a1hHq => Prism' r_a1hHq FreeVariableError
_FreeUnique :: AsFreeVariableError r_a1hHq => Prism' r_a1hHq Unique
_FreeIndex :: AsFreeVariableError r_a1hHq => Prism' r_a1hHq Index
data Error uni fun ann
ParseErrorE :: !ParserErrorBundle -> Error uni fun ann
UniqueCoherencyErrorE :: !UniqueError ann -> Error uni fun ann
TypeErrorE :: !TypeError (Term TyName Name uni fun ()) uni fun ann -> Error uni fun ann
NormCheckErrorE :: !NormCheckError TyName Name uni fun ann -> Error uni fun ann
FreeVariableErrorE :: !FreeVariableError -> Error uni fun ann
class AsError r_a5oGp uni_a5m0w fun_a5m0x ann_a5m0y | r_a5oGp -> uni_a5m0w fun_a5m0x ann_a5m0y
_Error :: AsError r_a5oGp uni_a5m0w fun_a5m0x ann_a5m0y => Prism' r_a5oGp (Error uni_a5m0w fun_a5m0x ann_a5m0y)
_ParseErrorE :: AsError r_a5oGp uni_a5m0w fun_a5m0x ann_a5m0y => Prism' r_a5oGp ParserErrorBundle
_UniqueCoherencyErrorE :: AsError r_a5oGp uni_a5m0w fun_a5m0x ann_a5m0y => Prism' r_a5oGp (UniqueError ann_a5m0y)
_TypeErrorE :: AsError r_a5oGp uni_a5m0w fun_a5m0x ann_a5m0y => Prism' r_a5oGp (TypeError (Term TyName Name uni_a5m0w fun_a5m0x ()) uni_a5m0w fun_a5m0x ann_a5m0y)
_NormCheckErrorE :: AsError r_a5oGp uni_a5m0w fun_a5m0x ann_a5m0y => Prism' r_a5oGp (NormCheckError TyName Name uni_a5m0w fun_a5m0x ann_a5m0y)
_FreeVariableErrorE :: AsError r_a5oGp uni_a5m0w fun_a5m0x ann_a5m0y => Prism' r_a5oGp FreeVariableError

-- | Lifts an <a>Either</a> into an error context where we can embed the
--   <a>Left</a> value into the error.
throwingEither :: MonadError e m => AReview e t -> Either t a -> m a

-- | The type class defines how to print a custom component of
--   <a>ParseError</a>.
class Ord a => ShowErrorComponent a

-- | Pretty-print a component of <a>ParseError</a>.
showErrorComponent :: ShowErrorComponent a => a -> String

-- | Length of the error component in characters, used for highlighting of
--   parse errors in input string.
errorComponentLen :: ShowErrorComponent a => a -> Int
instance PlutusCore.Error.AsError (PlutusCore.Error.Error uni fun ann) uni fun ann
instance PlutusCore.Error.AsParserErrorBundle (PlutusCore.Error.Error uni fun ann)
instance PlutusCore.Error.AsUniqueError (PlutusCore.Error.Error uni fun ann) ann
instance PlutusCore.Error.AsTypeError (PlutusCore.Error.Error uni fun ann) (PlutusCore.Core.Type.Term PlutusCore.Name.TyName PlutusCore.Name.Name uni fun ()) uni fun ann
instance (tyname GHC.Types.~ PlutusCore.Name.TyName, name GHC.Types.~ PlutusCore.Name.Name) => PlutusCore.Error.AsNormCheckError (PlutusCore.Error.Error uni fun ann) tyname name uni fun ann
instance PlutusCore.DeBruijn.Internal.AsFreeVariableError (PlutusCore.Error.Error uni fun ann)
instance PlutusCore.Error.AsTypeError (PlutusCore.Error.TypeError term uni fun ann) term uni fun ann
instance PlutusCore.Error.AsNormCheckError (PlutusCore.Error.NormCheckError tyname name uni fun ann) tyname name uni fun ann
instance PlutusCore.Error.AsUniqueError (PlutusCore.Error.UniqueError ann) ann
instance PlutusCore.Error.AsParserErrorBundle PlutusCore.Error.ParserErrorBundle
instance PlutusCore.Error.AsParseError (Text.Megaparsec.Error.ParseError s e) s e
instance Control.DeepSeq.NFData PlutusCore.Error.ParserError
instance GHC.Generics.Generic PlutusCore.Error.ParserError
instance GHC.Classes.Ord PlutusCore.Error.ParserError
instance GHC.Classes.Eq PlutusCore.Error.ParserError
instance Control.DeepSeq.NFData ann => Control.DeepSeq.NFData (PlutusCore.Error.UniqueError ann)
instance GHC.Base.Functor PlutusCore.Error.UniqueError
instance GHC.Generics.Generic (PlutusCore.Error.UniqueError ann)
instance GHC.Classes.Eq ann => GHC.Classes.Eq (PlutusCore.Error.UniqueError ann)
instance GHC.Show.Show ann => GHC.Show.Show (PlutusCore.Error.UniqueError ann)
instance (Universe.Core.Everywhere uni Control.DeepSeq.NFData, Universe.Core.Closed uni, Control.DeepSeq.NFData ann, Control.DeepSeq.NFData tyname, Control.DeepSeq.NFData name, Control.DeepSeq.NFData fun) => Control.DeepSeq.NFData (PlutusCore.Error.NormCheckError tyname name uni fun ann)
instance GHC.Generics.Generic (PlutusCore.Error.NormCheckError tyname name uni fun ann)
instance GHC.Base.Functor (PlutusCore.Error.NormCheckError tyname name uni fun)
instance (Universe.Core.Everywhere uni GHC.Show.Show, Data.GADT.Internal.GShow uni, Universe.Core.Closed uni, GHC.Show.Show ann, GHC.Show.Show tyname, GHC.Show.Show name, GHC.Show.Show fun) => GHC.Show.Show (PlutusCore.Error.NormCheckError tyname name uni fun ann)
instance (Universe.Core.Closed uni, Control.DeepSeq.NFData ann, Control.DeepSeq.NFData term, Control.DeepSeq.NFData fun) => Control.DeepSeq.NFData (PlutusCore.Error.TypeError term uni fun ann)
instance GHC.Base.Functor (PlutusCore.Error.TypeError term uni fun)
instance GHC.Generics.Generic (PlutusCore.Error.TypeError term uni fun ann)
instance (Data.GADT.Internal.GEq uni, GHC.Classes.Eq ann, GHC.Classes.Eq term, GHC.Classes.Eq fun) => GHC.Classes.Eq (PlutusCore.Error.TypeError term uni fun ann)
instance (Data.GADT.Internal.GShow uni, GHC.Show.Show ann, GHC.Show.Show term, GHC.Show.Show fun) => GHC.Show.Show (PlutusCore.Error.TypeError term uni fun ann)
instance Control.DeepSeq.NFData PlutusCore.Error.ParserErrorBundle
instance GHC.Generics.Generic PlutusCore.Error.ParserErrorBundle
instance GHC.Classes.Eq PlutusCore.Error.ParserErrorBundle
instance GHC.Show.Show PlutusCore.Error.ParserErrorBundle
instance (Universe.Core.Everywhere uni Control.DeepSeq.NFData, Universe.Core.Closed uni, Control.DeepSeq.NFData ann, Control.DeepSeq.NFData fun) => Control.DeepSeq.NFData (PlutusCore.Error.Error uni fun ann)
instance GHC.Base.Functor (PlutusCore.Error.Error uni fun)
instance GHC.Generics.Generic (PlutusCore.Error.Error uni fun ann)
instance (Universe.Core.Everywhere uni GHC.Classes.Eq, Data.GADT.Internal.GEq uni, Universe.Core.Closed uni, GHC.Classes.Eq ann, GHC.Classes.Eq fun) => GHC.Classes.Eq (PlutusCore.Error.Error uni fun ann)
instance (GHC.Classes.Eq (PlutusCore.Core.Type.Term tyname name uni fun ann), GHC.Classes.Eq (PlutusCore.Core.Type.Type tyname uni ann), Data.GADT.Internal.GEq uni, Universe.Core.Closed uni, Universe.Core.Everywhere uni GHC.Classes.Eq, GHC.Classes.Eq fun, GHC.Classes.Eq ann) => GHC.Classes.Eq (PlutusCore.Error.NormCheckError tyname name uni fun ann)
instance (GHC.Show.Show fun, GHC.Show.Show ann, Universe.Core.Closed uni, Universe.Core.Everywhere uni GHC.Show.Show, Data.GADT.Internal.GShow uni, GHC.Show.Show PlutusCore.Error.ParserError) => GHC.Show.Show (PlutusCore.Error.Error uni fun ann)
instance (Prettyprinter.Internal.Pretty (Universe.Core.SomeTypeIn uni), Universe.Core.Closed uni, Universe.Core.Everywhere uni PlutusCore.Pretty.PrettyConst.PrettyConst, Prettyprinter.Internal.Pretty fun, Prettyprinter.Internal.Pretty ann) => Text.PrettyBy.Internal.PrettyBy PlutusCore.Pretty.Plc.PrettyConfigPlc (PlutusCore.Error.Error uni fun ann)
instance Prettyprinter.Internal.Pretty PlutusCore.Error.ParserErrorBundle
instance (Prettyprinter.Internal.Pretty term, Prettyprinter.Internal.Pretty (Universe.Core.SomeTypeIn uni), Universe.Core.Closed uni, Universe.Core.Everywhere uni PlutusCore.Pretty.PrettyConst.PrettyConst, Prettyprinter.Internal.Pretty fun, Prettyprinter.Internal.Pretty ann) => Text.PrettyBy.Internal.PrettyBy PlutusCore.Pretty.Plc.PrettyConfigPlc (PlutusCore.Error.TypeError term uni fun ann)
instance (Prettyprinter.Internal.Pretty ann, Text.PrettyBy.Internal.PrettyBy config (PlutusCore.Core.Type.Type tyname uni ann), Text.PrettyBy.Internal.PrettyBy config (PlutusCore.Core.Type.Term tyname name uni fun ann)) => Text.PrettyBy.Internal.PrettyBy config (PlutusCore.Error.NormCheckError tyname name uni fun ann)
instance Prettyprinter.Internal.Pretty ann => Prettyprinter.Internal.Pretty (PlutusCore.Error.UniqueError ann)
instance GHC.Show.Show PlutusCore.Error.ParserError
instance Prettyprinter.Internal.Pretty PlutusCore.Error.ParserError
instance Text.Megaparsec.Error.ShowErrorComponent PlutusCore.Error.ParserError
instance Prettyprinter.Internal.Pretty Text.Megaparsec.Pos.SourcePos

module PlutusCore.Check.Value
isTermValue :: Term tyname name uni fun ann -> Bool


-- | This module makes sure types are normalized inside programs.
module PlutusCore.Check.Normal

-- | Ensure that all types in the <a>Program</a> are normalized.
checkProgram :: (AsNormCheckError e tyname name uni fun ann, MonadError e m) => Program tyname name uni fun ann -> m ()

-- | Ensure that all types in the <a>Term</a> are normalized.
checkTerm :: (AsNormCheckError e tyname name uni fun ann, MonadError e m) => Term tyname name uni fun ann -> m ()
isNormalType :: Type tyname uni ann -> Bool
data NormCheckError tyname name uni fun ann
BadType :: !ann -> !Type tyname uni ann -> !Text -> NormCheckError tyname name uni fun ann
BadTerm :: !ann -> !Term tyname name uni fun ann -> !Text -> NormCheckError tyname name uni fun ann

module PlutusCore.Check.Uniques
checkProgram :: (Ord ann, HasUnique name TermUnique, HasUnique tyname TypeUnique, AsUniqueError e ann, MonadError e m) => (UniqueError ann -> Bool) -> Program tyname name uni fun ann -> m ()
checkTerm :: (Ord ann, HasUnique name TermUnique, HasUnique tyname TypeUnique, AsUniqueError e ann, MonadError e m) => (UniqueError ann -> Bool) -> Term tyname name uni fun ann -> m ()
checkType :: (Ord ann, HasUnique tyname TypeUnique, AsUniqueError e ann, MonadError e m) => (UniqueError ann -> Bool) -> Type tyname uni ann -> m ()
data UniqueError ann
MultiplyDefined :: !Unique -> !ann -> !ann -> UniqueError ann
IncoherentUsage :: !Unique -> !ann -> !ann -> UniqueError ann
FreeVariable :: !Unique -> !ann -> UniqueError ann
class AsUniqueError r_a5ohX ann_a5m0I | r_a5ohX -> ann_a5m0I
_UniqueError :: AsUniqueError r_a5ohX ann_a5m0I => Prism' r_a5ohX (UniqueError ann_a5m0I)
_MultiplyDefined :: AsUniqueError r_a5ohX ann_a5m0I => Prism' r_a5ohX (Unique, ann_a5m0I, ann_a5m0I)
_IncoherentUsage :: AsUniqueError r_a5ohX ann_a5m0I => Prism' r_a5ohX (Unique, ann_a5m0I, ann_a5m0I)
_FreeVariable :: AsUniqueError r_a5ohX ann_a5m0I => Prism' r_a5ohX (Unique, ann_a5m0I)

module PlutusCore.Builtin.Elaborate

-- | Specialize each Haskell type variable in <tt>a</tt> as a type
--   representing a PLC type variable. <tt>i</tt> is a fresh id and
--   <tt>j</tt> is a final one as in <a>TrySpecializeAsVar</a>, but since
--   <a>HandleHole</a> can specialize multiple variables, <tt>j</tt> can be
--   equal to <tt>i + n</tt> for any <tt>n</tt> (including <tt>0</tt>).
type ElaborateFromTo i j val a = HandleHole i j val (TypeHole a)
instance forall a (i :: GHC.TypeNats.Nat) (j :: GHC.TypeNats.Nat) (x :: a) (k :: GHC.TypeNats.Nat) val. (PlutusCore.Builtin.Elaborate.TrySpecializeAsUnappliedVar i j PlutusCore.Builtin.KnownTypeAst.RepHole 'GHC.Maybe.Nothing x, PlutusCore.Builtin.Elaborate.HandleHoles j k val x) => PlutusCore.Builtin.Elaborate.HandleHole i k val (PlutusCore.Builtin.KnownTypeAst.RepHole x)
instance (PlutusCore.Builtin.Elaborate.TrySpecializeAsUnappliedVar i j PlutusCore.Builtin.KnownTypeAst.TypeHole ('GHC.Maybe.Just (PlutusCore.Builtin.Polymorphism.Opaque val)) a, PlutusCore.Builtin.Elaborate.HandleHoles j k val a) => PlutusCore.Builtin.Elaborate.HandleHole i k val (PlutusCore.Builtin.KnownTypeAst.TypeHole a)
instance (i GHC.Types.~ j) => PlutusCore.Builtin.Elaborate.HandleHolesGo i j val '[]
instance (PlutusCore.Builtin.Elaborate.HandleHole i j val hole, PlutusCore.Builtin.Elaborate.HandleHolesGo j k val holes) => PlutusCore.Builtin.Elaborate.HandleHolesGo i k val (hole : holes)
instance forall a k1 (i :: GHC.TypeNats.Nat) (j :: GHC.TypeNats.Nat) (hole :: * -> *) (f :: a -> k1) (k2 :: GHC.TypeNats.Nat) (mw :: GHC.Maybe.Maybe (k1 -> k1)) (x :: a). (PlutusCore.Builtin.Elaborate.TrySpecializeHeadAsVar i j hole f, PlutusCore.Builtin.Elaborate.TrySpecializeAsVar j k2 mw (f x)) => PlutusCore.Builtin.Elaborate.TrySpecializeAsUnappliedVar i k2 hole mw (f x)
instance forall k (i :: GHC.TypeNats.Nat) (j :: GHC.TypeNats.Nat) (mw :: GHC.Maybe.Maybe (k -> k)) (a :: k) (hole :: * -> *). PlutusCore.Builtin.Elaborate.TrySpecializeAsVar i j mw a => PlutusCore.Builtin.Elaborate.TrySpecializeAsUnappliedVar i j hole mw a
instance forall a1 a2 b (i :: GHC.TypeNats.Nat) (j :: GHC.TypeNats.Nat) (hole :: * -> *) (f :: a1 -> a2 -> b) (x :: a1). PlutusCore.Builtin.Elaborate.TrySpecializeHeadAsVar i j hole f => PlutusCore.Builtin.Elaborate.TrySpecializeHeadAsVar i j hole (f x)
instance forall a b (hole :: * -> *) (i :: GHC.TypeNats.Nat) (j :: GHC.TypeNats.Nat) (name :: PlutusCore.Builtin.Polymorphism.TyNameRep (a -> b)). (PlutusCore.Builtin.Elaborate.ThrowNoAppliedVars hole, i GHC.Types.~ j) => PlutusCore.Builtin.Elaborate.TrySpecializeHeadAsVar i j hole (PlutusCore.Builtin.Polymorphism.TyVarRep name)
instance forall a b (i :: GHC.TypeNats.Nat) (j :: GHC.TypeNats.Nat) (f :: a -> b) (hole :: * -> *). (PlutusCore.Builtin.Elaborate.TrySpecializeAsVar i j 'GHC.Maybe.Nothing f, PlutusCore.Builtin.Elaborate.CheckNotAppliedVar hole f) => PlutusCore.Builtin.Elaborate.TrySpecializeHeadAsVar i j hole f
instance forall k (var :: k) (mw :: GHC.Maybe.Maybe (k -> k)) (i :: GHC.TypeNats.Nat) (a :: k) (j :: GHC.Num.Natural.Natural). (var GHC.Types.~ PlutusCore.Builtin.Elaborate.MaybeApply mw (PlutusCore.Builtin.Polymorphism.TyVarRep ('PlutusCore.Builtin.Polymorphism.TyNameRep (PlutusCore.Builtin.Elaborate.GetName k i) i)), a PlutusCore.Builtin.Elaborate.~?~ var, j GHC.Types.~ Data.Type.Bool.If (a PlutusCore.Builtin.Elaborate.=== var) (i GHC.TypeNats.+ 1) i) => PlutusCore.Builtin.Elaborate.TrySpecializeAsVar i j mw a
instance forall a b (x :: a) (y :: b). ((x PlutusCore.Builtin.Elaborate.=== y) GHC.Types.~ 'GHC.Types.False) => PlutusCore.Builtin.Elaborate.TryUnify 'GHC.Types.False x y
instance forall a b (x :: a) (y :: b) (same :: GHC.Types.Bool). (x GHC.Types.~~ y, same GHC.Types.~ 'GHC.Types.True) => PlutusCore.Builtin.Elaborate.TryUnify same x y


-- | Reexports from modules from the <tt>Builtin</tt> folder.
module PlutusCore.Builtin

-- | The class <a>Typeable</a> allows a concrete representation of a type
--   to be calculated.
class Typeable (a :: k)

-- | Type schemes of primitive operations. <tt>as</tt> is a list of types
--   of arguments, <tt>r</tt> is the resulting type. E.g. <tt>Text -&gt;
--   Bool -&gt; Integer</tt> is encoded as <tt>TypeScheme val [Text, Bool]
--   Integer</tt>.
data TypeScheme val (args :: [Type]) res
[TypeSchemeResult] :: (Typeable res, KnownTypeAst (UniOf val) res, MakeKnown val res) => TypeScheme val '[] res
[TypeSchemeArrow] :: (Typeable arg, KnownTypeAst (UniOf val) arg, MakeKnown val arg, ReadKnown val arg) => TypeScheme val args res -> TypeScheme val (arg : args) res
[TypeSchemeAll] :: (KnownSymbol text, KnownNat uniq, KnownKind kind) => Proxy '(text, uniq, kind) -> TypeScheme val args res -> TypeScheme val args res
infixr 9 `TypeSchemeArrow`
argProxy :: TypeScheme val (arg : args) res -> Proxy arg

-- | Convert a <a>TypeScheme</a> to the corresponding <a>Kind</a>.
--   Basically, a map from the PHOAS representation to the FOAS one.
typeSchemeToType :: TypeScheme val args res -> Type TyName (UniOf val) ()

-- | An instance of this class not having any constraints ensures that
--   every type (according to <a>Everywhere</a>) from the universe has
--   'KnownTypeAst, <a>ReadKnownIn</a> and <a>MakeKnownIn</a> instances.
class (uni `Everywhere` ImplementedKnownTypeAst uni, uni `Everywhere` ImplementedReadKnownIn uni, uni `Everywhere` ImplementedMakeKnownIn uni) => TestTypesFromTheUniverseAreAllKnown uni

-- | A <a>BuiltinRuntime</a> represents a possibly partial builtin
--   application. We get an initial <a>BuiltinRuntime</a> representing an
--   empty builtin application (i.e. just the builtin with no arguments) by
--   instantiating.
--   
--   Applying or type-instantiating a builtin peels off the corresponding
--   constructor from its <a>BuiltinRuntime</a>.
--   
--   <a>BuiltinResult</a> contains the cost (an <a>ExBudget</a>) and the
--   result (a <tt>MakeKnownM val</tt>) of the builtin application. The
--   cost is stored strictly, since the evaluator is going to look at it
--   and the result is stored lazily, since it's not supposed to be forced
--   before accounting for the cost of the application. If the cost exceeds
--   the available budget, the evaluator discards the the result of the
--   builtin application without ever forcing it and terminates with
--   evaluation failure. Allowing the user to compute something that they
--   don't have the budget for would be a major bug.
--   
--   Evaluators that ignore the entire concept of costing (e.g. the CK
--   machine) may of course force the result of the builtin application
--   unconditionally.
data BuiltinRuntime val
BuiltinResult :: ExBudget -> ~MakeKnownM val -> BuiltinRuntime val
BuiltinExpectArgument :: (val -> BuiltinRuntime val) -> BuiltinRuntime val
BuiltinExpectForce :: BuiltinRuntime val -> BuiltinRuntime val

-- | A <tt>data</tt> wrapper around a function returning the
--   <a>BuiltinRuntime</a> of a built-in function. We use <tt>data</tt>
--   rather than <tt>newtype</tt>, because GHC is able to see through
--   <tt>newtype</tt>s and may break carefully set up optimizations, see
--   <a>https://github.com/input-output-hk/plutus/pull/4914#issuecomment-1396306606</a>
--   
--   Using <tt>data</tt> may make things more expensive, however it was
--   verified at the time of writing that the wrapper is removed before the
--   CEK machine starts, leaving the stored function to be used directly.
--   
--   In order for lookups to be efficient the <a>BuiltinRuntime</a>s need
--   to be cached, i.e. pulled out of the function statically. See
--   <tt>makeBuiltinMeaning</tt> for how we achieve that.
data BuiltinsRuntime fun val
BuiltinsRuntime :: (fun -> BuiltinRuntime val) -> BuiltinsRuntime fun val
[unBuiltinsRuntime] :: BuiltinsRuntime fun val -> fun -> BuiltinRuntime val

-- | Look up the runtime info of a built-in function during evaluation.
lookupBuiltin :: fun -> BuiltinsRuntime fun val -> BuiltinRuntime val

-- | The AST of a value with a Plutus type attached to it. The type is for
--   the Plutus type checker to look at. <a>Opaque</a> can appear in the
--   type of the denotation of a builtin.
newtype Opaque val (rep :: Type)
Opaque :: val -> Opaque val (rep :: Type)
[unOpaque] :: Opaque val (rep :: Type) -> val

-- | For unlifting from the <a>Constant</a> constructor when the stored
--   value is of a monomorphic built-in type
--   
--   The <tt>rep</tt> parameter specifies how the type looks on the PLC
--   side (i.e. just like with <tt>Opaque val rep</tt>).
newtype SomeConstant uni (rep :: Type)
SomeConstant :: Some (ValueOf uni) -> SomeConstant uni (rep :: Type)
[unSomeConstant] :: SomeConstant uni (rep :: Type) -> Some (ValueOf uni)

-- | Representation of a type variable: its name and unique and an implicit
--   kind.
data TyNameRep (kind :: Type)
TyNameRep :: Symbol -> Nat -> TyNameRep (kind :: Type)

-- | Representation of an intrinsically-kinded type variable: a name.
data family TyVarRep (name :: TyNameRep kind) :: kind

-- | Representation of an intrinsically-kinded type application: a function
--   and an argument.
data family TyAppRep (fun :: dom -> cod) (arg :: dom) :: cod

-- | Representation of of an intrinsically-kinded universal quantifier: a
--   bound name and a body.
data family TyForallRep (name :: TyNameRep kind) (a :: Type) :: Type

-- | Turn a list of Haskell types <tt>args</tt> into a functional type
--   ending in <tt>res</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; :set -XDataKinds
--   
--   &gt;&gt;&gt; :kind! FoldArgs [(), Bool] Integer
--   FoldArgs [(), Bool] Integer :: *
--   = () -&gt; Bool -&gt; Integer
--   </pre>
type family FoldArgs args res

-- | The meaning of a built-in function consists of its type represented as
--   a <a>TypeScheme</a>, its Haskell denotation and a costing function.
--   
--   The <a>TypeScheme</a> of a built-in function is used for example for
--   
--   <ol>
--   <li>computing the PLC type of the function to be used during type
--   checking</li>
--   <li>getting arity information</li>
--   <li>generating arbitrary values to apply the function to in tests</li>
--   </ol>
--   
--   The denotation is lazy, so that we don't need to worry about a builtin
--   being bottom (happens in tests). The production path is not affected
--   by that, since only runtime denotations are used for evaluation.
data BuiltinMeaning val cost
BuiltinMeaning :: TypeScheme val args res -> ~FoldArgs args res -> (cost -> BuiltinRuntime val) -> BuiltinMeaning val cost

-- | Constraints available when defining a built-in function.
type HasMeaningIn uni val = (Typeable val, ExMemoryUsage val, HasConstantIn uni val)

-- | A type class for "each function from a set of built-in functions has a
--   <a>BuiltinMeaning</a>".
class (Typeable uni, Typeable fun, Bounded fun, Enum fun, Ix fun, Default (BuiltinVersion fun)) => ToBuiltinMeaning uni fun where {
    
    -- | The <tt>cost</tt> part of <a>BuiltinMeaning</a>.
    type CostingPart uni fun;
    
    -- | See Note [Versioned builtins]
    data BuiltinVersion fun;
}

-- | Get the <a>BuiltinMeaning</a> of a built-in function.
toBuiltinMeaning :: (ToBuiltinMeaning uni fun, HasMeaningIn uni val) => BuiltinVersion fun -> fun -> BuiltinMeaning val (CostingPart uni fun)

-- | Get the type of a built-in function.
typeOfBuiltinFunction :: forall uni fun. ToBuiltinMeaning uni fun => BuiltinVersion fun -> fun -> Type TyName uni ()

-- | Chop a function type to get a list of its argument types.
type family GetArgs a

-- | A class that allows us to derive a monotype for a builtin. We could've
--   computed the runtime denotation from the <a>TypeScheme</a> and the
--   denotation of the builtin, but not statically (due to unfolding not
--   working for recursive functions and <a>TypeScheme</a> being recursive,
--   i.e. requiring the conversion function to be recursive), and so it
--   would cause us to retain a lot of evaluation-irrelevant stuff in the
--   constructors of <a>BuiltinRuntime</a>, which has to make evaluation
--   slower (we didn't check) and certainly makes the generated Core much
--   harder to read. Technically speaking, we could get a
--   <tt>RuntimeScheme</tt> from the <a>TypeScheme</a> and the denotation
--   statically if we changed the definition of <a>TypeScheme</a> and made
--   it a singleton, but then the conversion function would have to become
--   a class anyway and we'd just replicate what we have here, except in a
--   much more complicated way.
class KnownMonotype val args res
knownMonotype :: KnownMonotype val args res => TypeScheme val args res

-- | Convert the denotation of a builtin to its runtime counterpart . The
--   argument is in <a>ReadKnownM</a>, because that's what deferred
--   unlifting amounts to: passing the action returning the builtin
--   application around until full saturation, which is when the action
--   actually gets run.
toMonoF :: KnownMonotype val args res => ReadKnownM (FoldArgs args res, FoldArgs args ExBudget) -> BuiltinRuntime val

-- | A class that allows us to derive a polytype for a builtin.
class KnownMonotype val args res => KnownPolytype (binds :: [Some TyNameRep]) val args res
knownPolytype :: KnownPolytype binds val args res => TypeScheme val args res

-- | Convert the denotation of a builtin to its runtime counterpart. The
--   argument is in <a>ReadKnownM</a>, because that's what we need to do:
--   passing the action returning the builtin application around until full
--   saturation, which is when the action actually gets run.
toPolyF :: KnownPolytype binds val args res => ReadKnownM (FoldArgs args res, FoldArgs args ExBudget) -> BuiltinRuntime val

-- | Ensure a built-in function is not nullary and throw a nice error
--   otherwise.
type family ThrowOnBothEmpty binds args isBuiltin a

-- | A function turned into a type class with exactly one fully general
--   instance. We can't package up the constraints of
--   <a>makeBuiltinMeaning</a> (see the instance) into a type or class
--   synonym, because they contain a bunch of variables defined by
--   <tt>~</tt> or determined via functional dependencies and neither class
--   nor type definitions can handle that (see
--   <a>https://gitlab.haskell.org/ghc/ghc/-/issues/7100)</a>. Inlining
--   three lines of constraints whenever we need to call
--   <a>makeBuiltinMeaning</a> over a non-concrete type is a bad option and
--   this abstraction is free anyway, hence its existence.
--   
--   The <tt>a</tt> type variable goes first, because
--   <tt>makeBuiltinMeaning @A</tt> is a common pattern.
class MakeBuiltinMeaning a val

-- | Construct the meaning for a built-in function by automatically
--   deriving its <a>TypeScheme</a>, given
--   
--   <ol>
--   <li>the denotation of the builtin</li>
--   <li>an uninstantiated costing function</li>
--   </ol>
makeBuiltinMeaning :: MakeBuiltinMeaning a val => a -> (cost -> FoldArgs (GetArgs a) ExBudget) -> BuiltinMeaning val cost

-- | Convert a <a>BuiltinMeaning</a> to a <a>BuiltinRuntime</a> given a
--   cost model.
toBuiltinRuntime :: cost -> BuiltinMeaning val cost -> BuiltinRuntime val

-- | Calculate runtime info for all built-in functions given denotations of
--   builtins, and a cost model.
toBuiltinsRuntime :: (cost ~ CostingPart uni fun, ToBuiltinMeaning uni fun, HasMeaningIn uni val) => BuiltinVersion fun -> cost -> BuiltinsRuntime fun val

-- | Representation of a type variable: its name and unique and an implicit
--   kind.
data TyNameRep (kind :: Type)
TyNameRep :: Symbol -> Nat -> TyNameRep (kind :: Type)

-- | Representation of an intrinsically-kinded type variable: a name.
data family TyVarRep (name :: TyNameRep kind) :: kind

-- | Representation of an intrinsically-kinded type application: a function
--   and an argument.
data family TyAppRep (fun :: dom -> cod) (arg :: dom) :: cod

-- | Representation of of an intrinsically-kinded universal quantifier: a
--   bound name and a body.
data family TyForallRep (name :: TyNameRep kind) (a :: Type) :: Type

-- | The kind of holes.
data Hole

-- | A hole in the Rep context.
data family RepHole x

-- | A hole in the Type context.
data family TypeHole a

-- | A constraint for "<tt>a</tt> is a <a>KnownTypeAst</a> by means of
--   being included in <tt>uni</tt>".
type KnownBuiltinTypeAst uni a = KnownTypeAst uni (ElaborateBuiltin a)
class KnownTypeAst uni x where {
    
    -- | Whether <tt>x</tt> is a built-in type.
    type IsBuiltin x :: Bool;
    
    -- | Return every part of the type that can be a to-be-instantiated type
    --   variable. For example, in <tt>Integer</tt> there's no such types and
    --   in <tt>(a, b)</tt> it's the two arguments (<tt>a</tt> and <tt>b</tt>)
    --   and the same applies to <tt>a -&gt; b</tt> (to mention a type that is
    --   not built-in).
    type ToHoles x :: [Hole];
    
    -- | Collect all unique variables (a variable consists of a textual name, a
    --   unique and a kind) in an <tt>a</tt>.
    type ToBinds x :: [Some TyNameRep];
    type IsBuiltin x = IsBuiltin (ElaborateBuiltin x);
    type ToHoles x = ToHoles (ElaborateBuiltin x);
    type ToBinds x = ToBinds (ElaborateBuiltin x);
}

-- | The type representing <tt>a</tt> used on the PLC side.
toTypeAst :: KnownTypeAst uni x => proxy x -> Type TyName uni ()

-- | The type representing <tt>a</tt> used on the PLC side.
toTypeAst :: (KnownTypeAst uni x, KnownBuiltinTypeAst uni x) => proxy x -> Type TyName uni ()

-- | Delete all <tt>x</tt>s from a list.
type family Delete x xs :: [a]

-- | Delete all elements appearing in the first list from the second one
--   and concatenate the lists.
type family Merge xs ys :: [a]

-- | The type of errors that <tt>readKnown</tt> and <tt>makeKnown</tt> can
--   return.
data KnownTypeError

-- | Attach a <tt>cause</tt> to a <a>KnownTypeError</a> and throw that.
--   Note that an evaluator might require the cause to be computed lazily
--   for best performance on the happy path, hence this function must not
--   force its first argument. TODO: wrap <tt>cause</tt> in <tt>Lazy</tt>
--   once we have it.
throwKnownTypeErrorWithCause :: (MonadError (ErrorWithCause err cause) m, AsUnliftingError err, AsEvaluationFailure err) => cause -> KnownTypeError -> m void

-- | A constraint for "<tt>a</tt> is a <a>ReadKnownIn</a> and
--   <a>MakeKnownIn</a> by means of being included in <tt>uni</tt>".
type KnownBuiltinTypeIn uni val a = (HasConstantIn uni val, Pretty (SomeTypeIn uni), GEq uni, uni `Contains` a)

-- | A constraint for "<tt>a</tt> is a <a>ReadKnownIn</a> and
--   <a>MakeKnownIn</a> by means of being included in <tt>UniOf term</tt>".
type KnownBuiltinType val a = KnownBuiltinTypeIn (UniOf val) val a

-- | The monad that <a>makeKnown</a> runs in. Equivalent to <tt>ExceptT
--   KnownTypeError Emitter</tt>, except optimized in two ways:
--   
--   <ol>
--   <li>everything is strict</li>
--   <li>has the <a>MakeKnownSuccess</a> constructor that is used for
--   returning a value with no logs attached, which is the most common case
--   for us, so it helps a lot not to construct and deconstruct a redundant
--   tuple</li>
--   </ol>
--   
--   Moving from <tt>ExceptT KnownTypeError Emitter</tt> to this data type
--   gave us a speedup of 8% of total evaluation time.
--   
--   Logs are represented as a <a>DList</a>, because we don't particularly
--   care about the efficiency of logging, since there's no logging on the
--   chain and builtins don't emit much anyway. Otherwise we'd have to use
--   <tt>text-builder</tt> or <tt>text-builder-linear</tt> or something of
--   this sort.
data MakeKnownM a
MakeKnownFailure :: DList Text -> KnownTypeError -> MakeKnownM a
MakeKnownSuccess :: a -> MakeKnownM a
MakeKnownSuccessWithLogs :: DList Text -> a -> MakeKnownM a

-- | The monad that <a>readKnown</a> runs in.
type ReadKnownM = Either KnownTypeError

-- | Lift a <a>ReadKnownM</a> computation into <a>MakeKnownM</a>.
liftReadKnownM :: ReadKnownM a -> MakeKnownM a

-- | Convert a constant embedded into a PLC term to the corresponding
--   Haskell value.
readKnownConstant :: forall val a. KnownBuiltinType val a => val -> ReadKnownM a
class uni ~ UniOf val => MakeKnownIn uni val a

-- | Convert a Haskell value to the corresponding PLC val. The inverse of
--   <a>readKnown</a>.
makeKnown :: MakeKnownIn uni val a => a -> MakeKnownM val

-- | Convert a Haskell value to the corresponding PLC val. The inverse of
--   <a>readKnown</a>.
makeKnown :: (MakeKnownIn uni val a, KnownBuiltinType val a) => a -> MakeKnownM val
type MakeKnown val = MakeKnownIn (UniOf val) val
class uni ~ UniOf val => ReadKnownIn uni val a

-- | Convert a PLC val to the corresponding Haskell value. The inverse of
--   <a>makeKnown</a>.
readKnown :: ReadKnownIn uni val a => val -> ReadKnownM a

-- | Convert a PLC val to the corresponding Haskell value. The inverse of
--   <a>makeKnown</a>.
readKnown :: (ReadKnownIn uni val a, KnownBuiltinType val a) => val -> ReadKnownM a
type ReadKnown val = ReadKnownIn (UniOf val) val

-- | Same as <a>makeKnown</a>, but allows for neither emitting nor storing
--   the cause of a failure.
makeKnownOrFail :: MakeKnownIn uni val a => a -> EvaluationResult val

-- | Same as <a>readKnown</a>, but the cause of a potential failure is the
--   provided term itself.
readKnownSelf :: (ReadKnown val a, AsUnliftingError err, AsEvaluationFailure err) => val -> Either (ErrorWithCause err val) a

-- | The type of singletonized Haskell kinds representing Plutus kinds.
--   Indexing by a Haskell kind allows us to avoid an <a>error</a> call in
--   the <a>ToKind</a> instance of <tt>DefaultUni</tt> and not worry about
--   proxies in the type of <a>knownKind</a>.
data SingKind k
[SingType] :: SingKind Type
[SingKindArrow] :: SingKind k -> SingKind l -> SingKind (k -> l)
infixr 5 `SingKindArrow`

-- | Feed the <a>SingKind</a> version of the given <a>Kind</a> to the given
--   continuation.
withSingKind :: Kind ann -> (forall k. SingKind k -> r) -> r

-- | For reifying Haskell kinds representing Plutus kinds at the term
--   level.
class KnownKind k
knownKind :: KnownKind k => SingKind k

-- | Satisfy the <a>KnownKind</a> constraint of a continuation using the
--   given <a>SingKind</a>.
bringKnownKind :: SingKind k -> (KnownKind k => r) -> r
withKnownKind :: Kind ann -> (forall k. KnownKind k => Proxy k -> r) -> r

-- | For computing the Plutus kind of a built-in type. See
--   <a>kindOfBuiltinType</a>.
class ToKind (uni :: Type -> Type)

-- | Reify the kind of a type from the universe at the term level.
toSingKind :: ToKind uni => uni (Esc (a :: k)) -> SingKind k

-- | Convert a reified Haskell kind to a Plutus kind.
demoteKind :: SingKind k -> Kind ()

-- | Compute the kind of a type from a universe.
kindOfBuiltinType :: ToKind uni => uni (Esc a) -> Kind ()

-- | The type of errors that <tt>readKnown</tt> and <tt>makeKnown</tt> can
--   return.
data KnownTypeError
KnownTypeUnliftingError :: !UnliftingError -> KnownTypeError
KnownTypeEvaluationFailure :: KnownTypeError
throwNotAConstant :: MonadError KnownTypeError m => m void

-- | Ensures that <tt>term</tt> has a <a>Constant</a>-like constructor to
--   lift values to and unlift values from.
class HasConstant term

-- | Unwrap from a <a>Constant</a>-like constructor throwing an
--   <a>UnliftingError</a> if the provided <tt>term</tt> is not a wrapped
--   Haskell value.
asConstant :: HasConstant term => term -> Either KnownTypeError (Some (ValueOf (UniOf term)))

-- | Wrap a Haskell value as a <tt>term</tt>.
fromConstant :: HasConstant term => Some (ValueOf (UniOf term)) -> term

-- | Ensures that <tt>term</tt> has a <a>Constant</a>-like constructor to
--   lift values to and unlift values from and connects <tt>term</tt> and
--   its <tt>uni</tt>.
type HasConstantIn uni term = (UniOf term ~ uni, HasConstant term)

-- | Wrap a Haskell value (given its explicit type tag) as a <tt>term</tt>.
fromValueOf :: HasConstant term => UniOf term (Esc a) -> a -> term

-- | Wrap a Haskell value (provided its type is in the universe) as a
--   <tt>term</tt>.
fromValue :: (HasConstant term, UniOf term `Includes` a) => a -> term


-- | The internal module of the type checker that defines the actual
--   algorithms, but not the user-facing API.
module PlutusCore.TypeCheck.Internal

-- | Configuration of the kind checker.
newtype KindCheckConfig
KindCheckConfig :: HandleNameMismatches -> KindCheckConfig
[_kccHandleNameMismatches] :: KindCheckConfig -> HandleNameMismatches

-- | Decides what to do upon encountering a variable whose name doesn't
--   match the name of the variable with the same unique that is currently
--   in the scope. Consider for example this type:
--   
--   (a_0 :: *) (b_0 :: *) -&gt; a_0
--   
--   here <tt>b_0</tt> shadows <tt>a_0</tt> and so any variable having the
--   <tt>0</tt>th unique within the body of the lambda references
--   <tt>b_0</tt>, but we have <tt>a_0</tt> there and so there's a name
--   mismatch. Technically, it's not a type error to have a name mismatch,
--   because uniques are the single source of truth, however a name
--   mismatch is deeply suspicious and is likely to be caused by a bug
--   somewhere.
--   
--   We perform the same check for term-level variables too.
data HandleNameMismatches

-- | Throw upon encountering such a name.
DetectNameMismatches :: HandleNameMismatches

-- | Ignore it.
IgnoreNameMismatches :: HandleNameMismatches
type VarTypes uni = UniqueMap TermUnique (Named (Dupable (Normalized (Type TyName uni ()))))
type TyVarKinds = UniqueMap TypeUnique (Named (Kind ()))

-- | Mapping from <a>Builtin</a>s to their <a>Normalized</a> <a>Kind</a>s.
newtype BuiltinTypes uni fun
BuiltinTypes :: Array fun (Dupable (Normalized (Type TyName uni ()))) -> BuiltinTypes uni fun
[unBuiltinTypes] :: BuiltinTypes uni fun -> Array fun (Dupable (Normalized (Type TyName uni ())))

-- | The environment that the type checker runs in.
data TypeCheckEnv uni fun cfg
TypeCheckEnv :: cfg -> TyVarKinds -> VarTypes uni -> TypeCheckEnv uni fun cfg
[_tceTypeCheckConfig] :: TypeCheckEnv uni fun cfg -> cfg
[_tceTyVarKinds] :: TypeCheckEnv uni fun cfg -> TyVarKinds
[_tceVarTypes] :: TypeCheckEnv uni fun cfg -> VarTypes uni

-- | We want <a>HasKindCheckConfig</a> to be a superclass of
--   <a>HasTypeCheckConfig</a> for being able to seamlessly call the kind
--   checker from the type checker, hence we're rolling out our own
--   <a>makeClassy</a> here just to add the constraint.
class HasKindCheckConfig cfg => HasTypeCheckConfig cfg uni fun | cfg -> uni fun
typeCheckConfig :: HasTypeCheckConfig cfg uni fun => Lens' cfg (TypeCheckConfig uni fun)
tccKindCheckConfig :: HasTypeCheckConfig cfg uni fun => Lens' cfg KindCheckConfig
tccBuiltinTypes :: HasTypeCheckConfig cfg uni fun => Lens' cfg (BuiltinTypes uni fun)

-- | Configuration of the type checker.
data TypeCheckConfig uni fun
TypeCheckConfig :: KindCheckConfig -> BuiltinTypes uni fun -> TypeCheckConfig uni fun
[_tccKindCheckConfig] :: TypeCheckConfig uni fun -> KindCheckConfig
[_tccBuiltinTypes] :: TypeCheckConfig uni fun -> BuiltinTypes uni fun
class HasKindCheckConfig c_a5KTc
kindCheckConfig :: HasKindCheckConfig c_a5KTc => Lens' c_a5KTc KindCheckConfig
kccHandleNameMismatches :: HasKindCheckConfig c_a5KTc => Lens' c_a5KTc HandleNameMismatches

-- | The constraints that are required for type checking Plutus Core.
type MonadTypeCheckPlc err uni fun ann m = MonadTypeCheck err (Term TyName Name uni fun ()) uni fun ann m

-- | The general constraints that are required for type checking a Plutus
--   AST.
type MonadTypeCheck err term uni fun ann m = (MonadKindCheck err term uni fun ann m, MonadNormalizeType uni m, GEq uni, Ix fun)

-- | The constraints that are required for kind checking.
type MonadKindCheck err term uni fun ann m = (MonadError err m, AsTypeError err term uni fun ann, ToKind uni)

-- | The type checking monad that the type checker runs in. In contains a
--   <a>TypeCheckEnv</a> and allows to throw <a>TypeError</a>s.
type TypeCheckT uni fun cfg m = ReaderT (TypeCheckEnv uni fun cfg) m
tceTyVarKinds :: forall uni_a5KTu fun_a5KTv cfg_a5KTw fun_a5KZV. Lens (TypeCheckEnv uni_a5KTu fun_a5KTv cfg_a5KTw) (TypeCheckEnv uni_a5KTu fun_a5KZV cfg_a5KTw) TyVarKinds TyVarKinds
tceTypeCheckConfig :: forall uni_a5KTu fun_a5KTv cfg_a5KTw fun_a5KZW cfg_a5KZX. Lens (TypeCheckEnv uni_a5KTu fun_a5KTv cfg_a5KTw) (TypeCheckEnv uni_a5KTu fun_a5KZW cfg_a5KZX) cfg_a5KTw cfg_a5KZX
tceVarTypes :: forall uni_a5KTu fun_a5KTv cfg_a5KTw uni_a5KZY fun_a5KZZ. Lens (TypeCheckEnv uni_a5KTu fun_a5KTv cfg_a5KTw) (TypeCheckEnv uni_a5KZY fun_a5KZZ cfg_a5KTw) (VarTypes uni_a5KTu) (VarTypes uni_a5KZY)

-- | Run a <tt>TypeCheckM</tt> computation by supplying a
--   <a>TypeCheckConfig</a> to it.
--   
--   Used for both type and kind checking, because we need to do kind
--   checking during type checking and so it makes sense to keep a single
--   monad. However type checking requires a <a>TypeCheckConfig</a>, while
--   kind checking doesn't, hence we keep the kind checker fully
--   polymorphic over the type of config, so that the kinder checker can be
--   run with an empty config (such as <tt>()</tt>) and access to a
--   <a>TypeCheckConfig</a> is not needed.
runTypeCheckM :: cfg -> TypeCheckT uni fun cfg m a -> m a

-- | Extend the context of a <tt>TypeCheckM</tt> computation with a kinded
--   variable.
withTyVar :: TyName -> Kind () -> TypeCheckT uni fun cfg m a -> TypeCheckT uni fun cfg m a

-- | Look up the type of a built-in function.
lookupBuiltinM :: (MonadTypeCheck err term uni fun ann m, HasTypeCheckConfig cfg uni fun) => ann -> fun -> TypeCheckT uni fun cfg m (Normalized (Type TyName uni ()))

-- | Extend the context of a <tt>TypeCheckM</tt> computation with a typed
--   variable.
withVar :: Name -> Normalized (Type TyName uni ()) -> TypeCheckT uni fun cfg m a -> TypeCheckT uni fun cfg m a

-- | Look up a type variable in the current context.
lookupTyVarM :: (MonadKindCheck err term uni fun ann m, HasKindCheckConfig cfg) => ann -> TyName -> TypeCheckT uni fun cfg m (Kind ())

-- | Look up a term variable in the current context.
lookupVarM :: (MonadTypeCheck err term uni fun ann m, HasTypeCheckConfig cfg uni fun) => ann -> Name -> TypeCheckT uni fun cfg m (Normalized (Type TyName uni ()))
dummyUnique :: Unique
dummyTyName :: TyName
dummyKind :: Kind ()
dummyType :: Type TyName uni ()

-- | Normalize a <a>Kind</a>.
normalizeTypeM :: MonadNormalizeType uni m => Type TyName uni ann -> TypeCheckT uni fun cfg m (Normalized (Type TyName uni ann))

-- | Substitute a type for a variable in a type and normalize the result.
substNormalizeTypeM :: MonadNormalizeType uni m => Normalized (Type TyName uni ()) -> TyName -> Type TyName uni () -> TypeCheckT uni fun cfg m (Normalized (Type TyName uni ()))

-- | Infer the kind of a type.
inferKindM :: (MonadKindCheck err term uni fun ann m, HasKindCheckConfig cfg) => Type TyName uni ann -> TypeCheckT uni fun cfg m (Kind ())

-- | Check a <a>Kind</a> against a <a>Kind</a>.
checkKindM :: (MonadKindCheck err term uni fun ann m, HasKindCheckConfig cfg) => ann -> Type TyName uni ann -> Kind () -> TypeCheckT uni fun cfg m ()

-- | <pre>
--   unfoldIFixOf pat arg k = NORM (vPat ((a :: k) -&gt; ifix vPat a) arg)
--   </pre>
unfoldIFixOf :: MonadNormalizeType uni m => Normalized (Type TyName uni ()) -> Normalized (Type TyName uni ()) -> Kind () -> TypeCheckT uni fun cfg m (Normalized (Type TyName uni ()))

-- | Synthesize the type of a term, returning a normalized type.
inferTypeM :: (MonadTypeCheckPlc err uni fun ann m, HasTypeCheckConfig cfg uni fun) => Term TyName Name uni fun ann -> TypeCheckT uni fun cfg m (Normalized (Type TyName uni ()))

-- | Check a <a>Term</a> against a <tt>NormalizedType</tt>.
checkTypeM :: (MonadTypeCheckPlc err uni fun ann m, HasTypeCheckConfig cfg uni fun) => ann -> Term TyName Name uni fun ann -> Normalized (Type TyName uni ()) -> TypeCheckT uni fun cfg m ()

-- | The constraints that type normalization requires.
type MonadNormalizeType uni m = (MonadQuote m, HasUniApply uni)
instance PlutusCore.TypeCheck.Internal.HasKindCheckConfig (PlutusCore.TypeCheck.Internal.TypeCheckConfig uni fun)
instance PlutusCore.TypeCheck.Internal.HasTypeCheckConfig (PlutusCore.TypeCheck.Internal.TypeCheckConfig uni fun) uni fun
instance PlutusCore.TypeCheck.Internal.HasKindCheckConfig PlutusCore.TypeCheck.Internal.KindCheckConfig
instance GHC.Classes.Eq PlutusCore.TypeCheck.Internal.HandleNameMismatches
instance GHC.Show.Show PlutusCore.TypeCheck.Internal.HandleNameMismatches

module PlutusCore.Evaluation.Machine.MachineParameters

-- | We need to account for the costs of evaluator steps and also built-in
--   function evaluation. The models for these have different structures
--   and are used in different parts of the code, so inside the valuator we
--   pass separate objects about most of the time . It's convenient for
--   clients of the evaluator to only have to worry about a single object,
--   so the CostModel type bundles the two together. We could conceivably
--   have different evaluators with different internal costs, so we keep
--   the machine costs abstract. The model for Cek machine steps is in
--   UntypedPlutusCore.Evaluation.Machine.Cek.CekMachineCosts.
data CostModel machinecosts builtincosts
CostModel :: machinecosts -> builtincosts -> CostModel machinecosts builtincosts
[_machineCostModel] :: CostModel machinecosts builtincosts -> machinecosts
[_builtinCostModel] :: CostModel machinecosts builtincosts -> builtincosts
machineCostModel :: forall machinecosts_a5PmB builtincosts_a5PmC machinecosts_a5PpI. Lens (CostModel machinecosts_a5PmB builtincosts_a5PmC) (CostModel machinecosts_a5PpI builtincosts_a5PmC) machinecosts_a5PmB machinecosts_a5PpI
builtinCostModel :: forall machinecosts_a5PmB builtincosts_a5PmC builtincosts_a5PpH. Lens (CostModel machinecosts_a5PmB builtincosts_a5PmC) (CostModel machinecosts_a5PmB builtincosts_a5PpH) builtincosts_a5PmC builtincosts_a5PpH

-- | At execution time we need a <a>BuiltinsRuntime</a> object which
--   includes both the cost model for builtins and their denotations. This
--   bundles one of those together with the cost model for evaluator steps.
--   The <tt>term</tt> type will be CekValue when we're using this with the
--   CEK machine.
data MachineParameters machinecosts fun val
MachineParameters :: machinecosts -> BuiltinsRuntime fun val -> MachineParameters machinecosts fun val
[machineCosts] :: MachineParameters machinecosts fun val -> machinecosts
[builtinsRuntime] :: MachineParameters machinecosts fun val -> BuiltinsRuntime fun val

-- | This just uses <a>toBuiltinsRuntime</a> function to convert a
--   BuiltinCostModel to a BuiltinsRuntime.
mkMachineParameters :: (CostingPart uni fun ~ builtincosts, HasMeaningIn uni val, ToBuiltinMeaning uni fun) => BuiltinVersion fun -> CostModel machinecosts builtincosts -> MachineParameters machinecosts fun val
instance (NoThunks.Class.NoThunks machinecosts, GHC.Enum.Bounded fun, GHC.Enum.Enum fun) => NoThunks.Class.NoThunks (PlutusCore.Evaluation.Machine.MachineParameters.MachineParameters machinecosts fun val)
instance (Control.DeepSeq.NFData machinecosts, GHC.Enum.Bounded fun, GHC.Enum.Enum fun) => Control.DeepSeq.NFData (PlutusCore.Evaluation.Machine.MachineParameters.MachineParameters machinecosts fun val)
instance GHC.Generics.Generic (PlutusCore.Evaluation.Machine.MachineParameters.MachineParameters machinecosts fun val)
instance (GHC.Show.Show machinecosts, GHC.Show.Show builtincosts) => GHC.Show.Show (PlutusCore.Evaluation.Machine.MachineParameters.CostModel machinecosts builtincosts)
instance (GHC.Classes.Eq machinecosts, GHC.Classes.Eq builtincosts) => GHC.Classes.Eq (PlutusCore.Evaluation.Machine.MachineParameters.CostModel machinecosts builtincosts)


-- | The CK machine.
module PlutusCore.Evaluation.Machine.Ck

-- | The parameterized type of results various evaluation engines return.
--   On the PLC side this becomes (via <tt>makeKnown</tt>) either a call to
--   <tt>Error</tt> or a value of the PLC counterpart of type <tt>a</tt>.
data EvaluationResult a
EvaluationSuccess :: !a -> EvaluationResult a
EvaluationFailure :: EvaluationResult a

-- | The CK machine-specific <a>EvaluationException</a>.
type CkEvaluationException uni fun = EvaluationException CkUserError (MachineError fun) (Term TyName Name uni fun ())
type CkM uni fun s = ReaderT (CkEnv uni fun s) (ExceptT (CkEvaluationException uni fun) (ST s))
data CkValue uni fun

-- | Turn any <a>UserEvaluationError</a> into an <a>EvaluationFailure</a>.
extractEvaluationResult :: Either (EvaluationException user internal term) a -> Either (ErrorWithCause internal term) (EvaluationResult a)
runCk :: BuiltinsRuntime fun (CkValue uni fun) -> Bool -> Term TyName Name uni fun () -> (Either (CkEvaluationException uni fun) (Term TyName Name uni fun ()), [Text])

-- | Evaluate a term using the CK machine with logging enabled.
evaluateCk :: BuiltinsRuntime fun (CkValue uni fun) -> Term TyName Name uni fun () -> (Either (CkEvaluationException uni fun) (Term TyName Name uni fun ()), [Text])

-- | Evaluate a term using the CK machine with logging disabled.
evaluateCkNoEmit :: BuiltinsRuntime fun (CkValue uni fun) -> Term TyName Name uni fun () -> Either (CkEvaluationException uni fun) (Term TyName Name uni fun ())

-- | Evaluate a term using the CK machine with logging enabled. May throw a
--   <a>CkEvaluationException</a>.
unsafeEvaluateCk :: (Pretty (SomeTypeIn uni), Closed uni, Typeable uni, Typeable fun, uni `Everywhere` PrettyConst, Pretty fun) => BuiltinsRuntime fun (CkValue uni fun) -> Term TyName Name uni fun () -> (EvaluationResult (Term TyName Name uni fun ()), [Text])

-- | Evaluate a term using the CK machine with logging disabled. May throw
--   a <a>CkEvaluationException</a>.
unsafeEvaluateCkNoEmit :: (Pretty (SomeTypeIn uni), Closed uni, Typeable uni, Typeable fun, uni `Everywhere` PrettyConst, Pretty fun) => BuiltinsRuntime fun (CkValue uni fun) -> Term TyName Name uni fun () -> EvaluationResult (Term TyName Name uni fun ())

-- | Unlift a value using the CK machine.
readKnownCk :: ReadKnown (Term TyName Name uni fun ()) a => BuiltinsRuntime fun (CkValue uni fun) -> Term TyName Name uni fun () -> Either (CkEvaluationException uni fun) a
instance (Universe.Core.Everywhere uni GHC.Show.Show, Data.GADT.Internal.GShow uni, Universe.Core.Closed uni, GHC.Show.Show fun) => GHC.Show.Show (PlutusCore.Evaluation.Machine.Ck.CkValue uni fun)
instance Control.DeepSeq.NFData PlutusCore.Evaluation.Machine.Ck.CkUserError
instance GHC.Generics.Generic PlutusCore.Evaluation.Machine.Ck.CkUserError
instance GHC.Classes.Eq PlutusCore.Evaluation.Machine.Ck.CkUserError
instance GHC.Show.Show PlutusCore.Evaluation.Machine.Ck.CkUserError
instance PlutusCore.Evaluation.Result.AsEvaluationFailure PlutusCore.Evaluation.Machine.Ck.CkUserError
instance Prettyprinter.Internal.Pretty PlutusCore.Evaluation.Machine.Ck.CkUserError
instance GHC.Show.Show (PlutusCore.Builtin.Runtime.BuiltinRuntime (PlutusCore.Evaluation.Machine.Ck.CkValue uni fun))
instance (Universe.Core.Closed uni, Prettyprinter.Internal.Pretty (Universe.Core.SomeTypeIn uni), Universe.Core.Everywhere uni PlutusCore.Pretty.PrettyConst.PrettyConst, Prettyprinter.Internal.Pretty fun) => Text.PrettyBy.Internal.PrettyBy PlutusCore.Pretty.Plc.PrettyConfigPlc (PlutusCore.Evaluation.Machine.Ck.CkValue uni fun)
instance PlutusCore.Builtin.HasConstant.HasConstant (PlutusCore.Evaluation.Machine.Ck.CkValue uni fun)
instance PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage (PlutusCore.Evaluation.Machine.Ck.CkValue uni fun)


-- | <tt>nat</tt> and related functions.
module PlutusCore.StdLib.Data.Nat

-- | <tt>Nat</tt> as a PLC type.
--   
--   <pre>
--   fix \(nat :: *) -&gt; all r. r -&gt; (nat -&gt; r) -&gt; r
--   </pre>
natData :: RecursiveType uni fun ()
natTy :: Type TyName uni ()

-- | '0' as a PLC term.
--   
--   <pre>
--   wrapNat [] /\(r :: *) -&gt; \(z : r) (f : nat -&gt; r) -&gt; z
--   </pre>
zero :: TermLike term TyName Name uni fun => term ()

-- | <a>succ</a> as a PLC term.
--   
--   <pre>
--   \(n : nat) -&gt; wrapNat [] /\(r :: *) -&gt; \(z : r) (f : nat -&gt; r) -&gt; f n
--   </pre>
succ :: TermLike term TyName Name uni fun => term ()

-- | <tt>foldrNat</tt> as a PLC term.
--   
--   <pre>
--   /\(r :: *) -&gt; \(f : r -&gt; r) (z : r) -&gt;
--       fix {nat} {r} \(rec : nat -&gt; r) (n : nat) -&gt;
--           unwrap n {r} z \(n' : nat) -&gt; f (rec n')
--   </pre>
foldrNat :: TermLike term TyName Name uni fun => term ()

-- | <tt>foldNat</tt> as a PLC term.
--   
--   <pre>
--   /\(r :: *) -&gt; \(f : r -&gt; r) -&gt;
--       fix {r} {nat -&gt; r} \(rec : r -&gt; nat -&gt; r) (z : r) (n : nat) -&gt;
--           unwrap n {r} z (\(n' : nat) -&gt; rec (f z) n')
--   </pre>
foldNat :: TermLike term TyName Name uni fun => term ()

-- | Convert a <tt>nat</tt> to an <tt>integer</tt>.
--   
--   <pre>
--   foldNat {integer} (addInteger 1) 1
--   </pre>
natToInteger :: (TermLike term TyName Name uni DefaultFun, uni `Includes` Integer) => term ()


-- | Functions related to <tt>integer</tt>.
module PlutusCore.StdLib.Data.Integer
integer :: uni `Includes` Integer => Type tyname uni ()

-- | <tt>succ :: Integer -&gt; Integer</tt> as a PLC term.
--   
--   <pre>
--   \(i : integer) -&gt; addInteger i 1
--   </pre>
succInteger :: (TermLike term TyName Name uni DefaultFun, uni `Includes` Integer) => term ()


-- | <tt>boolean</tt> and related functions.
module PlutusCore.StdLib.Data.Bool

-- | <a>Bool</a> as a PLC type.
bool :: uni `Includes` Bool => Type TyName uni ()

-- | <a>True</a> as a PLC term.
true :: (TermLike term TyName Name uni fun, uni `Includes` Bool) => term ()

-- | <a>False</a> as a PLC term.
false :: (TermLike term TyName Name uni fun, uni `Includes` Bool) => term ()

-- | <tt>if_then_else_</tt> as a PLC term.
--   
--   <pre>
--   /\(A :: *) -&gt; \(b : Bool) (x y : () -&gt; A) -&gt; IfThenElse {() -&gt; A} b x y ()
--   </pre>
ifThenElse :: (TermLike term TyName Name uni DefaultFun, uni `Includes` Bool, uni `Includes` ()) => term ()


-- | <tt>list</tt> and related functions.
module PlutusCore.StdLib.Data.ScottList

-- | <tt>List</tt> as a PLC type.
--   
--   <pre>
--   fix \(list :: * -&gt; *) (a :: *) -&gt; all (r :: *). r -&gt; (a -&gt; list a -&gt; r) -&gt; r
--   </pre>
listData :: RecursiveType uni fun ()
listTy :: Type TyName uni ()

-- | '[]' as a PLC term.
--   
--   <pre>
--   /\(a :: *) -&gt; wrapList [a] /\(r :: *) -&gt; \(z : r) (f : a -&gt; list a -&gt; r) -&gt; z)
--   </pre>
nil :: TermLike term TyName Name uni fun => term ()

-- | <tt>(:)</tt> as a PLC term.
--   
--   <pre>
--   /\(a :: *) -&gt; \(x : a) (xs : list a) -&gt;
--       wrapList [a] /\(r :: *) -&gt; \(z : r) (f : a -&gt; list a -&gt; r) -&gt; f x xs
--   </pre>
cons :: TermLike term TyName Name uni fun => term ()

-- | <tt>foldrList</tt> as a PLC term.
--   
--   <pre>
--   /\(a :: *) (r :: *) -&gt; \(f : a -&gt; r -&gt; r) (z : r) -&gt;
--       fix {list a} {r} \(rec : list a -&gt; r) (xs : list a) -&gt;
--           unwrap xs {r} z \(x : a) (xs' : list a) -&gt; f x (rec xs')
--   </pre>
foldrList :: TermLike term TyName Name uni fun => term ()

-- | 'foldl'' as a PLC term.
--   
--   <pre>
--   /\(a :: *) (r :: *) -&gt; \(f : r -&gt; a -&gt; r) -&gt;
--       fix {r} {list a -&gt; r} \(rec : r -&gt; list a -&gt; r) (z : r) (xs : list a) -&gt;
--           unwrap xs {r} z \(x : a) (xs' : list a) -&gt; rec (f z x) xs'
--   </pre>
foldList :: TermLike term TyName Name uni fun => term ()

-- | <tt>map</tt> as a PLC term.
--   
--   <pre>
--   /\(a :: *) (b :: *) -&gt; \(f : a -&gt; b) -&gt;
--       foldrList {a} {list b} (\(x : a) -&gt; cons {b} (f x)) (nil {b})
--   </pre>
map :: TermLike term TyName Name uni fun => term ()

-- | <a>reverse</a> as a PLC term.
--   
--   <pre>
--   /\(a :: *) -&gt; \(xs : list a) -&gt;
--       foldList {a} {list a} (\(r : list a) (x : a) -&gt; cons {a} x r) (nil {a})
--   </pre>
reverse :: TermLike term TyName Name uni fun => term ()

-- | <a>enumFromTo</a> as a PLC term
--   
--   <pre>
--   \(n m : integer) -&gt;
--       fix {integer} {list (integer)}
--           (\(rec : integer -&gt; list (integer)) (n' : integer) -&gt;
--               ifThenElse {list (integer)}
--                   (lessThanEqualsInteger n' m)
--                   (cons {integer} n' (rec (succInteger n')))
--                   (nil {integer}))
--           n
--   </pre>
enumFromTo :: (TermLike term TyName Name uni DefaultFun, uni `Includes` Integer, uni `Includes` (), uni `Includes` Bool) => term ()

-- | <a>sum</a> as a PLC term.
--   
--   <pre>
--   foldList {integer} {integer} addInteger 0
--   </pre>
sum :: (TermLike term TyName Name uni DefaultFun, uni `Includes` Integer) => term ()
sumr :: (TermLike term TyName Name uni DefaultFun, uni `Includes` Integer) => term ()

-- | <a>product</a> as a PLC term.
--   
--   <pre>
--   foldList {integer} {integer} multiplyInteger 1
--   </pre>
product :: (TermLike term TyName Name uni DefaultFun, uni `Includes` Integer) => term ()


-- | Functions that generate Plutus Core terms from Haskell values and vice
--   versa.
module PlutusCore.StdLib.Meta

-- | Convert an <a>Integer</a> to a <tt>nat</tt>. TODO: convert PLC's
--   <tt>integer</tt> to <tt>nat</tt> instead.
metaIntegerToNat :: TermLike term TyName Name uni fun => Integer -> term ()

-- | Convert a Haskell <a>Either</a> to a PLC <tt>sum</tt>.
metaEitherToSum :: TermLike term TyName Name uni fun => Type TyName uni () -> Type TyName uni () -> Either (term ()) (term ()) -> term ()

-- | Convert a Haskell list of <a>Term</a>s to a PLC <tt>list</tt>.
metaListToScottList :: TermLike term TyName Name uni fun => Type TyName uni () -> [term ()] -> term ()


-- | In this module we define Church-encoded type-level natural numbers,
--   Church-encoded vectors and Scott-encoded vectors.
--   
--   See <tt><i>docs</i>fomega<i>gadts</i>ScottVec.agda</tt> for how
--   Scott-encoded vectors work.
module PlutusCore.Examples.Data.Vec

-- | <pre>
--   natK = (* -&gt; *) -&gt; * -&gt; *
--   </pre>
natK :: Kind ()

-- | <pre>
--   getEta n = \(f :: * -&gt; *) (z :: *) -&gt; n f z
--   </pre>
getEta :: Type TyName uni () -> Quote (Type TyName uni ())

-- | <pre>
--   zeroT = \(f :: * -&gt; *) (z :: *) -&gt; z
--   </pre>
zeroT :: Type TyName uni ()

-- | <pre>
--   succT = \(n : natK) (f :: * -&gt; *) (z :: *) -&gt; f (n f z)
--   </pre>
succT :: Type TyName uni ()

-- | <pre>
--   plusT = \(n : natK) (m : natK) (f :: * -&gt; *) (z :: *) -&gt; n f (m f z)
--   </pre>
plusT :: Type TyName uni ()

-- | <pre>
--   stepFun a r1 r2 = all (p :: natK). a -&gt; r1 p -&gt; r2 (succT p)
--   </pre>
getStepFun :: TyName -> Type TyName uni () -> TyName -> Quote (Type TyName uni ())

-- | <pre>
--   churchVec =
--       \(a :: *) (n :: natK) -&gt;
--           all (r :: natK -&gt; *). (all (p :: natK). a -&gt; r p -&gt; r (succT p)) -&gt; r zeroT -&gt; r n
--   </pre>
churchVec :: Type TyName uni ()

-- | <pre>
--   churchNil =
--       /\(a :: *) -&gt;
--           /\(r :: natK -&gt; *) -&gt; \(f : all (p :: natK). a -&gt; r p -&gt; r (succT p)) (z : r zeroT) -&gt;
--               z
--   </pre>
churchNil :: Term TyName Name uni fun ()

-- | <pre>
--   churchCons =
--       /\(a :: *) (n :: natK) -&gt; \(x : a) (xs : churchVec a n) -&gt;
--           /\(r :: natK -&gt; *) -&gt; \(f : all (p :: natK). a -&gt; r p -&gt; r (succT p)) (z : r zeroT) -&gt;
--               f {n} x (xs {r} f z)
--   </pre>
churchCons :: Term TyName Name uni fun ()

-- | <pre>
--   churchConcat =
--       /\(a :: *) (n :: natK) (m :: natK) -&gt; \(xs : churchVec a n) (ys : churchVec a m) -&gt;
--           /\(r :: natK -&gt; *) -&gt; \(f : all (p :: natK). a -&gt; r p -&gt; r (succT p)) (z : r zeroT) -&gt;
--               xs
--                   {\(p :: natK) -&gt; r (plusT p m)}
--                   (/\(p :: natK) -&gt; f {plusT p m})
--                   (ys {r} f z)
--   </pre>
churchConcat :: Term TyName Name uni fun ()

-- | <pre>
--   scottVecF =
--       \(a :: *) (rec :: natK -&gt; *) (n :: natK) -&gt;
--           all (r :: natK -&gt; *). (all (p :: natK). a -&gt; rec p -&gt; r (succT p)) -&gt; r zeroT -&gt; r n
--   </pre>
scottVecF :: Type TyName uni ()

-- | <pre>
--   scottVec = \(a :: *) (n :: natK) -&gt; ifix (scottVecF a) n
--   </pre>
scottVec :: Type TyName uni ()

-- | <pre>
--   scottNil =
--       /\(a :: *) -&gt;
--           iwrap (scottVecF a) zeroT
--               (/\(r :: natK -&gt; *) -&gt;
--                   \(f : all (p :: natK). a -&gt; scottVec a p -&gt; r (succT p)) (z : r zeroT) -&gt;
--                       z)
--   </pre>
scottNil :: Term TyName Name uni fun ()

-- | <pre>
--   scottCons =
--       /\(a :: *) (n :: natK) -&gt; \(x : a) (xs : scottVec a n) -&gt;
--           iwrap (scottVecF a) (succT n)
--               (/\(r :: natK -&gt; *) -&gt;
--                   \(f : all (p :: natK). a -&gt; scottVec a p -&gt; r (succT p)) (z : r zeroT) -&gt;
--                       f {n} x xs)
--   </pre>
scottCons :: Term TyName Name uni fun ()

-- | <pre>
--   scottHead =
--       /\(a :: *) (n :: natK) -&gt; (xs : scottVec a (suc n)) -&gt;
--           unwrap
--               xs
--               {\(p :: natK) -&gt; p (\(z :: *) -&gt; a) unit}
--               (/\(p :: natK) (x : a) (xs' : scottVec a p) -&gt; x)
--               unitval
--   </pre>
scottHead :: uni `Includes` () => Term TyName Name uni fun ()

-- | <pre>
--   scottSumHeadsOr0 =
--       /\(n :: natK) -&gt; (xs ys : scottVec integer n) -&gt;
--           unwrap
--               xs
--               {\(p :: natK) -&gt; (scottVec Integer n -&gt; scottVec integer p) -&gt; integer}
--               (/\(p :: natK) (x : integer) (xs' : scottVec integer p)
--                   \(coe : scottVec Integer n -&gt; scottVec integer (suc p)) -&gt;
--                       x + scottHead {integer} {p} (coe ys))
--               (\(coe : scottVec Integer n -&gt; scottVec integer zero) -&gt; 0)
--               (/\(xs' :: scottVec Integer n) -&gt; xs')
--   </pre>
scottSumHeadsOr0 :: (uni `Includes` Integer, uni `Includes` ()) => Term TyName Name uni DefaultFun ()

module PlutusCore.Default

-- | The universe used by default.
data DefaultUni a
[DefaultUniInteger] :: DefaultUni (Esc Integer)
[DefaultUniByteString] :: DefaultUni (Esc ByteString)
[DefaultUniString] :: DefaultUni (Esc Text)
[DefaultUniUnit] :: DefaultUni (Esc ())
[DefaultUniBool] :: DefaultUni (Esc Bool)
[DefaultUniProtoList] :: DefaultUni (Esc [])
[DefaultUniProtoPair] :: DefaultUni (Esc (,))
[DefaultUniApply] :: !DefaultUni (Esc f) -> !DefaultUni (Esc a) -> DefaultUni (Esc (f a))
[DefaultUniData] :: DefaultUni (Esc Data)
pattern DefaultUniList :: forall {a} {k1} {k2} {f :: k1 -> k2} {a1 :: k1}. () => (a ~ Esc (f a1), Esc f ~ Esc []) => DefaultUni (Esc a1) -> DefaultUni a
pattern DefaultUniPair :: forall {a} {k1} {k2} {f1 :: k1 -> k2} {a1 :: k1} {k3} {k4} {f2 :: k3 -> k4} {a2 :: k3}. () => (a ~ Esc (f1 a1), Esc f1 ~ Esc (f2 a2), Esc f2 ~ Esc (,)) => DefaultUni (Esc a2) -> DefaultUni (Esc a1) -> DefaultUni a

-- | For pleasing the coverage checker.
noMoreTypeFunctions :: DefaultUni (Esc (f :: a -> b -> c -> d)) -> any

-- | Default built-in functions.
--   
--   When updating these, make sure to add them to the protocol version
--   listing! See Note [New builtins and protocol versions]
data DefaultFun
AddInteger :: DefaultFun
SubtractInteger :: DefaultFun
MultiplyInteger :: DefaultFun
DivideInteger :: DefaultFun
QuotientInteger :: DefaultFun
RemainderInteger :: DefaultFun
ModInteger :: DefaultFun
EqualsInteger :: DefaultFun
LessThanInteger :: DefaultFun
LessThanEqualsInteger :: DefaultFun
AppendByteString :: DefaultFun
ConsByteString :: DefaultFun
SliceByteString :: DefaultFun
LengthOfByteString :: DefaultFun
IndexByteString :: DefaultFun
EqualsByteString :: DefaultFun
LessThanByteString :: DefaultFun
LessThanEqualsByteString :: DefaultFun
Sha2_256 :: DefaultFun
Sha3_256 :: DefaultFun
Blake2b_256 :: DefaultFun
VerifyEd25519Signature :: DefaultFun
VerifyEcdsaSecp256k1Signature :: DefaultFun
VerifySchnorrSecp256k1Signature :: DefaultFun
AppendString :: DefaultFun
EqualsString :: DefaultFun
EncodeUtf8 :: DefaultFun
DecodeUtf8 :: DefaultFun
IfThenElse :: DefaultFun
ChooseUnit :: DefaultFun
Trace :: DefaultFun
FstPair :: DefaultFun
SndPair :: DefaultFun
ChooseList :: DefaultFun
MkCons :: DefaultFun
HeadList :: DefaultFun
TailList :: DefaultFun
NullList :: DefaultFun
ChooseData :: DefaultFun
ConstrData :: DefaultFun
MapData :: DefaultFun
ListData :: DefaultFun
IData :: DefaultFun
BData :: DefaultFun
UnConstrData :: DefaultFun
UnMapData :: DefaultFun
UnListData :: DefaultFun
UnIData :: DefaultFun
UnBData :: DefaultFun
EqualsData :: DefaultFun
SerialiseData :: DefaultFun
MkPairData :: DefaultFun
MkNilData :: DefaultFun
MkNilPairData :: DefaultFun

-- | Turn a function into another function that returns
--   <a>EvaluationFailure</a> when its second argument is 0 or calls the
--   original function otherwise and wraps the result in
--   <a>EvaluationSuccess</a>. Useful for correctly handling <a>div</a>,
--   <a>mod</a>, etc.
nonZeroArg :: (Integer -> Integer -> Integer) -> Integer -> Integer -> EvaluationResult Integer

-- | Using 7 bits to encode builtin tags.
builtinTagWidth :: NumBits
encodeBuiltin :: Word8 -> Encoding
decodeBuiltin :: Get Word8


-- | Kind<i>type inference</i>checking.
module PlutusCore.TypeCheck

-- | For computing the Plutus kind of a built-in type. See
--   <a>kindOfBuiltinType</a>.
class ToKind (uni :: Type -> Type)

-- | The constraints that are required for kind checking.
type MonadKindCheck err term uni fun ann m = (MonadError err m, AsTypeError err term uni fun ann, ToKind uni)

-- | The general constraints that are required for type checking a Plutus
--   AST.
type MonadTypeCheck err term uni fun ann m = (MonadKindCheck err term uni fun ann m, MonadNormalizeType uni m, GEq uni, Ix fun)

-- | The constraint for built-in types<i>functions are
--   kind</i>type-checkable.
--   
--   We keep this separate from
--   <a>MonadKindCheck</a>/<a>MonadTypeCheck</a>, because those mainly
--   constrain the monad and <a>Typecheckable</a> constraints only the
--   builtins. In particular useful when the monad gets instantiated and
--   builtins don't. Another reason is that <a>Typecheckable</a> is not
--   required during type checking, since it's only needed for computing
--   <a>BuiltinTypes</a>, which is passed as a regular argument to the
--   worker of the type checker.
type Typecheckable uni fun = (ToKind uni, HasUniApply uni, ToBuiltinMeaning uni fun)

-- | Mapping from <a>Builtin</a>s to their <a>Normalized</a> <a>Kind</a>s.
newtype BuiltinTypes uni fun
BuiltinTypes :: Array fun (Dupable (Normalized (Type TyName uni ()))) -> BuiltinTypes uni fun
[unBuiltinTypes] :: BuiltinTypes uni fun -> Array fun (Dupable (Normalized (Type TyName uni ())))

-- | Configuration of the kind checker.
newtype KindCheckConfig
KindCheckConfig :: HandleNameMismatches -> KindCheckConfig
[_kccHandleNameMismatches] :: KindCheckConfig -> HandleNameMismatches

-- | Configuration of the type checker.
data TypeCheckConfig uni fun
TypeCheckConfig :: KindCheckConfig -> BuiltinTypes uni fun -> TypeCheckConfig uni fun
[_tccKindCheckConfig] :: TypeCheckConfig uni fun -> KindCheckConfig
[_tccBuiltinTypes] :: TypeCheckConfig uni fun -> BuiltinTypes uni fun
tccBuiltinTypes :: HasTypeCheckConfig cfg uni fun => Lens' cfg (BuiltinTypes uni fun)

-- | The default kind checking config.
defKindCheckConfig :: KindCheckConfig

-- | Extract the <a>TypeScheme</a> from a <a>BuiltinMeaning</a> and convert
--   it to the corresponding <a>Kind</a> for each built-in function.
builtinMeaningsToTypes :: (MonadKindCheck err term uni fun ann m, Typecheckable uni fun) => BuiltinVersion fun -> ann -> m (BuiltinTypes uni fun)

-- | Get the default type checking config.
getDefTypeCheckConfig :: (MonadKindCheck err term uni fun ann m, Typecheckable uni fun) => ann -> m (TypeCheckConfig uni fun)

-- | Infer the kind of a type.
inferKind :: MonadKindCheck err term uni fun ann m => KindCheckConfig -> Type TyName uni ann -> m (Kind ())

-- | Check a type against a kind. Infers the kind of the type and checks
--   that it's equal to the given kind throwing a <tt>TypeError</tt>
--   (annotated with the value of the <tt>ann</tt> argument) otherwise.
checkKind :: MonadKindCheck err term uni fun ann m => KindCheckConfig -> ann -> Type TyName uni ann -> Kind () -> m ()

-- | Infer the type of a term.
inferType :: MonadTypeCheckPlc err uni fun ann m => TypeCheckConfig uni fun -> Term TyName Name uni fun ann -> m (Normalized (Type TyName uni ()))

-- | Check a term against a type. Infers the type of the term and checks
--   that it's equal to the given type throwing a <tt>TypeError</tt>
--   (annotated with the value of the <tt>ann</tt> argument) otherwise.
checkType :: MonadTypeCheckPlc err uni fun ann m => TypeCheckConfig uni fun -> ann -> Term TyName Name uni fun ann -> Normalized (Type TyName uni ()) -> m ()

-- | Infer the type of a program.
inferTypeOfProgram :: MonadTypeCheckPlc err uni fun ann m => TypeCheckConfig uni fun -> Program TyName Name uni fun ann -> m (Normalized (Type TyName uni ()))

-- | Check a program against a type. Infers the type of the program and
--   checks that it's equal to the given type throwing a <tt>TypeError</tt>
--   (annotated with the value of the <tt>ann</tt> argument) otherwise.
checkTypeOfProgram :: MonadTypeCheckPlc err uni fun ann m => TypeCheckConfig uni fun -> ann -> Program TyName Name uni fun ann -> Normalized (Type TyName uni ()) -> m ()


-- | Built-in <tt>pair</tt> and related functions.
module PlutusCore.StdLib.Data.Pair

-- | <tt>(,)</tt> as a built-in PLC type.
pair :: uni `Contains` (,) => Type TyName uni ()

-- | <tt>fst</tt> as a PLC term.
--   
--   <pre>
--   /\(a :: *) (b :: *) -&gt; \(p : pair a b) -&gt; fst {a} {b} p
--   </pre>
fstPair :: TermLike term TyName Name DefaultUni DefaultFun => term ()

-- | <tt>snd</tt> as a PLC term.
--   
--   <pre>
--   /\(a :: *) (b :: *) -&gt; \(p : pair a b) -&gt; snd {a} {b} p
--   </pre>
sndPair :: TermLike term TyName Name DefaultUni DefaultFun => term ()

-- | <tt>uncurry</tt> as a PLC term.
--   
--   <pre>
--   /\(a :: *) (b :: *) (c :: *) -&gt; \(f : a -&gt; b -&gt; c) (p : pair a b) -&gt;
--       f (fst {a} {b} p) (snd {a} {b} p)
--   </pre>
uncurry :: TermLike term TyName Name DefaultUni DefaultFun => term ()


-- | Built-in <tt>list</tt> and related functions.
module PlutusCore.StdLib.Data.List

-- | <tt>[]</tt> as a built-in PLC type.
list :: uni `Contains` [] => Type TyName uni ()

-- | Pattern matching on built-in lists. <tt>caseList {a} xs</tt> on
--   built-in lists is equivalent to <tt>unwrap xs</tt> on lists defined in
--   PLC itself (hence why we bind <tt>r</tt> after <tt>xs</tt>).
--   
--   <pre>
--   /\(a :: *) -&gt; \(xs : list a) -&gt; /\(r :: *) -&gt; (z : r) (f : a -&gt; list a -&gt; r) -&gt;
--       chooseList
--           {a}
--           {() -&gt; r}
--           xs
--           (\(u : ()) -&gt; z)
--           (\(u : ()) -&gt; f (head {a} xs) (tail {a} xs))
--           ()
--   </pre>
caseList :: TermLike term TyName Name DefaultUni DefaultFun => term ()

-- | <tt>foldr</tt> over built-in lists.
--   
--   <pre>
--   /\(a :: *) (r :: *) -&gt; \(f : a -&gt; r -&gt; r) (z : r) -&gt;
--       fix {list a} {r} \(rec : list a -&gt; r) (xs : list a) -&gt;
--           caseList {a} xs {r} z \(x : a) (xs' : list a) -&gt; f x (rec xs')
--   </pre>
foldrList :: TermLike term TyName Name DefaultUni DefaultFun => term ()

-- | 'foldl'' as a PLC term.
--   
--   <pre>
--   /\(a :: *) (r :: *) -&gt; \(f : r -&gt; a -&gt; r) -&gt;
--       fix {r} {list a -&gt; r} \(rec : r -&gt; list a -&gt; r) (z : r) (xs : list a) -&gt;
--           caseList {a} xs {r} z \(x : a) (xs' : list a) -&gt; rec (f z x) xs'
--   </pre>
foldList :: TermLike term TyName Name DefaultUni DefaultFun => term ()
sum :: TermLike term TyName Name DefaultUni DefaultFun => term ()
sumr :: TermLike term TyName Name DefaultUni DefaultFun => term ()

-- | <a>product</a> as a PLC term.
--   
--   <pre>
--   foldList {integer} {integer} multiplyInteger 1
--   </pre>
product :: TermLike term TyName Name DefaultUni DefaultFun => term ()


-- | Built-in <tt>pair</tt> and related functions.
module PlutusCore.StdLib.Data.Data

-- | <tt>Data</tt> as a built-in PLC type.
dataTy :: uni `Contains` Data => Type TyName uni ()

-- | Pattern matching over <a>Data</a> inside PLC.
--   
--   <pre>
--   \(d : data) -&gt;
--       /\(r :: *) -&gt;
--        \(fConstr : integer -&gt; list data -&gt; r)
--         (fMap : list (pair data data) -&gt; r)
--         (fList : list data -&gt; r)
--         (fI : integer -&gt; r)
--         (fB : bytestring -&gt; r) -&gt;
--             chooseData
--                 d
--                 {unit -&gt; r}
--                 (\(u : unit) -&gt; uncurry {integer} {list data} {r} fConstr (unConstrB d))
--                 (\(u : unit) -&gt; fMap (unMapB d))
--                 (\(u : unit) -&gt; fList (unListB d))
--                 (\(u : unit) -&gt; fI (unIB d))
--                 (\(u : unit) -&gt; fB (unBB d))
--                 unitval
--   </pre>
caseData :: TermLike term TyName Name DefaultUni DefaultFun => term ()


-- | This module exports everything from the stdlib via a data type which
--   allows to test various procedures (pretty-printing, type checking,
--   etc) over the entire stdlib in a convenient way: each time a function
--   / data type is added to the stdlib, none of the tests is required to
--   be adapted, instead you just add the new definition to <a>stdLib</a>
--   defined below and all the tests see it automatically.
module PlutusCore.StdLib.Everything

-- | The entire stdlib exported as a single value.
stdLib :: PlcFolderContents DefaultUni DefaultFun


-- | Parsers for PLC terms in DefaultUni.
module PlutusCore.Parser

-- | A PLC <tt>Type</tt> to be parsed. ATM the parser only works for types
--   in the <tt>DefaultUni</tt> with <tt>DefaultFun</tt>.
type PType = Type TyName DefaultUni SrcSpan
varType :: Parser PType
funType :: Parser PType
allType :: Parser PType
lamType :: Parser PType
ifixType :: Parser PType
builtinType :: Parser PType
appType :: Parser PType
kind :: Parser (Kind SrcSpan)

-- | Parser for <tt>PType</tt>.
pType :: Parser PType

-- | Parser for built-in type applications.
defaultUniApplication :: Parser (SomeTypeIn (Kinded DefaultUni))

-- | Parser for built-in types (the ones from <a>DefaultUni</a>
--   specifically).
--   
--   <a>Kinded</a> is needed for checking that a type function can be
--   applied to its argument. I.e. we do Plutus kind checking of builtin
--   type applications during parsing, which is unfortunate, but there's no
--   way we could construct a <a>DefaultUni</a> otherwise.
--   
--   In case of kind error no sensible message is shown, only an overly
--   general one:
--   
--   <pre>
--   &gt;&gt;&gt; :set -XTypeApplications
--   
--   &gt;&gt;&gt; :set -XOverloadedStrings
--   
--   &gt;&gt;&gt; import PlutusCore.Error
--   
--   &gt;&gt;&gt; import PlutusCore.Quote
--   
--   &gt;&gt;&gt; let runP = putStrLn . either display display . runQuoteT . parseGen @ParserErrorBundle defaultUni
--   
--   &gt;&gt;&gt; runP "(list integer)"
--   (list integer)
--   
--   &gt;&gt;&gt; runP "(bool integer)"
--   test:1:14:
--     |
--   1 | (bool integer)
--     |              ^
--   expecting "bool", "bytestring", "data", "integer", "list", "pair", "string", "unit", or '('
--   </pre>
--   
--   This is to be fixed.
--   
--   One thing we could do to avoid doing kind checking during parsing is
--   to parse into
--   
--   data TextualUni a where TextualUni :: TextualUni (Esc (Tree Text))
--   
--   i.e. parse into <tt>Tree Text</tt> and do the kind checking
--   afterwards, but given that we'll still need to do the kind checking of
--   builtins regardless (even for UPLC), we don't win much by deferring
--   doing it.
defaultUni :: Parser (SomeTypeIn (Kinded DefaultUni))
tyName :: Parser TyName
newtype ParserState
ParserState :: Map Text Unique -> ParserState
[identifiers] :: ParserState -> Map Text Unique
type Parser = ParsecT ParserError Text (StateT ParserState Quote)
initial :: ParserState

-- | Return the unique identifier of a name. If it's not in the current
--   parser state, map the name to a fresh id and add it to the state. Used
--   in the Name parser.
intern :: (MonadState ParserState m, MonadQuote m) => Text -> m Unique
parse :: (AsParserErrorBundle e, MonadError e m, MonadQuote m) => Parser a -> String -> Text -> m a
toErrorB :: Either (ParseErrorBundle Text ParserError) a -> Either ParserErrorBundle a

-- | Generic parser function in which the file path is just "test".
parseGen :: (AsParserErrorBundle e, MonadError e m, MonadQuote m) => Parser a -> Text -> m a

-- | Space consumer.
whitespace :: Parser ()
leadingWhitespace :: Parser a -> Parser a
trailingWhitespace :: Parser a -> Parser a

-- | Returns a parser for <tt>a</tt> by calling the supplied function on
--   the starting and ending positions of <tt>a</tt>.
--   
--   The supplied function should usually return a parser that does
--   <i>not</i> consume trailing whitespaces. Otherwise, the end position
--   will be the first character after the trailing whitespaces.
withSpan' :: (SrcSpan -> Parser a) -> Parser a

-- | Like <a>withSpan</a>`, but the result parser consumes whitespaces.
--   
--   @withSpan = (&lt;* whitespace) . withSpan'
withSpan :: (SrcSpan -> Parser a) -> Parser a
lexeme :: Parser a -> Parser a
symbol :: Text -> Parser Text
inParens :: Parser a -> Parser a
inBrackets :: Parser a -> Parser a
inBraces :: Parser a -> Parser a
isIdentifierChar :: Char -> Bool
toSrcSpan :: SourcePos -> SourcePos -> SrcSpan
version :: Parser Version

-- | Parses a <a>Name</a>. Does not consume leading or trailing
--   whitespaces.
name :: Parser Name
cachedBuiltin :: Map Text DefaultFun

-- | Parser for builtin functions. Atm the parser can only parse
--   <a>DefaultFun</a>.
builtinFunction :: Parser DefaultFun

-- | Parser for integer constants.
conInteger :: Parser Integer

-- | Parser for a pair of hex digits to a Word8.
hexByte :: Parser Word8

-- | Parser for bytestring constants. They start with "#".
conBS :: Parser ByteString

-- | Parser for string constants. They are wrapped in double quotes.
conText :: Parser Text

-- | Parser for unit.
conUnit :: Parser ()

-- | Parser for bool.
conBool :: Parser Bool

-- | Parser for lists.
conList :: DefaultUni (Esc a) -> Parser [a]

-- | Parser for pairs.
conPair :: DefaultUni (Esc a) -> DefaultUni (Esc b) -> Parser (a, b)
conData :: Parser Data

-- | Parser for constants of the given type.
constantOf :: DefaultUni (Esc a) -> Parser a

-- | Parser of constants whose type is in <a>DefaultUni</a>.
constant :: Parser (Some (ValueOf DefaultUni))

-- | Parser for PLC programs.
program :: Parser (Program TyName Name DefaultUni DefaultFun SrcSpan)

-- | Parse a PLC program. The resulting program will have fresh names. The
--   underlying monad must be capable of handling any parse errors. This
--   passes "test" to the parser as the name of the input stream; to supply
--   a name explicity, use `parse program <a>name</a> <a>input</a>`.
parseProgram :: (AsParserErrorBundle e, MonadError e m, MonadQuote m) => Text -> m (Program TyName Name DefaultUni DefaultFun SrcSpan)

-- | Parse a PLC term. The resulting program will have fresh names. The
--   underlying monad must be capable of handling any parse errors.
parseTerm :: (AsParserErrorBundle e, MonadError e m, MonadQuote m) => Text -> m (Term TyName Name DefaultUni DefaultFun SrcSpan)

-- | Parse a PLC type. The resulting program will have fresh names. The
--   underlying monad must be capable of handling any parse errors.
parseType :: (AsParserErrorBundle e, MonadError e m, MonadQuote m) => Text -> m (Type TyName DefaultUni SrcSpan)

-- | The data type <a>SourcePos</a> represents source positions. It
--   contains the name of the source file, a line number, and a column
--   number. Source line and column positions change intensively during
--   parsing, so we need to make them strict to avoid memory leaks.
data SourcePos

-- | An error encountered during parsing.
data ParserError
UnknownBuiltinType :: !Text -> !SourcePos -> ParserError
BuiltinTypeNotAStar :: !Text -> !SourcePos -> ParserError
UnknownBuiltinFunction :: !Text -> !SourcePos -> ![Text] -> ParserError
InvalidBuiltinConstant :: !Text -> !Text -> !SourcePos -> ParserError
InvalidData :: !Text -> !SourcePos -> ParserError


-- | This module helps to visualize and debug the <a>BuiltinMeaning</a>
--   inference machinery from the <tt>Elaborate</tt> and <tt>Meaning</tt>
--   modules.
module PlutusCore.Builtin.Debug

-- | Instantiate type variables in the type of a value using
--   <a>ElaborateFromTo</a>. Example usages:
--   
--   <pre>
--   &gt;&gt;&gt; :t elaborateDebug False
--   elaborateDebug False :: Bool
--   
--   &gt;&gt;&gt; :t elaborateDebug fst
--   elaborateDebug fst
--     :: (TyVarRep ('TyNameRep "a" 0), TyVarRep ('TyNameRep "b" 1))
--        -&gt; TyVarRep ('TyNameRep "a" 0)
--   </pre>
elaborateDebug :: forall a j. ElaborateFromTo 0 j (Term TyName Name DefaultUni DefaultFun ()) a => a -> a
makeBuiltinMeaningDebug :: forall a. MakeBuiltinMeaning a (Term TyName Name DefaultUni DefaultFun ()) => a -> a

-- | The AST of a value with a Plutus type attached to it. The type is for
--   the Plutus type checker to look at. <a>Opaque</a> can appear in the
--   type of the denotation of a builtin.
newtype Opaque val (rep :: Type)
Opaque :: val -> Opaque val (rep :: Type)
[unOpaque] :: Opaque val (rep :: Type) -> val

-- | For unlifting from the <a>Constant</a> constructor when the stored
--   value is of a monomorphic built-in type
--   
--   The <tt>rep</tt> parameter specifies how the type looks on the PLC
--   side (i.e. just like with <tt>Opaque val rep</tt>).
newtype SomeConstant uni (rep :: Type)
SomeConstant :: Some (ValueOf uni) -> SomeConstant uni (rep :: Type)
[unSomeConstant] :: SomeConstant uni (rep :: Type) -> Some (ValueOf uni)

-- | Representation of a type variable: its name and unique and an implicit
--   kind.
data TyNameRep (kind :: Type)
TyNameRep :: Symbol -> Nat -> TyNameRep (kind :: Type)

-- | Representation of an intrinsically-kinded type variable: a name.
data family TyVarRep (name :: TyNameRep kind) :: kind

-- | Representation of an intrinsically-kinded type application: a function
--   and an argument.
data family TyAppRep (fun :: dom -> cod) (arg :: dom) :: cod

-- | Representation of of an intrinsically-kinded universal quantifier: a
--   bound name and a body.
data family TyForallRep (name :: TyNameRep kind) (a :: Type) :: Type

-- | Turn a list of Haskell types <tt>args</tt> into a functional type
--   ending in <tt>res</tt>.
--   
--   <pre>
--   &gt;&gt;&gt; :set -XDataKinds
--   
--   &gt;&gt;&gt; :kind! FoldArgs [(), Bool] Integer
--   FoldArgs [(), Bool] Integer :: *
--   = () -&gt; Bool -&gt; Integer
--   </pre>
type family FoldArgs args res

-- | The meaning of a built-in function consists of its type represented as
--   a <a>TypeScheme</a>, its Haskell denotation and a costing function.
--   
--   The <a>TypeScheme</a> of a built-in function is used for example for
--   
--   <ol>
--   <li>computing the PLC type of the function to be used during type
--   checking</li>
--   <li>getting arity information</li>
--   <li>generating arbitrary values to apply the function to in tests</li>
--   </ol>
--   
--   The denotation is lazy, so that we don't need to worry about a builtin
--   being bottom (happens in tests). The production path is not affected
--   by that, since only runtime denotations are used for evaluation.
data BuiltinMeaning val cost
BuiltinMeaning :: TypeScheme val args res -> ~FoldArgs args res -> (cost -> BuiltinRuntime val) -> BuiltinMeaning val cost

-- | Constraints available when defining a built-in function.
type HasMeaningIn uni val = (Typeable val, ExMemoryUsage val, HasConstantIn uni val)

-- | A type class for "each function from a set of built-in functions has a
--   <a>BuiltinMeaning</a>".
class (Typeable uni, Typeable fun, Bounded fun, Enum fun, Ix fun, Default (BuiltinVersion fun)) => ToBuiltinMeaning uni fun where {
    
    -- | The <tt>cost</tt> part of <a>BuiltinMeaning</a>.
    type CostingPart uni fun;
    
    -- | See Note [Versioned builtins]
    data BuiltinVersion fun;
}

-- | Get the <a>BuiltinMeaning</a> of a built-in function.
toBuiltinMeaning :: (ToBuiltinMeaning uni fun, HasMeaningIn uni val) => BuiltinVersion fun -> fun -> BuiltinMeaning val (CostingPart uni fun)

-- | Get the type of a built-in function.
typeOfBuiltinFunction :: forall uni fun. ToBuiltinMeaning uni fun => BuiltinVersion fun -> fun -> Type TyName uni ()

-- | Chop a function type to get a list of its argument types.
type family GetArgs a

-- | A class that allows us to derive a monotype for a builtin. We could've
--   computed the runtime denotation from the <a>TypeScheme</a> and the
--   denotation of the builtin, but not statically (due to unfolding not
--   working for recursive functions and <a>TypeScheme</a> being recursive,
--   i.e. requiring the conversion function to be recursive), and so it
--   would cause us to retain a lot of evaluation-irrelevant stuff in the
--   constructors of <a>BuiltinRuntime</a>, which has to make evaluation
--   slower (we didn't check) and certainly makes the generated Core much
--   harder to read. Technically speaking, we could get a
--   <tt>RuntimeScheme</tt> from the <a>TypeScheme</a> and the denotation
--   statically if we changed the definition of <a>TypeScheme</a> and made
--   it a singleton, but then the conversion function would have to become
--   a class anyway and we'd just replicate what we have here, except in a
--   much more complicated way.
class KnownMonotype val args res
knownMonotype :: KnownMonotype val args res => TypeScheme val args res

-- | Convert the denotation of a builtin to its runtime counterpart . The
--   argument is in <a>ReadKnownM</a>, because that's what deferred
--   unlifting amounts to: passing the action returning the builtin
--   application around until full saturation, which is when the action
--   actually gets run.
toMonoF :: KnownMonotype val args res => ReadKnownM (FoldArgs args res, FoldArgs args ExBudget) -> BuiltinRuntime val

-- | A class that allows us to derive a polytype for a builtin.
class KnownMonotype val args res => KnownPolytype (binds :: [Some TyNameRep]) val args res
knownPolytype :: KnownPolytype binds val args res => TypeScheme val args res

-- | Convert the denotation of a builtin to its runtime counterpart. The
--   argument is in <a>ReadKnownM</a>, because that's what we need to do:
--   passing the action returning the builtin application around until full
--   saturation, which is when the action actually gets run.
toPolyF :: KnownPolytype binds val args res => ReadKnownM (FoldArgs args res, FoldArgs args ExBudget) -> BuiltinRuntime val

-- | Ensure a built-in function is not nullary and throw a nice error
--   otherwise.
type family ThrowOnBothEmpty binds args isBuiltin a

-- | A function turned into a type class with exactly one fully general
--   instance. We can't package up the constraints of
--   <a>makeBuiltinMeaning</a> (see the instance) into a type or class
--   synonym, because they contain a bunch of variables defined by
--   <tt>~</tt> or determined via functional dependencies and neither class
--   nor type definitions can handle that (see
--   <a>https://gitlab.haskell.org/ghc/ghc/-/issues/7100)</a>. Inlining
--   three lines of constraints whenever we need to call
--   <a>makeBuiltinMeaning</a> over a non-concrete type is a bad option and
--   this abstraction is free anyway, hence its existence.
--   
--   The <tt>a</tt> type variable goes first, because
--   <tt>makeBuiltinMeaning @A</tt> is a common pattern.
class MakeBuiltinMeaning a val

-- | Construct the meaning for a built-in function by automatically
--   deriving its <a>TypeScheme</a>, given
--   
--   <ol>
--   <li>the denotation of the builtin</li>
--   <li>an uninstantiated costing function</li>
--   </ol>
makeBuiltinMeaning :: MakeBuiltinMeaning a val => a -> (cost -> FoldArgs (GetArgs a) ExBudget) -> BuiltinMeaning val cost

-- | Convert a <a>BuiltinMeaning</a> to a <a>BuiltinRuntime</a> given a
--   cost model.
toBuiltinRuntime :: cost -> BuiltinMeaning val cost -> BuiltinRuntime val

-- | Calculate runtime info for all built-in functions given denotations of
--   builtins, and a cost model.
toBuiltinsRuntime :: (cost ~ CostingPart uni fun, ToBuiltinMeaning uni fun, HasMeaningIn uni val) => BuiltinVersion fun -> cost -> BuiltinsRuntime fun val

module PlutusCore

-- | Parse a PLC program. The resulting program will have fresh names. The
--   underlying monad must be capable of handling any parse errors. This
--   passes "test" to the parser as the name of the input stream; to supply
--   a name explicity, use `parse program <a>name</a> <a>input</a>`.
parseProgram :: (AsParserErrorBundle e, MonadError e m, MonadQuote m) => Text -> m (Program TyName Name DefaultUni DefaultFun SrcSpan)

-- | Parse a PLC term. The resulting program will have fresh names. The
--   underlying monad must be capable of handling any parse errors.
parseTerm :: (AsParserErrorBundle e, MonadError e m, MonadQuote m) => Text -> m (Term TyName Name DefaultUni DefaultFun SrcSpan)

-- | Parse a PLC type. The resulting program will have fresh names. The
--   underlying monad must be capable of handling any parse errors.
parseType :: (AsParserErrorBundle e, MonadError e m, MonadQuote m) => Text -> m (Type TyName DefaultUni SrcSpan)

-- | The data type <a>SourcePos</a> represents source positions. It
--   contains the name of the source file, a line number, and a column
--   number. Source line and column positions change intensively during
--   parsing, so we need to make them strict to avoid memory leaks.
data SourcePos

-- | The span between two source locations.
--   
--   This corresponds roughly to the <a>SrcSpan</a> used by GHC, but we
--   define our own version so we don't have to depend on <tt>ghc</tt> to
--   use it.
--   
--   The line and column numbers are 1-based, and the unit is Unicode code
--   point (or <a>Char</a>).
data SrcSpan
SrcSpan :: FilePath -> Int -> Int -> Int -> Int -> SrcSpan
[srcSpanFile] :: SrcSpan -> FilePath
[srcSpanSLine] :: SrcSpan -> Int
[srcSpanSCol] :: SrcSpan -> Int
[srcSpanELine] :: SrcSpan -> Int

-- | Same as GHC's <tt>SrcSpan</tt>, <tt>srcSpanECol</tt> is usually one
--   more than the column of the last character of the thing this
--   <tt>SrcSpan</tt> is for (unless the last character is the line break).
[srcSpanECol] :: SrcSpan -> Int
data SrcSpans

-- | Existential. This is type is useful to hide GADTs' parameters.
--   
--   <pre>
--   &gt;&gt;&gt; data Tag :: * -&gt; * where TagInt :: Tag Int; TagBool :: Tag Bool
--   
--   &gt;&gt;&gt; instance GShow Tag where gshowsPrec _ TagInt = showString "TagInt"; gshowsPrec _ TagBool = showString "TagBool"
--   
--   &gt;&gt;&gt; classify s = case s of "TagInt" -&gt; [mkGReadResult TagInt]; "TagBool" -&gt; [mkGReadResult TagBool]; _ -&gt; []
--   
--   &gt;&gt;&gt; instance GRead Tag where greadsPrec _ s = [ (r, rest) | (con, rest) &lt;-  lex s, r &lt;- classify con ]
--   </pre>
--   
--   You can either use <tt>PatternSynonyms</tt> (available with GHC &gt;=
--   8.0)
--   
--   <pre>
--   &gt;&gt;&gt; let x = Some TagInt
--   
--   &gt;&gt;&gt; x
--   Some TagInt
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; case x of { Some TagInt -&gt; "I"; Some TagBool -&gt; "B" } :: String
--   "I"
--   </pre>
--   
--   or you can use functions
--   
--   <pre>
--   &gt;&gt;&gt; let y = mkSome TagBool
--   
--   &gt;&gt;&gt; y
--   Some TagBool
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; withSome y $ \y' -&gt; case y' of { TagInt -&gt; "I"; TagBool -&gt; "B" } :: String
--   "B"
--   </pre>
--   
--   The implementation of <a>mapSome</a> is <i>safe</i>.
--   
--   <pre>
--   &gt;&gt;&gt; let f :: Tag a -&gt; Tag a; f TagInt = TagInt; f TagBool = TagBool
--   
--   &gt;&gt;&gt; mapSome f y
--   Some TagBool
--   </pre>
--   
--   but you can also use:
--   
--   <pre>
--   &gt;&gt;&gt; withSome y (mkSome . f)
--   Some TagBool
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; read "Some TagBool" :: Some Tag
--   Some TagBool
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; read "mkSome TagInt" :: Some Tag
--   Some TagInt
--   </pre>
data Some (tag :: k -> Type)
pattern Some :: forall {k} tag (a :: k). () => tag a -> Some tag

-- | A particular type from a universe.
data SomeTypeIn uni
SomeTypeIn :: !uni (Esc a) -> SomeTypeIn uni
data Kinded uni ta
[Kinded] :: Typeable k => !uni (Esc a) -> Kinded uni (Esc (a :: k))

-- | A value of a particular type from a universe.
data ValueOf uni a
ValueOf :: !uni (Esc a) -> !a -> ValueOf uni a

-- | Wrap a value into <tt>Some (ValueOf uni)</tt>, given its explicit type
--   tag.
someValueOf :: forall a uni. uni (Esc a) -> a -> Some (ValueOf uni)

-- | Wrap a value into <tt>Some (ValueOf uni)</tt>, provided its type is in
--   the universe.
someValue :: forall a uni. uni `Includes` a => a -> Some (ValueOf uni)
someValueType :: Some (ValueOf uni) -> SomeTypeIn uni

-- | "Escapes" a type of an arbitrary kind to fit into <a>Type</a>.
data Esc a

-- | A class for enumerating types and fully instantiated type formers that
--   <tt>uni</tt> contains. For example, a particular <tt>ExampleUni</tt>
--   may have monomorphic types in it:
--   
--   instance ExampleUni <a>Contains</a> Integer where <a>...</a> instance
--   ExampleUni <a>Contains</a> Bool where <a>...</a>
--   
--   as well as polymorphic ones:
--   
--   instance ExampleUni <a>Contains</a> [] where <a>...</a> instance
--   ExampleUni <a>Contains</a> (,) where <a>...</a>
--   
--   as well as their instantiations:
--   
--   instance ExampleUni <a>Contains</a> a =&gt; ExampleUni <a>Contains</a>
--   [a] where <a>...</a> instance (ExampleUni <a>Contains</a> a,
--   ExampleUni <a>Contains</a> b) =&gt; ExampleUni <a>Contains</a> (a, b)
--   where <a>...</a>
--   
--   (a universe can have any subset of the mentioned sorts of types, for
--   example it's fine to have instantiated polymorphic types and not have
--   uninstantiated ones and vice versa)
--   
--   Note that when used as a constraint of a function <a>Contains</a> does
--   not allow you to directly express things like "<tt>uni</tt> has the
--   <tt>Integer</tt>, <tt>Bool</tt> and <tt>[]</tt> types and type
--   formers", because <tt>[]</tt> is not fully instantiated. So you can
--   only say "<tt>uni</tt> has <tt>Integer</tt>, <tt>Bool</tt>,
--   <tt>[Integer]</tt>, <tt>[Bool]</tt>, <tt>[[Integer]]</tt>,
--   <tt>[[Bool]]</tt> etc" and such manual enumeration is annoying, so
--   we'd really like to be able to say that <tt>uni</tt> has lists of
--   arbitrary built-in types (including lists of lists etc).
--   <a>Contains</a> does not allow that, but <a>Includes</a> does. For
--   example, in the body of the following definition:
--   
--   foo :: (uni <a>Includes</a> Integer, uni <a>Includes</a> Bool, uni
--   <a>Includes</a> []) =&gt; <a>...</a> foo = <a>...</a>
--   
--   you can make use of the fact that <tt>uni</tt> has lists of arbitrary
--   included types (integers, booleans and lists).
--   
--   Hence most of the time opt for using the more flexible
--   <a>Includes</a>.
--   
--   <a>Includes</a> is defined in terms of <a>Contains</a>, so you only
--   need to provide a <a>Contains</a> instance per type from the universe
--   and you'll get <a>Includes</a> for free.
class uni `Contains` a
knownUni :: Contains uni a => uni (Esc a)

-- | <tt>uni <a>Includes</a> a</tt> reads as "<tt>a</tt> is in the
--   <tt>uni</tt>". <tt>a</tt> can be of a higher-kind, see the docs of
--   <a>Contains</a> on why you might want that.
type Includes uni = Permits (Contains uni)

-- | A universe is <a>Closed</a>, if it's known how to constrain every type
--   from the universe and every type can be encoded to / decoded from a
--   sequence of integer tags. The universe doesn't have to be finite and
--   providing support for infinite universes is the reason why we encode a
--   type as a sequence of integer tags as opposed to a single integer tag.
--   For example, given
--   
--   <pre>
--   data U a where
--       UList :: !(U a) -&gt; U [a]
--       UInt  :: U Int
--   </pre>
--   
--   <tt>UList (UList UInt)</tt> can be encoded to <tt>[0,0,1]</tt> where
--   <tt>0</tt> and <tt>1</tt> are the integer tags of the <tt>UList</tt>
--   and <tt>UInt</tt> constructors, respectively.
class Closed uni where {
    
    -- | A constrant for "<tt>constr a</tt> holds for any <tt>a</tt> from
    --   <tt>uni</tt>".
    type Everywhere uni (constr :: Type -> Constraint) :: Constraint;
}

-- | Encode a type as a sequence of <a>Int</a> tags. The opposite of
--   <tt>decodeUni</tt>.
encodeUni :: Closed uni => uni a -> [Int]

-- | Decode a type and feed it to the continuation.
withDecodedUni :: Closed uni => (forall k (a :: k). Typeable k => uni (Esc a) -> DecodeUniM r) -> DecodeUniM r

-- | Bring a <tt>constr a</tt> instance in scope, provided <tt>a</tt> is a
--   type from the universe and <tt>constr</tt> holds for any type from the
--   universe.
bring :: (Closed uni, uni `Everywhere` constr) => proxy constr -> uni (Esc a) -> (constr a => r) -> r
type family uni `EverywhereAll` constrs

-- | Same as <a>knownUni</a>, but receives a <tt>proxy</tt>.
knownUniOf :: uni `Contains` a => proxy a -> uni (Esc a)

-- | <a>Show</a>-like class for 1-type-parameter GADTs. <tt>GShow t =&gt;
--   ...</tt> is equivalent to something like <tt>(forall a. Show (t a))
--   =&gt; ...</tt>. The easiest way to create instances would probably be
--   to write (or derive) an <tt>instance Show (T a)</tt>, and then simply
--   say:
--   
--   <pre>
--   instance GShow t where gshowsPrec = showsPrec
--   </pre>
class GShow (t :: k -> Type)
gshowsPrec :: forall (a :: k). GShow t => Int -> t a -> ShowS

-- | A specialised variant of <a>showsPrec</a>, using precedence context
--   zero, and returning an ordinary <a>String</a>.
show :: Show a => a -> String

-- | A class for type-contexts which contain enough information to (at
--   least in some cases) decide the equality of types occurring within
--   them.
class GEq (f :: k -> Type)

-- | Produce a witness of type-equality, if one exists.
--   
--   A handy idiom for using this would be to pattern-bind in the Maybe
--   monad, eg.:
--   
--   <pre>
--   extract :: GEq tag =&gt; tag a -&gt; DSum tag -&gt; Maybe a
--   extract t1 (t2 :=&gt; x) = do
--       Refl &lt;- geq t1 t2
--       return x
--   </pre>
--   
--   Or in a list comprehension:
--   
--   <pre>
--   extractMany :: GEq tag =&gt; tag a -&gt; [DSum tag] -&gt; [a]
--   extractMany t1 things = [ x | (t2 :=&gt; x) &lt;- things, Refl &lt;- maybeToList (geq t1 t2)]
--   </pre>
--   
--   (Making use of the <tt>DSum</tt> type from <a>Data.Dependent.Sum</a>
--   in both examples)
geq :: forall (a :: k) (b :: k). GEq f => f a -> f b -> Maybe (a :~: b)
deriveGEq :: DeriveGEQ t => t -> Q [Dec]

-- | A class for "<tt>uni</tt> has general type application".
class HasUniApply (uni :: Type -> Type)

-- | Apply a type constructor to an argument.
uniApply :: forall k l (f :: k -> l) a. HasUniApply uni => uni (Esc f) -> uni (Esc a) -> uni (Esc (f a))

-- | Deconstruct a type application into the function and the argument and
--   feed them to the continuation. If the type is not an application, then
--   return the default value.
matchUniApply :: HasUniApply uni => uni tb -> r -> (forall k l (f :: k -> l) a. tb ~ Esc (f a) => uni (Esc f) -> uni (Esc a) -> r) -> r

-- | Check if the kind of the given type from the universe is <a>Type</a>.
checkStar :: forall uni a (x :: a). Typeable a => uni (Esc x) -> Maybe (a :~: Type)

-- | Check if one type from the universe can be applied to another (i.e.
--   check that the expected kind of the argument matches the actual one)
--   and call the continuation in the refined context. Fail with
--   <a>mzero</a> otherwise.
withApplicable :: forall (a :: Type) (ab :: Type) f x uni m r. (Typeable ab, Typeable a, MonadPlus m) => uni (Esc (f :: ab)) -> uni (Esc (x :: a)) -> (forall (b :: Type). (Typeable b, ab ~ (a -> b)) => m r) -> m r

-- | Propositional equality. If <tt>a :~: b</tt> is inhabited by some
--   terminating value, then the type <tt>a</tt> is the same as the type
--   <tt>b</tt>. To use this equality in practice, pattern-match on the
--   <tt>a :~: b</tt> to get out the <tt>Refl</tt> constructor; in the body
--   of the pattern-match, the compiler knows that <tt>a ~ b</tt>.
data (a :: k) :~: (b :: k)
[Refl] :: forall {k} (a :: k). a :~: a
infix 4 :~:

-- | A constraint for "<tt>uni1</tt> is a subuniverse of <tt>uni2</tt>".
type uni1 <: uni2 = uni1 `Everywhere` Includes uni2

-- | The universe used by default.
data DefaultUni a
[DefaultUniInteger] :: DefaultUni (Esc Integer)
[DefaultUniByteString] :: DefaultUni (Esc ByteString)
[DefaultUniString] :: DefaultUni (Esc Text)
[DefaultUniUnit] :: DefaultUni (Esc ())
[DefaultUniBool] :: DefaultUni (Esc Bool)
[DefaultUniProtoList] :: DefaultUni (Esc [])
[DefaultUniProtoPair] :: DefaultUni (Esc (,))
[DefaultUniApply] :: !DefaultUni (Esc f) -> !DefaultUni (Esc a) -> DefaultUni (Esc (f a))
[DefaultUniData] :: DefaultUni (Esc Data)
pattern DefaultUniList :: forall {a} {k1} {k2} {f :: k1 -> k2} {a1 :: k1}. () => (a ~ Esc (f a1), Esc f ~ Esc []) => DefaultUni (Esc a1) -> DefaultUni a
pattern DefaultUniPair :: forall {a} {k1} {k2} {f1 :: k1 -> k2} {a1 :: k1} {k3} {k4} {f2 :: k3 -> k4} {a2 :: k3}. () => (a ~ Esc (f1 a1), Esc f1 ~ Esc (f2 a2), Esc f2 ~ Esc (,)) => DefaultUni (Esc a2) -> DefaultUni (Esc a1) -> DefaultUni a

-- | Default built-in functions.
--   
--   When updating these, make sure to add them to the protocol version
--   listing! See Note [New builtins and protocol versions]
data DefaultFun
AddInteger :: DefaultFun
SubtractInteger :: DefaultFun
MultiplyInteger :: DefaultFun
DivideInteger :: DefaultFun
QuotientInteger :: DefaultFun
RemainderInteger :: DefaultFun
ModInteger :: DefaultFun
EqualsInteger :: DefaultFun
LessThanInteger :: DefaultFun
LessThanEqualsInteger :: DefaultFun
AppendByteString :: DefaultFun
ConsByteString :: DefaultFun
SliceByteString :: DefaultFun
LengthOfByteString :: DefaultFun
IndexByteString :: DefaultFun
EqualsByteString :: DefaultFun
LessThanByteString :: DefaultFun
LessThanEqualsByteString :: DefaultFun
Sha2_256 :: DefaultFun
Sha3_256 :: DefaultFun
Blake2b_256 :: DefaultFun
VerifyEd25519Signature :: DefaultFun
VerifyEcdsaSecp256k1Signature :: DefaultFun
VerifySchnorrSecp256k1Signature :: DefaultFun
AppendString :: DefaultFun
EqualsString :: DefaultFun
EncodeUtf8 :: DefaultFun
DecodeUtf8 :: DefaultFun
IfThenElse :: DefaultFun
ChooseUnit :: DefaultFun
Trace :: DefaultFun
FstPair :: DefaultFun
SndPair :: DefaultFun
ChooseList :: DefaultFun
MkCons :: DefaultFun
HeadList :: DefaultFun
TailList :: DefaultFun
NullList :: DefaultFun
ChooseData :: DefaultFun
ConstrData :: DefaultFun
MapData :: DefaultFun
ListData :: DefaultFun
IData :: DefaultFun
BData :: DefaultFun
UnConstrData :: DefaultFun
UnMapData :: DefaultFun
UnListData :: DefaultFun
UnIData :: DefaultFun
UnBData :: DefaultFun
EqualsData :: DefaultFun
SerialiseData :: DefaultFun
MkPairData :: DefaultFun
MkNilData :: DefaultFun
MkNilPairData :: DefaultFun
data Term tyname name uni fun ann

-- | a named variable
Var :: ann -> name -> Term tyname name uni fun ann
TyAbs :: ann -> tyname -> Kind ann -> Term tyname name uni fun ann -> Term tyname name uni fun ann
LamAbs :: ann -> name -> Type tyname uni ann -> Term tyname name uni fun ann -> Term tyname name uni fun ann
Apply :: ann -> Term tyname name uni fun ann -> Term tyname name uni fun ann -> Term tyname name uni fun ann

-- | a constant term
Constant :: ann -> Some (ValueOf uni) -> Term tyname name uni fun ann
Builtin :: ann -> fun -> Term tyname name uni fun ann
TyInst :: ann -> Term tyname name uni fun ann -> Type tyname uni ann -> Term tyname name uni fun ann
Unwrap :: ann -> Term tyname name uni fun ann -> Term tyname name uni fun ann
IWrap :: ann -> Type tyname uni ann -> Type tyname uni ann -> Term tyname name uni fun ann -> Term tyname name uni fun ann
Error :: ann -> Type tyname uni ann -> Term tyname name uni fun ann

-- | Get all the direct child <a>Term</a>s of the given <a>Term</a>.
termSubterms :: Traversal' (Term tyname name uni fun ann) (Term tyname name uni fun ann)

-- | Get all the direct child <a>Kind</a>s of the given <a>Term</a>.
termSubtypes :: Traversal' (Term tyname name uni fun ann) (Type tyname uni ann)

-- | Extract the universe from a type.
type family UniOf a :: Type -> Type

-- | A <a>Kind</a> assigned to expressions.
data Type tyname uni ann
TyVar :: ann -> tyname -> Type tyname uni ann
TyFun :: ann -> Type tyname uni ann -> Type tyname uni ann -> Type tyname uni ann

-- | Fix-point type, for constructing self-recursive types
TyIFix :: ann -> Type tyname uni ann -> Type tyname uni ann -> Type tyname uni ann
TyForall :: ann -> tyname -> Kind ann -> Type tyname uni ann -> Type tyname uni ann

-- | Builtin type
TyBuiltin :: ann -> SomeTypeIn uni -> Type tyname uni ann
TyLam :: ann -> tyname -> Kind ann -> Type tyname uni ann -> Type tyname uni ann
TyApp :: ann -> Type tyname uni ann -> Type tyname uni ann -> Type tyname uni ann

-- | Get all the direct child <a>Kind</a>s of the given <a>Kind</a>.
typeSubtypes :: Traversal' (Type tyname uni ann) (Type tyname uni ann)
data Kind ann
Type :: ann -> Kind ann
KindArrow :: ann -> Kind ann -> Kind ann -> Kind ann

-- | The kind of a pattern functor (the first <a>Kind</a> argument of
--   <a>TyIFix</a>) at a given kind (of the second <a>Kind</a> argument of
--   <a>TyIFix</a>):
--   
--   <pre>
--   toPatFuncKind k = (k -&gt; *) -&gt; k -&gt; *
--   </pre>
toPatFuncKind :: Kind () -> Kind ()
fromPatFuncKind :: Kind () -> Maybe (Kind ())

-- | Extract all <tt>a_i</tt> from <tt>a_0 -&gt; a_1 -&gt; ... -&gt;
--   r</tt>.
argsFunKind :: Kind ann -> [Kind ann]

-- | An error encountered during parsing.
data ParserError
UnknownBuiltinType :: !Text -> !SourcePos -> ParserError
BuiltinTypeNotAStar :: !Text -> !SourcePos -> ParserError
UnknownBuiltinFunction :: !Text -> !SourcePos -> ![Text] -> ParserError
InvalidBuiltinConstant :: !Text -> !Text -> !SourcePos -> ParserError
InvalidData :: !Text -> !SourcePos -> ParserError

-- | The version of Plutus Core used by this program.
--   
--   The intention is to convey different levels of backwards compatibility
--   for existing scripts: - Major version changes are
--   backwards-incompatible - Minor version changes are
--   backwards-compatible - Patch version changes should be entirely
--   invisible (and we will likely not use this level)
--   
--   The version used should be changed only when the <i>language
--   itself</i> changes. For example, adding a new kind of term to the
--   language would require a minor version bump; removing a kind of term
--   would require a major version bump.
--   
--   Similarly, changing the semantics of the language will require a
--   version bump, typically a major one. This is the main reason why the
--   version is actually tracked in the AST: we can have two language
--   versions with identical ASTs but different semantics, so we need to
--   track the version explicitly.
--   
--   Compatibility is about compatibility for specific scripts, not about
--   e.g. tools which consume scripts. Adding a new kind of term does not
--   change how existing scripts behave, but does change what tools would
--   need to do to process scripts.
data Version
Version :: Natural -> Natural -> Natural -> Version
[_versionMajor] :: Version -> Natural
[_versionMinor] :: Version -> Natural
[_versionPatch] :: Version -> Natural

-- | A <a>Program</a> is simply a <a>Term</a> coupled with a <a>Version</a>
--   of the core language.
data Program tyname name uni fun ann
Program :: ann -> Version -> Term tyname name uni fun ann -> Program tyname name uni fun ann
[_progAnn] :: Program tyname name uni fun ann -> ann
[_progVer] :: Program tyname name uni fun ann -> Version
[_progTerm] :: Program tyname name uni fun ann -> Term tyname name uni fun ann

-- | A <a>Name</a> represents variables/names in Plutus Core.
data Name
Name :: Text -> Unique -> Name

-- | The identifier name, for use in error messages.
[_nameText] :: Name -> Text

-- | A <a>Unique</a> assigned to the name, allowing for cheap comparisons
--   in the compiler.
[_nameUnique] :: Name -> Unique

-- | We use a <tt>newtype</tt> to enforce separation between names used for
--   types and those used for terms.
newtype TyName
TyName :: Name -> TyName
[unTyName] :: TyName -> Name

-- | A unique identifier
newtype Unique
Unique :: Int -> Unique
[unUnique] :: Unique -> Int

-- | A mapping from uniques to values of type <tt>a</tt>.
newtype UniqueMap unique a
UniqueMap :: IntMap a -> UniqueMap unique a
[unUniqueMap] :: UniqueMap unique a -> IntMap a
newtype Normalized a
Normalized :: a -> Normalized a
[unNormalized] :: Normalized a -> a

-- | The latest version of Plutus Core supported by this library.
latestVersion :: Version
termAnn :: Term tyname name uni fun ann -> ann
typeAnn :: Type tyname uni ann -> ann
tyVarDeclAnn :: forall tyname_a4xnB ann_a4xnC. Lens' (TyVarDecl tyname_a4xnB ann_a4xnC) ann_a4xnC
tyVarDeclName :: forall tyname_a4xnB ann_a4xnC tyname_a4xxb. Lens (TyVarDecl tyname_a4xnB ann_a4xnC) (TyVarDecl tyname_a4xxb ann_a4xnC) tyname_a4xnB tyname_a4xxb
tyVarDeclKind :: forall tyname_a4xnB ann_a4xnC. Lens' (TyVarDecl tyname_a4xnB ann_a4xnC) (Kind ann_a4xnC)
varDeclAnn :: forall tyname_a4xxz name_a4xxA uni_a4xxB ann_a4xxC. Lens' (VarDecl tyname_a4xxz name_a4xxA uni_a4xxB ann_a4xxC) ann_a4xxC
varDeclName :: forall tyname_a4xxz name_a4xxA uni_a4xxB ann_a4xxC name_a4xH0. Lens (VarDecl tyname_a4xxz name_a4xxA uni_a4xxB ann_a4xxC) (VarDecl tyname_a4xxz name_a4xH0 uni_a4xxB ann_a4xxC) name_a4xxA name_a4xH0
varDeclType :: forall tyname_a4xxz name_a4xxA uni_a4xxB ann_a4xxC tyname_a4xH1 uni_a4xH2. Lens (VarDecl tyname_a4xxz name_a4xxA uni_a4xxB ann_a4xxC) (VarDecl tyname_a4xH1 name_a4xxA uni_a4xH2 ann_a4xxC) (Type tyname_a4xxz uni_a4xxB ann_a4xxC) (Type tyname_a4xH1 uni_a4xH2 ann_a4xxC)
tyDeclAnn :: forall tyname_a4xHq uni_a4xHr ann_a4xHs. Lens' (TyDecl tyname_a4xHq uni_a4xHr ann_a4xHs) ann_a4xHs
tyDeclType :: forall tyname_a4xHq uni_a4xHr ann_a4xHs tyname_a4xR8 uni_a4xR9. Lens (TyDecl tyname_a4xHq uni_a4xHr ann_a4xHs) (TyDecl tyname_a4xR8 uni_a4xR9 ann_a4xHs) (Type tyname_a4xHq uni_a4xHr ann_a4xHs) (Type tyname_a4xR8 uni_a4xR9 ann_a4xHs)
tyDeclKind :: forall tyname_a4xHq uni_a4xHr ann_a4xHs. Lens' (TyDecl tyname_a4xHq uni_a4xHr ann_a4xHs) (Kind ann_a4xHs)
progAnn :: forall tyname_a4vlK name_a4vlL uni_a4vlM fun_a4vlN ann_a4vlO. Lens' (Program tyname_a4vlK name_a4vlL uni_a4vlM fun_a4vlN ann_a4vlO) ann_a4vlO
progVer :: forall tyname_a4vlK name_a4vlL uni_a4vlM fun_a4vlN ann_a4vlO. Lens' (Program tyname_a4vlK name_a4vlL uni_a4vlM fun_a4vlN ann_a4vlO) Version
progTerm :: forall tyname_a4vlK name_a4vlL uni_a4vlM fun_a4vlN ann_a4vlO tyname_a4xn9 name_a4xna uni_a4xnb fun_a4xnc. Lens (Program tyname_a4vlK name_a4vlL uni_a4vlM fun_a4vlN ann_a4vlO) (Program tyname_a4xn9 name_a4xna uni_a4xnb fun_a4xnc ann_a4vlO) (Term tyname_a4vlK name_a4vlL uni_a4vlM fun_a4vlN ann_a4vlO) (Term tyname_a4xn9 name_a4xna uni_a4xnb fun_a4xnc ann_a4vlO)

-- | Map a function over the set of built-in functions.
mapFun :: (fun -> fun') -> Term tyname name uni fun ann -> Term tyname name uni fun' ann

-- | A term name as a de Bruijn index, without the name string.
newtype DeBruijn
DeBruijn :: Index -> DeBruijn
[dbnIndex] :: DeBruijn -> Index

-- | A term name as a de Bruijn index.
data NamedDeBruijn
NamedDeBruijn :: !Text -> !Index -> NamedDeBruijn
[ndbnString] :: NamedDeBruijn -> !Text
[ndbnIndex] :: NamedDeBruijn -> !Index

-- | Convert a <a>Term</a> with <a>TyName</a>s and <a>Name</a>s into a
--   <a>Term</a> with <a>NamedTyDeBruijn</a>s and <a>NamedDeBruijn</a>s.
--   Will throw an error if a free variable is encountered.
deBruijnTerm :: (AsFreeVariableError e, MonadError e m) => Term TyName Name uni fun ann -> m (Term NamedTyDeBruijn NamedDeBruijn uni fun ann)

-- | Convert a <a>Term</a> with <a>NamedTyDeBruijn</a>s and
--   <a>NamedDeBruijn</a>s into a <a>Term</a> with <a>TyName</a>s and
--   <a>Name</a>s. Will throw an error if a free variable is encountered.
unDeBruijnTerm :: (MonadQuote m, AsFreeVariableError e, MonadError e m) => Term NamedTyDeBruijn NamedDeBruijn uni fun ann -> m (Term TyName Name uni fun ann)

-- | All kinds of uniques an entity contains.
type family HasUniques a :: Constraint

-- | The class of things that can be renamed. I.e. things that are capable
--   of satisfying the global uniqueness condition.
class Rename a

-- | Rename <a>Unique</a>s so that they're globally unique. In case there
--   are any free variables, they must be left untouched and bound
--   variables must not get renamed to free ones. Must always assign new
--   names to bound variables, so that <tt>rename</tt> can be used for
--   alpha-renaming as well.
rename :: (Rename a, MonadQuote m) => a -> m a

-- | Normalize every <a>Kind</a> in a <a>Term</a>.
normalizeTypesIn :: (HasUnique tyname TypeUnique, HasUnique name TermUnique, MonadNormalizeType uni m) => Term tyname name uni fun ann -> m (Term tyname name uni fun ann)

-- | Normalize every <a>Kind</a> in a <a>Program</a>.
normalizeTypesInProgram :: (HasUnique tyname TypeUnique, HasUnique name TermUnique, MonadNormalizeType uni m) => Program tyname name uni fun ann -> m (Program tyname name uni fun ann)
class AsTypeError r_a5ot2 term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C | r_a5ot2 -> term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C
_TypeError :: AsTypeError r_a5ot2 term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C => Prism' r_a5ot2 (TypeError term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C)
_KindMismatch :: AsTypeError r_a5ot2 term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C => Prism' r_a5ot2 (ann_a5m0C, Type TyName uni_a5m0A (), Kind (), Kind ())
_TypeMismatch :: AsTypeError r_a5ot2 term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C => Prism' r_a5ot2 (ann_a5m0C, term_a5m0z, Type TyName uni_a5m0A (), Normalized (Type TyName uni_a5m0A ()))
_TyNameMismatch :: AsTypeError r_a5ot2 term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C => Prism' r_a5ot2 (ann_a5m0C, TyName, TyName)
_NameMismatch :: AsTypeError r_a5ot2 term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C => Prism' r_a5ot2 (ann_a5m0C, Name, Name)
_FreeTypeVariableE :: AsTypeError r_a5ot2 term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C => Prism' r_a5ot2 (ann_a5m0C, TyName)
_FreeVariableE :: AsTypeError r_a5ot2 term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C => Prism' r_a5ot2 (ann_a5m0C, Name)
_UnknownBuiltinFunctionE :: AsTypeError r_a5ot2 term_a5m0z uni_a5m0A fun_a5m0B ann_a5m0C => Prism' r_a5ot2 (ann_a5m0C, fun_a5m0B)
data TypeError term uni fun ann
data Error uni fun ann
ParseErrorE :: !ParserErrorBundle -> Error uni fun ann
UniqueCoherencyErrorE :: !UniqueError ann -> Error uni fun ann
TypeErrorE :: !TypeError (Term TyName Name uni fun ()) uni fun ann -> Error uni fun ann
NormCheckErrorE :: !NormCheckError TyName Name uni fun ann -> Error uni fun ann
FreeVariableErrorE :: !FreeVariableError -> Error uni fun ann
class AsError r_a5oGp uni_a5m0w fun_a5m0x ann_a5m0y | r_a5oGp -> uni_a5m0w fun_a5m0x ann_a5m0y
_Error :: AsError r_a5oGp uni_a5m0w fun_a5m0x ann_a5m0y => Prism' r_a5oGp (Error uni_a5m0w fun_a5m0x ann_a5m0y)
_ParseErrorE :: AsError r_a5oGp uni_a5m0w fun_a5m0x ann_a5m0y => Prism' r_a5oGp ParserErrorBundle
_UniqueCoherencyErrorE :: AsError r_a5oGp uni_a5m0w fun_a5m0x ann_a5m0y => Prism' r_a5oGp (UniqueError ann_a5m0y)
_TypeErrorE :: AsError r_a5oGp uni_a5m0w fun_a5m0x ann_a5m0y => Prism' r_a5oGp (TypeError (Term TyName Name uni_a5m0w fun_a5m0x ()) uni_a5m0w fun_a5m0x ann_a5m0y)
_NormCheckErrorE :: AsError r_a5oGp uni_a5m0w fun_a5m0x ann_a5m0y => Prism' r_a5oGp (NormCheckError TyName Name uni_a5m0w fun_a5m0x ann_a5m0y)
_FreeVariableErrorE :: AsError r_a5oGp uni_a5m0w fun_a5m0x ann_a5m0y => Prism' r_a5oGp FreeVariableError
data NormCheckError tyname name uni fun ann
BadType :: !ann -> !Type tyname uni ann -> !Text -> NormCheckError tyname name uni fun ann
BadTerm :: !ann -> !Term tyname name uni fun ann -> !Text -> NormCheckError tyname name uni fun ann
class AsNormCheckError r_a5onp tyname_a5m0D name_a5m0E uni_a5m0F fun_a5m0G ann_a5m0H | r_a5onp -> tyname_a5m0D name_a5m0E uni_a5m0F fun_a5m0G ann_a5m0H
_NormCheckError :: AsNormCheckError r_a5onp tyname_a5m0D name_a5m0E uni_a5m0F fun_a5m0G ann_a5m0H => Prism' r_a5onp (NormCheckError tyname_a5m0D name_a5m0E uni_a5m0F fun_a5m0G ann_a5m0H)
_BadType :: AsNormCheckError r_a5onp tyname_a5m0D name_a5m0E uni_a5m0F fun_a5m0G ann_a5m0H => Prism' r_a5onp (ann_a5m0H, Type tyname_a5m0D uni_a5m0F ann_a5m0H, Text)
_BadTerm :: AsNormCheckError r_a5onp tyname_a5m0D name_a5m0E uni_a5m0F fun_a5m0G ann_a5m0H => Prism' r_a5onp (ann_a5m0H, Term tyname_a5m0D name_a5m0E uni_a5m0F fun_a5m0G ann_a5m0H, Text)
data UniqueError ann
MultiplyDefined :: !Unique -> !ann -> !ann -> UniqueError ann
IncoherentUsage :: !Unique -> !ann -> !ann -> UniqueError ann
FreeVariable :: !Unique -> !ann -> UniqueError ann
class AsUniqueError r_a5ohX ann_a5m0I | r_a5ohX -> ann_a5m0I
_UniqueError :: AsUniqueError r_a5ohX ann_a5m0I => Prism' r_a5ohX (UniqueError ann_a5m0I)
_MultiplyDefined :: AsUniqueError r_a5ohX ann_a5m0I => Prism' r_a5ohX (Unique, ann_a5m0I, ann_a5m0I)
_IncoherentUsage :: AsUniqueError r_a5ohX ann_a5m0I => Prism' r_a5ohX (Unique, ann_a5m0I, ann_a5m0I)
_FreeVariable :: AsUniqueError r_a5ohX ann_a5m0I => Prism' r_a5ohX (Unique, ann_a5m0I)

-- | We cannot do a correct translation to or from de Bruijn indices if the
--   program is not well-scoped. So we throw an error in such a case.
data FreeVariableError
FreeUnique :: !Unique -> FreeVariableError
FreeIndex :: !Index -> FreeVariableError
class AsFreeVariableError r_a1hHq
_FreeVariableError :: AsFreeVariableError r_a1hHq => Prism' r_a1hHq FreeVariableError
_FreeUnique :: AsFreeVariableError r_a1hHq => Prism' r_a1hHq Unique
_FreeIndex :: AsFreeVariableError r_a1hHq => Prism' r_a1hHq Index
data TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
VarF :: ann_i4GRs -> name_i4GRp -> TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
TyAbsF :: ann_i4GRs -> tyname_i4GRo -> Kind ann_i4GRs -> r_a4Mq8 -> TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
LamAbsF :: ann_i4GRs -> name_i4GRp -> Type tyname_i4GRo uni_i4GRq ann_i4GRs -> r_a4Mq8 -> TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
ApplyF :: ann_i4GRs -> r_a4Mq8 -> r_a4Mq8 -> TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
ConstantF :: ann_i4GRs -> Some (ValueOf uni_i4GRq) -> TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
BuiltinF :: ann_i4GRs -> fun_i4GRr -> TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
TyInstF :: ann_i4GRs -> r_a4Mq8 -> Type tyname_i4GRo uni_i4GRq ann_i4GRs -> TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
UnwrapF :: ann_i4GRs -> r_a4Mq8 -> TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
IWrapF :: ann_i4GRs -> Type tyname_i4GRo uni_i4GRq ann_i4GRs -> Type tyname_i4GRo uni_i4GRq ann_i4GRs -> r_a4Mq8 -> TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
ErrorF :: ann_i4GRs -> Type tyname_i4GRo uni_i4GRq ann_i4GRs -> TermF (tyname_i4GRo :: Type) (name_i4GRp :: Type) (uni_i4GRq :: Type -> Type) (fun_i4GRr :: Type) (ann_i4GRs :: Type) r_a4Mq8
data TypeF (tyname_i4GS3 :: Type) (uni_i4GS4 :: Type -> Type) (ann_i4GS5 :: Type) r_a4MlQ
TyVarF :: ann_i4GS5 -> tyname_i4GS3 -> TypeF (tyname_i4GS3 :: Type) (uni_i4GS4 :: Type -> Type) (ann_i4GS5 :: Type) r_a4MlQ
TyFunF :: ann_i4GS5 -> r_a4MlQ -> r_a4MlQ -> TypeF (tyname_i4GS3 :: Type) (uni_i4GS4 :: Type -> Type) (ann_i4GS5 :: Type) r_a4MlQ
TyIFixF :: ann_i4GS5 -> r_a4MlQ -> r_a4MlQ -> TypeF (tyname_i4GS3 :: Type) (uni_i4GS4 :: Type -> Type) (ann_i4GS5 :: Type) r_a4MlQ
TyForallF :: ann_i4GS5 -> tyname_i4GS3 -> Kind ann_i4GS5 -> r_a4MlQ -> TypeF (tyname_i4GS3 :: Type) (uni_i4GS4 :: Type -> Type) (ann_i4GS5 :: Type) r_a4MlQ
TyBuiltinF :: ann_i4GS5 -> SomeTypeIn uni_i4GS4 -> TypeF (tyname_i4GS3 :: Type) (uni_i4GS4 :: Type -> Type) (ann_i4GS5 :: Type) r_a4MlQ
TyLamF :: ann_i4GS5 -> tyname_i4GS3 -> Kind ann_i4GS5 -> r_a4MlQ -> TypeF (tyname_i4GS3 :: Type) (uni_i4GS4 :: Type -> Type) (ann_i4GS5 :: Type) r_a4MlQ
TyAppF :: ann_i4GS5 -> r_a4MlQ -> r_a4MlQ -> TypeF (tyname_i4GS3 :: Type) (uni_i4GS4 :: Type -> Type) (ann_i4GS5 :: Type) r_a4MlQ

-- | A non-transformer version of <a>QuoteT</a>.
type Quote = QuoteT Identity

-- | See <a>runQuoteT</a>.
runQuote :: Quote a -> a

-- | The "quotation" monad transformer. Within this monad you can do safe
--   construction of PLC terms using quasiquotation, fresh-name generation,
--   and parsing.
data QuoteT m a

-- | Run a quote from an empty identifier state. Note that the resulting
--   term cannot necessarily be safely combined with other terms - that
--   should happen inside <a>QuoteT</a>.
runQuoteT :: Monad m => QuoteT m a -> m a

-- | A monad that allows lifting of quoted expressions.
class Monad m => MonadQuote m
liftQuote :: MonadQuote m => Quote a -> m a

-- | Get a fresh <a>Unique</a>.
freshUnique :: MonadQuote m => m Unique

-- | Get a fresh <a>Name</a>, given the annotation and the <a>Text</a>
--   name.
freshName :: MonadQuote m => Text -> m Name

-- | Get a fresh <a>TyName</a>, given the annotation and the <a>Text</a>
--   name.
freshTyName :: MonadQuote m => Text -> m TyName

-- | The parameterized type of results various evaluation engines return.
--   On the PLC side this becomes (via <tt>makeKnown</tt>) either a call to
--   <tt>Error</tt> or a value of the PLC counterpart of type <tt>a</tt>.
data EvaluationResult a
EvaluationSuccess :: !a -> EvaluationResult a
EvaluationFailure :: EvaluationResult a

-- | Applies one program to another. Fails if the versions do not match and
--   tries to merge annotations.
applyProgram :: Semigroup a => Program tyname name uni fun a -> Program tyname name uni fun a -> Maybe (Program tyname name uni fun a)

-- | Count the number of AST nodes in a term.
termSize :: Term tyname name uni fun ann -> Size

-- | Count the number of AST nodes in a type.
typeSize :: Type tyname uni ann -> Size

-- | Count the number of AST nodes in a kind.
--   
--   <pre>
--   &gt;&gt;&gt; kindSize $ Type ()
--   Size {unSize = 1}
--   
--   &gt;&gt;&gt; kindSize $ KindArrow () (KindArrow () (Type ()) (Type ())) (Type ())
--   Size {unSize = 5}
--   </pre>
kindSize :: Kind a -> Size

-- | Count the number of AST nodes in a program.
programSize :: Program tyname name uni fun ann -> Size

-- | Compute the size of the serializabled form of a value.
serialisedSize :: Flat a => a -> Integer

module PlutusCore.Examples.Builtins
size :: forall a. (Bounded a, Enum a) => Int
data ExtensionFun
Factorial :: ExtensionFun
ForallFortyTwo :: ExtensionFun
SumInteger :: ExtensionFun
Const :: ExtensionFun
Id :: ExtensionFun
IdAssumeBool :: ExtensionFun
IdAssumeCheckBool :: ExtensionFun
IdSomeConstantBool :: ExtensionFun
IdIntegerAsBool :: ExtensionFun
IdFInteger :: ExtensionFun
IdList :: ExtensionFun
IdRank2 :: ExtensionFun
ScottToMetaUnit :: ExtensionFun
FailingSucc :: ExtensionFun
ExpensiveSucc :: ExtensionFun
FailingPlus :: ExtensionFun
ExpensivePlus :: ExtensionFun
IsConstant :: ExtensionFun
UnsafeCoerce :: ExtensionFun
UnsafeCoerceEl :: ExtensionFun
Undefined :: ExtensionFun
Absurd :: ExtensionFun
ErrorPrime :: ExtensionFun
Comma :: ExtensionFun
BiconstPair :: ExtensionFun
Swap :: ExtensionFun
SwapEls :: ExtensionFun
ExtensionVersion :: ExtensionFun

-- | Normally <tt>forall</tt> in the type of a Haskell function gets
--   detected and instantiated automatically, however there's no way of
--   doing that for a <tt>forall</tt> that binds a never referenced type
--   variable. Which is OK, because that would be a pretty weird builtin,
--   however it's definable and for the purpose of testing we do introduce
--   such a builtin, hence this definition allowing us to create an
--   <tt>all</tt> that binds a never referenced type variable in Plutus
--   while still using <a>makeBuiltinMeaning</a>.
newtype MetaForall name a
MetaForall :: a -> MetaForall name a
data PlcListRep (a :: Type)
data BuiltinErrorCall
BuiltinErrorCall :: BuiltinErrorCall
instance Data.Hashable.Class.Hashable PlutusCore.Examples.Builtins.ExtensionFun
instance GHC.Generics.Generic PlutusCore.Examples.Builtins.ExtensionFun
instance GHC.Ix.Ix PlutusCore.Examples.Builtins.ExtensionFun
instance GHC.Enum.Bounded PlutusCore.Examples.Builtins.ExtensionFun
instance GHC.Enum.Enum PlutusCore.Examples.Builtins.ExtensionFun
instance GHC.Classes.Ord PlutusCore.Examples.Builtins.ExtensionFun
instance GHC.Classes.Eq PlutusCore.Examples.Builtins.ExtensionFun
instance GHC.Show.Show PlutusCore.Examples.Builtins.ExtensionFun
instance GHC.Exception.Type.Exception PlutusCore.Examples.Builtins.BuiltinErrorCall
instance GHC.Classes.Eq PlutusCore.Examples.Builtins.BuiltinErrorCall
instance GHC.Show.Show PlutusCore.Examples.Builtins.BuiltinErrorCall
instance (uni GHC.Types.~ PlutusCore.Default.Universe.DefaultUni) => PlutusCore.Builtin.Meaning.ToBuiltinMeaning uni PlutusCore.Examples.Builtins.ExtensionFun
instance PlutusCore.Builtin.KnownTypeAst.KnownTypeAst uni a => PlutusCore.Builtin.KnownTypeAst.KnownTypeAst uni (PlutusCore.Examples.Builtins.PlcListRep a)
instance forall kind (name :: PlutusCore.Builtin.Polymorphism.TyNameRep kind) (text :: GHC.Types.Symbol) (uniq :: GHC.TypeNats.Nat) (uni :: * -> *) a. (name GHC.Types.~ 'PlutusCore.Builtin.Polymorphism.TyNameRep text uniq, GHC.TypeLits.KnownSymbol text, GHC.TypeNats.KnownNat uniq, PlutusCore.Builtin.KnownKind.KnownKind kind, PlutusCore.Builtin.KnownTypeAst.KnownTypeAst uni a) => PlutusCore.Builtin.KnownTypeAst.KnownTypeAst uni (PlutusCore.Examples.Builtins.MetaForall name a)
instance forall k term a (name :: k). PlutusCore.Builtin.KnownType.MakeKnownIn PlutusCore.Default.Universe.DefaultUni term a => PlutusCore.Builtin.KnownType.MakeKnownIn PlutusCore.Default.Universe.DefaultUni term (PlutusCore.Examples.Builtins.MetaForall name a)
instance Prettyprinter.Internal.Pretty PlutusCore.Examples.Builtins.ExtensionFun
instance Data.Default.Class.Default (PlutusCore.Builtin.Meaning.BuiltinVersion PlutusCore.Examples.Builtins.ExtensionFun)
instance (GHC.Enum.Bounded a, GHC.Enum.Bounded b) => GHC.Enum.Bounded (Data.Either.Either a b)
instance (GHC.Classes.Eq a, GHC.Classes.Eq b, GHC.Enum.Bounded a, GHC.Enum.Bounded b, GHC.Enum.Enum a, GHC.Enum.Enum b) => GHC.Enum.Enum (Data.Either.Either a b)
instance (GHC.Enum.Bounded a, GHC.Enum.Bounded b, GHC.Ix.Ix a, GHC.Ix.Ix b) => GHC.Ix.Ix (Data.Either.Either a b)
instance (PlutusCore.Builtin.Meaning.ToBuiltinMeaning uni fun1, PlutusCore.Builtin.Meaning.ToBuiltinMeaning uni fun2, Data.Default.Class.Default (PlutusCore.Builtin.Meaning.BuiltinVersion fun1), Data.Default.Class.Default (PlutusCore.Builtin.Meaning.BuiltinVersion fun2)) => PlutusCore.Builtin.Meaning.ToBuiltinMeaning uni (Data.Either.Either fun1 fun2)
instance (Data.Default.Class.Default (PlutusCore.Builtin.Meaning.BuiltinVersion fun1), Data.Default.Class.Default (PlutusCore.Builtin.Meaning.BuiltinVersion fun2)) => Data.Default.Class.Default (PlutusCore.Builtin.Meaning.BuiltinVersion (Data.Either.Either fun1 fun2))
instance PlutusCore.Builtin.KnownTypeAst.KnownTypeAst PlutusCore.Default.Universe.DefaultUni Data.Void.Void
instance (PlutusCore.Core.Type.UniOf term GHC.Types.~ PlutusCore.Default.Universe.DefaultUni) => PlutusCore.Builtin.KnownType.MakeKnownIn PlutusCore.Default.Universe.DefaultUni term Data.Void.Void
instance (PlutusCore.Core.Type.UniOf term GHC.Types.~ PlutusCore.Default.Universe.DefaultUni) => PlutusCore.Builtin.KnownType.ReadKnownIn PlutusCore.Default.Universe.DefaultUni term Data.Void.Void

module PlutusCore.Examples.Data.Pair

-- | Apply a monomorphic function to both components of a pair.
--   
--   <pre>
--   /\(a :: *) -&gt; \(f : a -&gt; a) (p : pair a a) -&gt;
--       comma {a} {a} (f (fst {a} {a} p)) (f (snd {a} {a} p))
--   </pre>
obothPair :: TermLike term TyName Name DefaultUni (Either DefaultFun ExtensionFun) => term ()

module PlutusCore.Examples.Data.List

-- | Monomorphic <tt>map</tt> over built-in lists.
--   
--   /(a :: *) -&gt; (f : a -&gt; a) -&gt; fix {list a} {list a} (rec :
--   list a -&gt; list a) (xs : list a) -&gt; caseList {a} xs {list a} xs
--   (x : a) (xs' : list a) -&gt; cons {a} (f x) (rec xs')
omapList :: Term TyName Name DefaultUni (Either DefaultFun ExtensionFun) ()

module PlutusCore.Examples.Data.Data

-- | Right-folding over <a>Data</a> inside PLC currently hardcoded to only
--   ever return <tt>Data</tt> as a result, 'cause we need to be able to
--   map built-in lists and pairs in the definition of the right fold for
--   <a>Data</a> and we can only do that monomorphically (see Note
--   [Representable built-in functions over polymorphic built-in types]),
--   which forces us to always return a <a>Data</a>. Alternatively we could
--   convert built-in lists and pairs to their non-built-in
--   Scott/Church-encoded forms, map polymorphically and convert back at
--   the call site, but we really only use this definition as a test, so
--   it's fine to make it overly specific for the sake of keeping the
--   actual test trivial.
--   
--   <pre>
--   metaTypeLet r = data in
--       \(fConstr : integer -&gt; list r -&gt; r)
--        (fMap : list (pair r r) -&gt; r)
--        (fList : list r -&gt; r)
--        (fI : integer -&gt; r)
--        (fB : bytestring -&gt; r) -&gt;
--            fix {data} {r} \(rec : data -&gt; r) (d : data) -&gt;
--                caseData
--                    d
--                    {r}
--                    (\(i : integer) (ds : list data) -&gt; fConstr i (omapList {data} rec ds)
--                    (\(es : list (pair data data)) -&gt;
--                        fMap (omapList {pair data data} (obothPair {data} rec) es))
--                    (\(ds : list data) -&gt; fList (omapList {data} rec ds))
--                    fI
--                    fB
--   </pre>
ofoldrData :: Term TyName Name DefaultUni (Either DefaultFun ExtensionFun) ()


-- | This module exports all available examples via a data type which
--   allows to test various procedures (pretty-printing, type checking,
--   etc) over the entire set of examples in a convenient way: each time a
--   function / data type is added to examples, none of the tests is
--   required to be adapted, instead you just add the new definition to
--   <a>examples</a> defined below and all the tests see it automatically.
module PlutusCore.Examples.Everything

-- | All examples exported as a single value.
examples :: PlcFolderContents DefaultUni (Either DefaultFun ExtensionFun)
builtins :: PlcFolderContents DefaultUni ExtensionFun

module UntypedPlutusCore.Core.Type

-- | Extract the universe from a type.
type family UniOf a :: Type -> Type

-- | The version of Plutus Core used by this program.
--   
--   The intention is to convey different levels of backwards compatibility
--   for existing scripts: - Major version changes are
--   backwards-incompatible - Minor version changes are
--   backwards-compatible - Patch version changes should be entirely
--   invisible (and we will likely not use this level)
--   
--   The version used should be changed only when the <i>language
--   itself</i> changes. For example, adding a new kind of term to the
--   language would require a minor version bump; removing a kind of term
--   would require a major version bump.
--   
--   Similarly, changing the semantics of the language will require a
--   version bump, typically a major one. This is the main reason why the
--   version is actually tracked in the AST: we can have two language
--   versions with identical ASTs but different semantics, so we need to
--   track the version explicitly.
--   
--   Compatibility is about compatibility for specific scripts, not about
--   e.g. tools which consume scripts. Adding a new kind of term does not
--   change how existing scripts behave, but does change what tools would
--   need to do to process scripts.
data Version
Version :: Natural -> Natural -> Natural -> Version
[_versionMajor] :: Version -> Natural
[_versionMinor] :: Version -> Natural
[_versionPatch] :: Version -> Natural

-- | This is a wrapper to mark the place where the binder is introduced
--   (i.e. LamAbs/TyAbs) and not where it is actually used (TyVar/Var..).
--   This marking allows us to skip the (de)serialization of binders at
--   LamAbs/TyAbs positions iff <tt>name</tt> is DeBruijn-encoded (level or
--   index). See for example the instance of <a>Flat</a>
newtype Binder name
Binder :: name -> Binder name
[unBinder] :: Binder name -> name

-- | The type of Untyped Plutus Core terms. Mirrors the type of Typed
--   Plutus Core terms except
--   
--   <ol>
--   <li>all types are removed</li>
--   <li><tt>IWrap</tt> and <tt>Unwrap</tt> are removed</li>
--   <li>type abstractions are replaced with <a>Delay</a></li>
--   <li>type instantiations are replaced with <a>Force</a></li>
--   </ol>
--   
--   The latter two are due to the fact that we don't have value
--   restriction in Typed Plutus Core and hence a computation can be stuck
--   expecting only a single type argument for the computation to become
--   unstuck. Therefore we can't just silently remove type abstractions and
--   instantiations and need to replace them with something else that also
--   blocks evaluation (in order for the semantics of an erased program to
--   match with the semantics of the original typed one). <a>Delay</a> and
--   <a>Force</a> serve exactly this purpose.
data Term name uni fun ann
Var :: !ann -> !name -> Term name uni fun ann
LamAbs :: !ann -> !name -> !Term name uni fun ann -> Term name uni fun ann
Apply :: !ann -> !Term name uni fun ann -> !Term name uni fun ann -> Term name uni fun ann
Force :: !ann -> !Term name uni fun ann -> Term name uni fun ann
Delay :: !ann -> !Term name uni fun ann -> Term name uni fun ann
Constant :: !ann -> !Some (ValueOf uni) -> Term name uni fun ann
Builtin :: !ann -> !fun -> Term name uni fun ann
Error :: !ann -> Term name uni fun ann

-- | A <a>Program</a> is simply a <a>Term</a> coupled with a
--   <tt>Version</tt> of the core language.
data Program name uni fun ann
Program :: ann -> Version -> Term name uni fun ann -> Program name uni fun ann
[_progAnn] :: Program name uni fun ann -> ann
[_progVer] :: Program name uni fun ann -> Version
[_progTerm] :: Program name uni fun ann -> Term name uni fun ann
progAnn :: forall name_a6JW7 uni_a6JW8 fun_a6JW9 ann_a6JWa. Lens' (Program name_a6JW7 uni_a6JW8 fun_a6JW9 ann_a6JWa) ann_a6JWa
progVer :: forall name_a6JW7 uni_a6JW8 fun_a6JW9 ann_a6JWa. Lens' (Program name_a6JW7 uni_a6JW8 fun_a6JW9 ann_a6JWa) Version
progTerm :: forall name_a6JW7 uni_a6JW8 fun_a6JW9 ann_a6JWa name_a6KGi uni_a6KGj fun_a6KGk. Lens (Program name_a6JW7 uni_a6JW8 fun_a6JW9 ann_a6JWa) (Program name_a6KGi uni_a6KGj fun_a6KGk ann_a6JWa) (Term name_a6JW7 uni_a6JW8 fun_a6JW9 ann_a6JWa) (Term name_a6KGi uni_a6KGj fun_a6KGk ann_a6JWa)
bindFunM :: Monad m => (ann -> fun -> m (Term name uni fun' ann)) -> Term name uni fun ann -> m (Term name uni fun' ann)
bindFun :: (ann -> fun -> Term name uni fun' ann) -> Term name uni fun ann -> Term name uni fun' ann
mapFun :: (ann -> fun -> fun') -> Term name uni fun ann -> Term name uni fun' ann

-- | Return the outermost annotation of a <a>Term</a>.
termAnn :: Term name uni fun ann -> ann

-- | An untyped "variable declaration", i.e. a name for a variable.
data UVarDecl name ann
UVarDecl :: ann -> name -> UVarDecl name ann
[_uvarDeclAnn] :: UVarDecl name ann -> ann
[_uvarDeclName] :: UVarDecl name ann -> name
uvarDeclName :: forall name_a6KGH ann_a6KGI name_a6KSN. Lens (UVarDecl name_a6KGH ann_a6KGI) (UVarDecl name_a6KSN ann_a6KGI) name_a6KGH name_a6KSN
uvarDeclAnn :: forall name_a6KGH ann_a6KGI ann_a6KSM. Lens (UVarDecl name_a6KGH ann_a6KGI) (UVarDecl name_a6KGH ann_a6KSM) ann_a6KGI ann_a6KSM
instance GHC.Generics.Generic (UntypedPlutusCore.Core.Type.UVarDecl name ann)
instance (GHC.Show.Show ann, GHC.Show.Show name) => GHC.Show.Show (UntypedPlutusCore.Core.Type.UVarDecl name ann)
instance GHC.Base.Functor (UntypedPlutusCore.Core.Type.UVarDecl name)
instance PlutusCore.MkPlc.TermLike (UntypedPlutusCore.Core.Type.Term name uni fun) PlutusCore.Name.TyName name uni fun
instance PlutusCore.Builtin.HasConstant.HasConstant (UntypedPlutusCore.Core.Type.Term name uni fun ())
instance (Universe.Core.Everywhere uni Control.DeepSeq.NFData, Universe.Core.Closed uni, Control.DeepSeq.NFData ann, Control.DeepSeq.NFData name, Control.DeepSeq.NFData fun) => Control.DeepSeq.NFData (UntypedPlutusCore.Core.Type.Term name uni fun ann)
instance GHC.Generics.Generic (UntypedPlutusCore.Core.Type.Term name uni fun ann)
instance GHC.Base.Functor (UntypedPlutusCore.Core.Type.Term name uni fun)
instance (Universe.Core.Everywhere uni GHC.Show.Show, Data.GADT.Internal.GShow uni, Universe.Core.Closed uni, GHC.Show.Show ann, GHC.Show.Show name, GHC.Show.Show fun) => GHC.Show.Show (UntypedPlutusCore.Core.Type.Term name uni fun ann)
instance (Universe.Core.Everywhere uni Control.DeepSeq.NFData, Universe.Core.Closed uni, Control.DeepSeq.NFData ann, Control.DeepSeq.NFData name, Control.DeepSeq.NFData fun) => Control.DeepSeq.NFData (UntypedPlutusCore.Core.Type.Program name uni fun ann)
instance GHC.Generics.Generic (UntypedPlutusCore.Core.Type.Program name uni fun ann)
instance GHC.Base.Functor (UntypedPlutusCore.Core.Type.Program name uni fun)
instance (Universe.Core.Everywhere uni GHC.Show.Show, Data.GADT.Internal.GShow uni, Universe.Core.Closed uni, GHC.Show.Show ann, GHC.Show.Show name, GHC.Show.Show fun) => GHC.Show.Show (UntypedPlutusCore.Core.Type.Program name uni fun ann)

module UntypedPlutusCore.Core

-- | Get all the direct child 'name a's of the given <a>Term</a> from
--   <a>LamAbs</a>es.
termBinds :: Traversal' (Term name uni fun ann) name

-- | Get all the direct child 'name a's of the given <a>Term</a> from
--   <a>Var</a>s.
termVars :: Traversal' (Term name uni fun ann) name

-- | Get all the direct child <a>Unique</a>s of the given <a>Term</a>.
termUniques :: HasUniques (Term name uni fun ann) => Traversal' (Term name uni fun ann) Unique

-- | Get all the direct child <a>Term</a>s of the given <a>Term</a>.
termSubterms :: Traversal' (Term name uni fun ann) (Term name uni fun ann)

-- | Get all the transitive child <a>Term</a>s of the given <a>Term</a>.
termSubtermsDeep :: Fold (Term name uni fun ann) (Term name uni fun ann)

-- | Get all the transitive child <a>Unique</a>s of the given <a>Term</a>.
termUniquesDeep :: HasUniques (Term name uni fun ann) => Fold (Term name uni fun ann) Unique
data TermF (name_i6O2u :: Type) (uni_i6O2v :: Type -> Type) (fun_i6O2w :: Type) (ann_i6O2x :: Type) r_a6OtZ
VarF :: !ann_i6O2x -> !name_i6O2u -> TermF (name_i6O2u :: Type) (uni_i6O2v :: Type -> Type) (fun_i6O2w :: Type) (ann_i6O2x :: Type) r_a6OtZ
LamAbsF :: !ann_i6O2x -> !name_i6O2u -> !r_a6OtZ -> TermF (name_i6O2u :: Type) (uni_i6O2v :: Type -> Type) (fun_i6O2w :: Type) (ann_i6O2x :: Type) r_a6OtZ
ApplyF :: !ann_i6O2x -> !r_a6OtZ -> !r_a6OtZ -> TermF (name_i6O2u :: Type) (uni_i6O2v :: Type -> Type) (fun_i6O2w :: Type) (ann_i6O2x :: Type) r_a6OtZ
ForceF :: !ann_i6O2x -> !r_a6OtZ -> TermF (name_i6O2u :: Type) (uni_i6O2v :: Type -> Type) (fun_i6O2w :: Type) (ann_i6O2x :: Type) r_a6OtZ
DelayF :: !ann_i6O2x -> !r_a6OtZ -> TermF (name_i6O2u :: Type) (uni_i6O2v :: Type -> Type) (fun_i6O2w :: Type) (ann_i6O2x :: Type) r_a6OtZ
ConstantF :: !ann_i6O2x -> !Some (ValueOf uni_i6O2v) -> TermF (name_i6O2u :: Type) (uni_i6O2v :: Type -> Type) (fun_i6O2w :: Type) (ann_i6O2x :: Type) r_a6OtZ
BuiltinF :: !ann_i6O2x -> !fun_i6O2w -> TermF (name_i6O2u :: Type) (uni_i6O2v :: Type -> Type) (fun_i6O2w :: Type) (ann_i6O2x :: Type) r_a6OtZ
ErrorF :: !ann_i6O2x -> TermF (name_i6O2u :: Type) (uni_i6O2v :: Type -> Type) (fun_i6O2w :: Type) (ann_i6O2x :: Type) r_a6OtZ

-- | Using 4 bits to encode term tags.
termTagWidth :: NumBits
encodeTermTag :: Word8 -> Encoding
decodeTermTag :: Get Word8
encodeTerm :: forall name uni fun ann. (Closed uni, uni `Everywhere` Flat, Flat fun, Flat ann, Flat name, Flat (Binder name)) => Term name uni fun ann -> Encoding
decodeTerm :: forall name uni fun ann. (Closed uni, uni `Everywhere` Flat, Flat fun, Flat ann, Flat name, Flat (Binder name)) => (fun -> Maybe String) -> Get (Term name uni fun ann)
sizeTerm :: forall name uni fun ann. (Closed uni, uni `Everywhere` Flat, Flat fun, Flat ann, Flat name, Flat (Binder name)) => Term name uni fun ann -> NumBits -> NumBits
decodeProgram :: forall name uni fun ann. (Closed uni, uni `Everywhere` Flat, Flat fun, Flat ann, Flat name, Flat (Binder name)) => (fun -> Maybe String) -> Get (Program name uni fun ann)

module UntypedPlutusCore.Check.Uniques
checkProgram :: (Ord ann, HasUnique name TermUnique, AsUniqueError e ann, MonadError e m) => (UniqueError ann -> Bool) -> Program name uni fun ann -> m ()
checkTerm :: (Ord ann, HasUnique name TermUnique, AsUniqueError e ann, MonadError e m) => (UniqueError ann -> Bool) -> Term name uni fun ann -> m ()
data UniqueError ann
MultiplyDefined :: !Unique -> !ann -> !ann -> UniqueError ann
IncoherentUsage :: !Unique -> !ann -> !ann -> UniqueError ann
FreeVariable :: !Unique -> !ann -> UniqueError ann
class AsUniqueError r_a5ohX ann_a5m0I | r_a5ohX -> ann_a5m0I
_UniqueError :: AsUniqueError r_a5ohX ann_a5m0I => Prism' r_a5ohX (UniqueError ann_a5m0I)
_MultiplyDefined :: AsUniqueError r_a5ohX ann_a5m0I => Prism' r_a5ohX (Unique, ann_a5m0I, ann_a5m0I)
_IncoherentUsage :: AsUniqueError r_a5ohX ann_a5m0I => Prism' r_a5ohX (Unique, ann_a5m0I, ann_a5m0I)
_FreeVariable :: AsUniqueError r_a5ohX ann_a5m0I => Prism' r_a5ohX (Unique, ann_a5m0I)

module PlutusCore.Compiler.Erase

-- | Erase a Typed Plutus Core term to its untyped counterpart.
eraseTerm :: Term tyname name uni fun ann -> Term name uni fun ann
eraseProgram :: Program tyname name uni fun ann -> Program name uni fun ann

module UntypedPlutusCore.Core.Zip

-- | Zip two programs using a combinator function for annotations.
--   
--   Throws an error if the input programs are not "equal" modulo
--   annotations. Note that the function is "left-biased", so in case that
--   the 2 input programs contain <tt>Name</tt>s, the output program will
--   contain just the <tt>Name</tt>s of the first input program.
pzipWith :: forall p name uni fun ann1 ann2 ann3 m. (p ~ Program name uni fun, Eq (Term name uni fun ()), MonadError String m) => (ann1 -> ann2 -> ann3) -> p ann1 -> p ann2 -> m (p ann3)

-- | Zip 2 programs by pairing their annotations
pzip :: (p ~ Program name uni fun, Eq (Term name uni fun ()), MonadError String m) => p ann1 -> p ann2 -> m (p (ann1, ann2))

-- | Zip two terms using a combinator function for annotations.
--   
--   Throws an error if the input terms are not "equal" modulo annotations.
--   Note that the function is "left-biased", so in case that the 2 input
--   terms contain <tt>Name</tt>s, the output term will contain just the
--   <tt>Name</tt>s of the first input term. TODO: this is not an optimal
--   implementation
tzipWith :: forall t name uni fun ann1 ann2 ann3 m. (t ~ Term name uni fun, Eq (t ()), MonadError String m) => (ann1 -> ann2 -> ann3) -> t ann1 -> t ann2 -> m (t ann3)

-- | Zip 2 terms by pairing their annotations
tzip :: (t ~ Term name uni fun, Eq (t ()), MonadError String m) => t ann1 -> t ann2 -> m (t (ann1, ann2))


-- | Support for using de Bruijn indices for term names.
module UntypedPlutusCore.DeBruijn

-- | A relative index used for de Bruijn identifiers.
newtype Index
Index :: Word64 -> Index
class HasIndex a
index :: HasIndex a => Lens' a Index

-- | A term name as a de Bruijn index, without the name string.
newtype DeBruijn
DeBruijn :: Index -> DeBruijn
[dbnIndex] :: DeBruijn -> Index

-- | A term name as a de Bruijn index.
data NamedDeBruijn
NamedDeBruijn :: !Text -> !Index -> NamedDeBruijn
[ndbnString] :: NamedDeBruijn -> !Text
[ndbnIndex] :: NamedDeBruijn -> !Index

-- | A wrapper around nameddebruijn that must hold the invariant of
--   name=<a>fakeName</a>.
newtype FakeNamedDeBruijn
FakeNamedDeBruijn :: NamedDeBruijn -> FakeNamedDeBruijn

-- | We cannot do a correct translation to or from de Bruijn indices if the
--   program is not well-scoped. So we throw an error in such a case.
data FreeVariableError
FreeUnique :: !Unique -> FreeVariableError
FreeIndex :: !Index -> FreeVariableError
class AsFreeVariableError r_a1hHq
_FreeVariableError :: AsFreeVariableError r_a1hHq => Prism' r_a1hHq FreeVariableError
_FreeUnique :: AsFreeVariableError r_a1hHq => Prism' r_a1hHq Unique
_FreeIndex :: AsFreeVariableError r_a1hHq => Prism' r_a1hHq Index

-- | Convert a <a>Term</a> with <a>Name</a>s into a <a>Term</a> with
--   <a>DeBruijn</a>s. Will throw an error if a free variable is
--   encountered.
deBruijnTerm :: (AsFreeVariableError e, MonadError e m) => Term Name uni fun ann -> m (Term NamedDeBruijn uni fun ann)

-- | Convert a <a>Term</a> with <a>DeBruijn</a>s into a <a>Term</a> with
--   <a>Name</a>s. Will throw an error if a free variable is encountered.
unDeBruijnTerm :: (MonadQuote m, AsFreeVariableError e, MonadError e m) => Term NamedDeBruijn uni fun ann -> m (Term Name uni fun ann)
unNameDeBruijn :: NamedDeBruijn -> DeBruijn
fakeNameDeBruijn :: DeBruijn -> NamedDeBruijn

-- | Takes a "handler" function to execute when encountering free
--   variables.
deBruijnTermWith :: Monad m => (Unique -> ReaderT Levels m Index) -> Term Name uni fun ann -> m (Term NamedDeBruijn uni fun ann)

-- | Takes a "handler" function to execute when encountering free
--   variables.
unDeBruijnTermWith :: MonadQuote m => (Index -> ReaderT Levels m Unique) -> Term NamedDeBruijn uni fun ann -> m (Term Name uni fun ann)

-- | A different implementation of a handler, where "free" debruijn indices
--   do not throw an error but are instead gracefully converted to fresh
--   uniques. These generated uniques remain free; i.e. if the original
--   term was open, it will remain open after applying this handler. These
--   generated free uniques are consistent across the open term (by using a
--   state cache).
freeIndexAsConsistentLevel :: (MonadReader Levels m, MonadState (Map Level Unique) m, MonadQuote m) => Index -> m Unique

-- | The LamAbs index (for debruijn indices) and the starting level of
--   DeBruijn monad
deBruijnInitIndex :: Index

module UntypedPlutusCore.Check.Scope

-- | A pass to check that the input term: 1) does not contain free
--   variables and 2) that all binders are set to debruijn index 0.
--   
--   Feeding the result of the debruijnification to this function is
--   expected to pass.
--   
--   On the other hand, because of (2), this pass is stricter than the
--   undebruijnification's (indirect) scope-checking, see NOTE: [DeBruijn
--   indices of Binders].
--   
--   Inlining this function makes a big difference, since it will usually
--   be called in a context where all the type variables are known. That
--   then means that GHC can optimize go locally in a completely
--   monomorphic setting, which helps a lot.
checkScope :: forall e m name uni fun a. (HasIndex name, MonadError e m, AsFreeVariableError e) => Term name uni fun a -> m ()

module UntypedPlutusCore.Evaluation.Machine.Cek.CekMachineCosts

-- | Costs for evaluating AST nodes. Times should be specified in
--   picoseconds, memory sizes in bytes.
data CekMachineCosts
CekMachineCosts :: ExBudget -> ExBudget -> ExBudget -> ExBudget -> ExBudget -> ExBudget -> ExBudget -> ExBudget -> CekMachineCosts
[cekStartupCost] :: CekMachineCosts -> ExBudget
[cekVarCost] :: CekMachineCosts -> ExBudget
[cekConstCost] :: CekMachineCosts -> ExBudget
[cekLamCost] :: CekMachineCosts -> ExBudget
[cekDelayCost] :: CekMachineCosts -> ExBudget
[cekForceCost] :: CekMachineCosts -> ExBudget
[cekApplyCost] :: CekMachineCosts -> ExBudget

-- | Just the cost of evaluating a Builtin node, not the builtin itself.
--   There's no entry for Error since we'll be exiting anyway; also, what
--   would happen if calling <tt>Error</tt> caused the budget to be
--   exceeded?
[cekBuiltinCost] :: CekMachineCosts -> ExBudget

-- | The prefix of the field names in the CekMachineCosts type, used for
--   extracting the CekMachineCosts component of the ledger's cost model
--   parameters. See Note [Cost model parameters] in CostModelInterface.
cekMachineCostsPrefix :: Text
unitCekMachineCosts :: CekMachineCosts
instance Data.Aeson.Types.ToJSON.ToJSON UntypedPlutusCore.Evaluation.Machine.Cek.CekMachineCosts.CekMachineCosts
instance Data.Aeson.Types.FromJSON.FromJSON UntypedPlutusCore.Evaluation.Machine.Cek.CekMachineCosts.CekMachineCosts
instance NoThunks.Class.NoThunks UntypedPlutusCore.Evaluation.Machine.Cek.CekMachineCosts.CekMachineCosts
instance Control.DeepSeq.NFData UntypedPlutusCore.Evaluation.Machine.Cek.CekMachineCosts.CekMachineCosts
instance Language.Haskell.TH.Syntax.Lift UntypedPlutusCore.Evaluation.Machine.Cek.CekMachineCosts.CekMachineCosts
instance GHC.Generics.Generic UntypedPlutusCore.Evaluation.Machine.Cek.CekMachineCosts.CekMachineCosts
instance GHC.Show.Show UntypedPlutusCore.Evaluation.Machine.Cek.CekMachineCosts.CekMachineCosts
instance GHC.Classes.Eq UntypedPlutusCore.Evaluation.Machine.Cek.CekMachineCosts.CekMachineCosts

module PlutusCore.Evaluation.Machine.CostModelInterface

-- | A raw representation of the ledger's cost model parameters.
--   
--   The associated keys/names to the parameter values are arbitrarily set
--   by the plutus team; the ledger does not hold any such names.
--   
--   See Note [Cost model parameters]
type CostModelParams = Map Text Integer

-- | Costs for evaluating AST nodes. Times should be specified in
--   picoseconds, memory sizes in bytes.
data CekMachineCosts

-- | Given a CostModel, produce a single map containing the parameters from
--   both components
extractCostModelParams :: (ToJSON machinecosts, ToJSON builtincosts) => CostModel machinecosts builtincosts -> Maybe CostModelParams

-- | Update a CostModel for the CEK machine with a given set of parameters.
--   Note that this is costly. See <a>here</a>. Callers are recommended to
--   call this once and cache the results.
applyCostModelParams :: (FromJSON evaluatorcosts, FromJSON builtincosts, ToJSON evaluatorcosts, ToJSON builtincosts, MonadError CostModelApplyError m) => CostModel evaluatorcosts builtincosts -> CostModelParams -> m (CostModel evaluatorcosts builtincosts)

-- | A fatal error when trying to create a cost given some plain costmodel
--   parameters.
data CostModelApplyError

-- | a costmodel parameter with the give name does not exist in the
--   costmodel to be applied upon
CMUnknownParamError :: !Text -> CostModelApplyError

-- | internal error when we are transforming the applyParams' input to json
--   (should not happen)
CMInternalReadError :: CostModelApplyError

-- | internal error when we are transforming the applied params from json
--   with given jsonstring error (should not happen)
CMInternalWriteError :: !String -> CostModelApplyError

-- | See Note [Cost model parameters from the ledger's point of view]
CMTooFewParamsError :: !Int -> !Int -> CostModelApplyError
[cmTooFewExpected] :: CostModelApplyError -> !Int
[cmTooFewActual] :: CostModelApplyError -> !Int

-- | A non-fatal warning when trying to create a cost given some plain
--   costmodel parameters.
data CostModelApplyWarn

-- | More costmodel parameters given, than expected
--   
--   See Note [Cost model parameters from the ledger's point of view]
CMTooManyParamsWarn :: !Int -> !Int -> CostModelApplyWarn
[cmTooManyExpected] :: CostModelApplyWarn -> !Int
[cmTooManyActual] :: CostModelApplyWarn -> !Int
instance GHC.Exception.Type.Exception PlutusCore.Evaluation.Machine.CostModelInterface.CostModelApplyError
instance GHC.Show.Show PlutusCore.Evaluation.Machine.CostModelInterface.CostModelApplyError
instance Prettyprinter.Internal.Pretty PlutusCore.Evaluation.Machine.CostModelInterface.CostModelApplyWarn
instance Prettyprinter.Internal.Pretty PlutusCore.Evaluation.Machine.CostModelInterface.CostModelApplyError


-- | The CEK machine. The CEK machine relies on variables having non-equal
--   <tt>Unique</tt>s whenever they have non-equal string names. I.e.
--   <tt>Unique</tt>s are used instead of string names. This is for
--   efficiency reasons. The CEK machines handles name capture by design.
module UntypedPlutusCore.Evaluation.Machine.Cek.Internal

-- | The parameterized type of results various evaluation engines return.
--   On the PLC side this becomes (via <tt>makeKnown</tt>) either a call to
--   <tt>Error</tt> or a value of the PLC counterpart of type <tt>a</tt>.
data EvaluationResult a
EvaluationSuccess :: !a -> EvaluationResult a
EvaluationFailure :: EvaluationResult a
data CekValue uni fun ann
VCon :: !Some (ValueOf uni) -> CekValue uni fun ann
VDelay :: !NTerm uni fun ann -> !CekValEnv uni fun ann -> CekValue uni fun ann
VLamAbs :: !NamedDeBruijn -> !NTerm uni fun ann -> !CekValEnv uni fun ann -> CekValue uni fun ann

-- | A partial builtin application, accumulating arguments for eventual
--   full application. We don't need a <a>CekValEnv</a> here unlike in the
--   other constructors, because <a>VBuiltin</a> values always store their
--   corresponding <a>Term</a>s fully discharged, see the comments at the
--   call sites (search for <a>VBuiltin</a>).
VBuiltin :: !fun -> NTerm uni fun () -> !BuiltinRuntime (CekValue uni fun ann) -> CekValue uni fun ann
data CekUserError

-- | The final overspent (i.e. negative) budget.
CekOutOfExError :: !ExRestrictingBudget -> CekUserError

-- | Error has been called or a builtin application has failed
CekEvaluationFailure :: CekUserError

-- | The CEK machine-specific <a>EvaluationException</a>.
type CekEvaluationException name uni fun = EvaluationException CekUserError (MachineError fun) (Term name uni fun ())

-- | The CEK machine is parameterized over a <tt>spendBudget</tt> function.
--   This makes the budgeting machinery extensible and allows us to
--   separate budgeting logic from evaluation logic and avoid branching on
--   the union of all possible budgeting state types during evaluation.
newtype CekBudgetSpender uni fun s
CekBudgetSpender :: (ExBudgetCategory fun -> ExBudget -> CekM uni fun s ()) -> CekBudgetSpender uni fun s
[unCekBudgetSpender] :: CekBudgetSpender uni fun s -> ExBudgetCategory fun -> ExBudget -> CekM uni fun s ()

-- | Runtime budgeting info.
data ExBudgetInfo cost uni fun s
ExBudgetInfo :: !CekBudgetSpender uni fun s -> !ST s cost -> !ST s ExBudget -> ExBudgetInfo cost uni fun s

-- | A spending function.
[_exBudgetModeSpender] :: ExBudgetInfo cost uni fun s -> !CekBudgetSpender uni fun s

-- | For accessing the final state.
[_exBudgetModeGetFinal] :: ExBudgetInfo cost uni fun s -> !ST s cost

-- | For accessing the cumulative budget.
[_exBudgetModeGetCumulative] :: ExBudgetInfo cost uni fun s -> !ST s ExBudget

-- | A budgeting mode to execute the CEK machine in.
newtype ExBudgetMode cost uni fun
ExBudgetMode :: (forall s. ST s (ExBudgetInfo cost uni fun s)) -> ExBudgetMode cost uni fun
[unExBudgetMode] :: ExBudgetMode cost uni fun -> forall s. ST s (ExBudgetInfo cost uni fun s)

-- | The CEK machine is parameterized over an emitter function, similar to
--   <a>CekBudgetSpender</a>.
type CekEmitter uni fun s = DList Text -> CekM uni fun s ()

-- | Runtime emitter info, similar to <a>ExBudgetInfo</a>.
data CekEmitterInfo uni fun s
CekEmitterInfo :: !CekEmitter uni fun s -> !ST s [Text] -> CekEmitterInfo uni fun s
[_cekEmitterInfoEmit] :: CekEmitterInfo uni fun s -> !CekEmitter uni fun s
[_cekEmitterInfoGetFinal] :: CekEmitterInfo uni fun s -> !ST s [Text]

-- | An emitting mode to execute the CEK machine in, similar to
--   <a>ExBudgetMode</a>.
newtype EmitterMode uni fun
EmitterMode :: (forall s. ST s ExBudget -> ST s (CekEmitterInfo uni fun s)) -> EmitterMode uni fun
[unEmitterMode] :: EmitterMode uni fun -> forall s. ST s ExBudget -> ST s (CekEmitterInfo uni fun s)

-- | The monad the CEK machine runs in.
newtype CekM uni fun s a
CekM :: ST s a -> CekM uni fun s a
[unCekM] :: CekM uni fun s a -> ST s a

-- | An error and (optionally) what caused it.
data ErrorWithCause err cause
ErrorWithCause :: !err -> !Maybe cause -> ErrorWithCause err cause
[_ewcError] :: ErrorWithCause err cause -> !err
[_ewcCause] :: ErrorWithCause err cause -> !Maybe cause

-- | The type of errors (all of them) which can occur during evaluation
--   (some are used-caused, some are internal).
data EvaluationError user internal

-- | Indicates bugs.
InternalEvaluationError :: !internal -> EvaluationError user internal

-- | Indicates user errors.
UserEvaluationError :: !user -> EvaluationError user internal
data ExBudgetCategory fun
BStep :: StepKind -> ExBudgetCategory fun
BBuiltinApp :: fun -> ExBudgetCategory fun
BStartup :: ExBudgetCategory fun
data StepKind
BConst :: StepKind
BVar :: StepKind
BLamAbs :: StepKind
BApply :: StepKind
BDelay :: StepKind
BForce :: StepKind
BBuiltin :: StepKind

-- | The set of constraints we need to be able to print things in
--   universes, which we need in order to throw exceptions.
type PrettyUni uni fun = (Pretty (SomeTypeIn uni), Closed uni, uni `Everywhere` PrettyConst, Pretty fun, Typeable uni, Typeable fun)

-- | Turn any <a>UserEvaluationError</a> into an <a>EvaluationFailure</a>.
extractEvaluationResult :: Either (EvaluationException user internal term) a -> Either (ErrorWithCause internal term) (EvaluationResult a)

-- | Evaluate a term using the CEK machine and keep track of costing,
--   logging is optional.
runCekDeBruijn :: PrettyUni uni fun => MachineParameters CekMachineCosts fun (CekValue uni fun ann) -> ExBudgetMode cost uni fun -> EmitterMode uni fun -> NTerm uni fun ann -> (Either (CekEvaluationException NamedDeBruijn uni fun) (NTerm uni fun ()), cost, [Text])

-- | Convert a <a>CekValue</a> into a <a>Term</a> by replacing all bound
--   variables with the terms they're bound to (which themselves have to be
--   obtain by recursively discharging values).
dischargeCekValue :: CekValue uni fun ann -> NTerm uni fun ()

-- | The context in which the machine operates.
--   
--   Morally, this is a stack of frames, but we use the "intrusive list"
--   representation so that we can match on context and the top frame in a
--   single, strict pattern match.
data Context uni fun ann

-- | <pre>
--   [V _]
--   </pre>
FrameApplyFun :: !CekValue uni fun ann -> !Context uni fun ann -> Context uni fun ann

-- | <pre>
--   [_ N]
--   </pre>
FrameApplyArg :: !CekValEnv uni fun ann -> !NTerm uni fun ann -> !Context uni fun ann -> Context uni fun ann

-- | <pre>
--   (force _)
--   </pre>
FrameForce :: !Context uni fun ann -> Context uni fun ann
NoFrame :: Context uni fun ann
type CekValEnv uni fun ann = RAList (CekValue uni fun ann)

-- | Constraint requiring all of the machine's implicit parameters.
type GivenCekReqs uni fun ann s = (GivenCekRuntime uni fun ann, GivenCekEmitter uni fun s, GivenCekSpender uni fun s, GivenCekSlippage, GivenCekCosts)

-- | Implicit parameter for budget spender.
type GivenCekSpender uni fun s = (?cekBudgetSpender :: (CekBudgetSpender uni fun s))
type Slippage = Word8

-- | The default number of slippage (in machine steps) to allow.
defaultSlippage :: Slippage

-- | The <a>Term</a>s that CEK can execute must have DeBruijn binders
--   <tt>Name</tt> is not necessary but we leave it here for simplicity and
--   debuggability.
type NTerm uni fun = Term NamedDeBruijn uni fun
instance Data.Hashable.Class.Hashable UntypedPlutusCore.Evaluation.Machine.Cek.Internal.StepKind
instance Control.DeepSeq.NFData UntypedPlutusCore.Evaluation.Machine.Cek.Internal.StepKind
instance GHC.Enum.Bounded UntypedPlutusCore.Evaluation.Machine.Cek.Internal.StepKind
instance GHC.Enum.Enum UntypedPlutusCore.Evaluation.Machine.Cek.Internal.StepKind
instance GHC.Generics.Generic UntypedPlutusCore.Evaluation.Machine.Cek.Internal.StepKind
instance GHC.Classes.Ord UntypedPlutusCore.Evaluation.Machine.Cek.Internal.StepKind
instance GHC.Classes.Eq UntypedPlutusCore.Evaluation.Machine.Cek.Internal.StepKind
instance GHC.Show.Show UntypedPlutusCore.Evaluation.Machine.Cek.Internal.StepKind
instance Data.Hashable.Class.Hashable fun => Data.Hashable.Class.Hashable (UntypedPlutusCore.Evaluation.Machine.Cek.Internal.ExBudgetCategory fun)
instance Control.DeepSeq.NFData fun => Control.DeepSeq.NFData (UntypedPlutusCore.Evaluation.Machine.Cek.Internal.ExBudgetCategory fun)
instance GHC.Generics.Generic (UntypedPlutusCore.Evaluation.Machine.Cek.Internal.ExBudgetCategory fun)
instance GHC.Classes.Ord fun => GHC.Classes.Ord (UntypedPlutusCore.Evaluation.Machine.Cek.Internal.ExBudgetCategory fun)
instance GHC.Classes.Eq fun => GHC.Classes.Eq (UntypedPlutusCore.Evaluation.Machine.Cek.Internal.ExBudgetCategory fun)
instance GHC.Show.Show fun => GHC.Show.Show (UntypedPlutusCore.Evaluation.Machine.Cek.Internal.ExBudgetCategory fun)
instance (Universe.Core.Everywhere uni GHC.Show.Show, Data.GADT.Internal.GShow uni, Universe.Core.Closed uni, GHC.Show.Show ann, GHC.Show.Show fun) => GHC.Show.Show (UntypedPlutusCore.Evaluation.Machine.Cek.Internal.CekValue uni fun ann)
instance Control.DeepSeq.NFData UntypedPlutusCore.Evaluation.Machine.Cek.Internal.CekUserError
instance GHC.Generics.Generic UntypedPlutusCore.Evaluation.Machine.Cek.Internal.CekUserError
instance GHC.Classes.Eq UntypedPlutusCore.Evaluation.Machine.Cek.Internal.CekUserError
instance GHC.Show.Show UntypedPlutusCore.Evaluation.Machine.Cek.Internal.CekUserError
instance GHC.Base.Monad (UntypedPlutusCore.Evaluation.Machine.Cek.Internal.CekM uni fun s)
instance GHC.Base.Applicative (UntypedPlutusCore.Evaluation.Machine.Cek.Internal.CekM uni fun s)
instance GHC.Base.Functor (UntypedPlutusCore.Evaluation.Machine.Cek.Internal.CekM uni fun s)
instance (Universe.Core.Everywhere uni GHC.Show.Show, Data.GADT.Internal.GShow uni, Universe.Core.Closed uni, GHC.Show.Show ann, GHC.Show.Show fun) => GHC.Show.Show (UntypedPlutusCore.Evaluation.Machine.Cek.Internal.Context uni fun ann)
instance UntypedPlutusCore.Evaluation.Machine.Cek.Internal.PrettyUni uni fun => Control.Monad.Error.Class.MonadError (UntypedPlutusCore.Evaluation.Machine.Cek.Internal.CekEvaluationException PlutusCore.DeBruijn.Internal.NamedDeBruijn uni fun) (UntypedPlutusCore.Evaluation.Machine.Cek.Internal.CekM uni fun s)
instance PlutusCore.Evaluation.Result.AsEvaluationFailure UntypedPlutusCore.Evaluation.Machine.Cek.Internal.CekUserError
instance Prettyprinter.Internal.Pretty UntypedPlutusCore.Evaluation.Machine.Cek.Internal.CekUserError
instance GHC.Show.Show (PlutusCore.Builtin.Runtime.BuiltinRuntime (UntypedPlutusCore.Evaluation.Machine.Cek.Internal.CekValue uni fun ann))
instance (Universe.Core.Closed uni, Prettyprinter.Internal.Pretty (Universe.Core.SomeTypeIn uni), Universe.Core.Everywhere uni PlutusCore.Pretty.PrettyConst.PrettyConst, Prettyprinter.Internal.Pretty fun) => Text.PrettyBy.Internal.PrettyBy PlutusCore.Pretty.Plc.PrettyConfigPlc (UntypedPlutusCore.Evaluation.Machine.Cek.Internal.CekValue uni fun ann)
instance PlutusCore.Builtin.HasConstant.HasConstant (UntypedPlutusCore.Evaluation.Machine.Cek.Internal.CekValue uni fun ann)
instance (Universe.Core.Closed uni, Universe.Core.Everywhere uni PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage) => PlutusCore.Evaluation.Machine.ExMemory.ExMemoryUsage (UntypedPlutusCore.Evaluation.Machine.Cek.Internal.CekValue uni fun ann)
instance GHC.Show.Show fun => Prettyprinter.Internal.Pretty (UntypedPlutusCore.Evaluation.Machine.Cek.Internal.ExBudgetCategory fun)
instance PlutusCore.Evaluation.Machine.ExBudget.ExBudgetBuiltin fun (UntypedPlutusCore.Evaluation.Machine.Cek.Internal.ExBudgetCategory fun)


-- | The CEK machine. The CEK machine relies on variables having non-equal
--   <tt>Unique</tt>s whenever they have non-equal string names. I.e.
--   <tt>Unique</tt>s are used instead of string names. This is for
--   efficiency reasons. The CEK machines handles name capture by design.
module UntypedPlutusCore.Evaluation.Machine.Cek.Debug.Internal
data CekState uni fun ann
Starting :: NTerm uni fun ann -> CekState uni fun ann
Computing :: WordArray -> Context uni fun ann -> CekValEnv uni fun ann -> NTerm uni fun ann -> CekState uni fun ann
Returning :: WordArray -> Context uni fun ann -> CekValue uni fun ann -> CekState uni fun ann
Terminating :: NTerm uni fun () -> CekState uni fun ann
data Context uni fun ann

-- | <pre>
--   [V _]
--   </pre>
FrameApplyFun :: ann -> !CekValue uni fun ann -> !Context uni fun ann -> Context uni fun ann

-- | <pre>
--   [_ N]
--   </pre>
FrameApplyArg :: ann -> !CekValEnv uni fun ann -> !NTerm uni fun ann -> !Context uni fun ann -> Context uni fun ann

-- | <pre>
--   (force _)
--   </pre>
FrameForce :: ann -> !Context uni fun ann -> Context uni fun ann
NoFrame :: Context uni fun ann
contextAnn :: Context uni fun ann -> Maybe ann
ioToCekM :: IO a -> CekM uni fun RealWorld a
cekMToIO :: CekM uni fun RealWorld a -> IO a
lenContext :: Context uni fun ann -> Word
cekStateContext :: Traversal' (CekState uni fun ann) (Context uni fun ann)
cekStateAnn :: CekState uni fun ann -> Maybe ann
runCekDeBruijn :: PrettyUni uni fun => MachineParameters CekMachineCosts fun (CekValue uni fun ann) -> ExBudgetMode cost uni fun -> EmitterMode uni fun -> NTerm uni fun ann -> (Either (CekEvaluationException NamedDeBruijn uni fun) (NTerm uni fun ()), cost, [Text])
computeCek :: forall uni fun ann s. (PrettyUni uni fun, GivenCekReqs uni fun ann s) => WordArray -> Context uni fun ann -> CekValEnv uni fun ann -> NTerm uni fun ann -> CekM uni fun s (CekState uni fun ann)
returnCek :: forall uni fun ann s. (PrettyUni uni fun, GivenCekReqs uni fun ann s) => WordArray -> Context uni fun ann -> CekValue uni fun ann -> CekM uni fun s (CekState uni fun ann)

-- | The state transition function of the machine.
handleStep :: forall uni fun ann s c. (PrettyUni uni fun, GivenCekReqs uni fun ann s, c ~ CekState uni fun ann) => c -> CekM uni fun s c

-- | As <a>handleStep</a> but captures any exception during a single-state
--   transition
--   
--   Note that we use the "pure" MonadError.tryError and not the
--   MonadCatch.tryError. See Note [Throwing exceptions in ST]
tryHandleStep :: forall uni fun ann s c. (PrettyUni uni fun, GivenCekReqs uni fun ann s, c ~ CekState uni fun ann) => c -> CekM uni fun s (Either (CekEvaluationException NamedDeBruijn uni fun) c)

-- | The parameterized type of results various evaluation engines return.
--   On the PLC side this becomes (via <tt>makeKnown</tt>) either a call to
--   <tt>Error</tt> or a value of the PLC counterpart of type <tt>a</tt>.
data EvaluationResult a
EvaluationSuccess :: !a -> EvaluationResult a
EvaluationFailure :: EvaluationResult a

-- | The type of errors (all of them) which can occur during evaluation
--   (some are used-caused, some are internal).
data EvaluationError user internal

-- | Indicates bugs.
InternalEvaluationError :: !internal -> EvaluationError user internal

-- | Indicates user errors.
UserEvaluationError :: !user -> EvaluationError user internal

-- | An error and (optionally) what caused it.
data ErrorWithCause err cause
ErrorWithCause :: !err -> !Maybe cause -> ErrorWithCause err cause
[_ewcError] :: ErrorWithCause err cause -> !err
[_ewcCause] :: ErrorWithCause err cause -> !Maybe cause

-- | Turn any <a>UserEvaluationError</a> into an <a>EvaluationFailure</a>.
extractEvaluationResult :: Either (EvaluationException user internal term) a -> Either (ErrorWithCause internal term) (EvaluationResult a)

-- | The set of constraints we need to be able to print things in
--   universes, which we need in order to throw exceptions.
type PrettyUni uni fun = (Pretty (SomeTypeIn uni), Closed uni, uni `Everywhere` PrettyConst, Pretty fun, Typeable uni, Typeable fun)

-- | The CEK machine-specific <a>EvaluationException</a>.
type CekEvaluationException name uni fun = EvaluationException CekUserError (MachineError fun) (Term name uni fun ())

-- | The monad the CEK machine runs in.
newtype CekM uni fun s a
CekM :: ST s a -> CekM uni fun s a
[unCekM] :: CekM uni fun s a -> ST s a
data CekUserError

-- | The final overspent (i.e. negative) budget.
CekOutOfExError :: !ExRestrictingBudget -> CekUserError

-- | Error has been called or a builtin application has failed
CekEvaluationFailure :: CekUserError

-- | Constraint requiring all of the machine's implicit parameters.
type GivenCekReqs uni fun ann s = (GivenCekRuntime uni fun ann, GivenCekEmitter uni fun s, GivenCekSpender uni fun s, GivenCekSlippage, GivenCekCosts)

-- | Implicit parameter for budget spender.
type GivenCekSpender uni fun s = (?cekBudgetSpender :: (CekBudgetSpender uni fun s))

-- | An emitting mode to execute the CEK machine in, similar to
--   <a>ExBudgetMode</a>.
newtype EmitterMode uni fun
EmitterMode :: (forall s. ST s ExBudget -> ST s (CekEmitterInfo uni fun s)) -> EmitterMode uni fun
[unEmitterMode] :: EmitterMode uni fun -> forall s. ST s ExBudget -> ST s (CekEmitterInfo uni fun s)

-- | Runtime emitter info, similar to <a>ExBudgetInfo</a>.
data CekEmitterInfo uni fun s
CekEmitterInfo :: !CekEmitter uni fun s -> !ST s [Text] -> CekEmitterInfo uni fun s
[_cekEmitterInfoEmit] :: CekEmitterInfo uni fun s -> !CekEmitter uni fun s
[_cekEmitterInfoGetFinal] :: CekEmitterInfo uni fun s -> !ST s [Text]

-- | The CEK machine is parameterized over an emitter function, similar to
--   <a>CekBudgetSpender</a>.
type CekEmitter uni fun s = DList Text -> CekM uni fun s ()
type Slippage = Word8

-- | A budgeting mode to execute the CEK machine in.
newtype ExBudgetMode cost uni fun
ExBudgetMode :: (forall s. ST s (ExBudgetInfo cost uni fun s)) -> ExBudgetMode cost uni fun
[unExBudgetMode] :: ExBudgetMode cost uni fun -> forall s. ST s (ExBudgetInfo cost uni fun s)

-- | Runtime budgeting info.
data ExBudgetInfo cost uni fun s
ExBudgetInfo :: !CekBudgetSpender uni fun s -> !ST s cost -> !ST s ExBudget -> ExBudgetInfo cost uni fun s

-- | A spending function.
[_exBudgetModeSpender] :: ExBudgetInfo cost uni fun s -> !CekBudgetSpender uni fun s

-- | For accessing the final state.
[_exBudgetModeGetFinal] :: ExBudgetInfo cost uni fun s -> !ST s cost

-- | For accessing the cumulative budget.
[_exBudgetModeGetCumulative] :: ExBudgetInfo cost uni fun s -> !ST s ExBudget

-- | The CEK machine is parameterized over a <tt>spendBudget</tt> function.
--   This makes the budgeting machinery extensible and allows us to
--   separate budgeting logic from evaluation logic and avoid branching on
--   the union of all possible budgeting state types during evaluation.
newtype CekBudgetSpender uni fun s
CekBudgetSpender :: (ExBudgetCategory fun -> ExBudget -> CekM uni fun s ()) -> CekBudgetSpender uni fun s
[unCekBudgetSpender] :: CekBudgetSpender uni fun s -> ExBudgetCategory fun -> ExBudget -> CekM uni fun s ()
type CekValEnv uni fun ann = RAList (CekValue uni fun ann)
data CekValue uni fun ann
VCon :: !Some (ValueOf uni) -> CekValue uni fun ann
VDelay :: !NTerm uni fun ann -> !CekValEnv uni fun ann -> CekValue uni fun ann
VLamAbs :: !NamedDeBruijn -> !NTerm uni fun ann -> !CekValEnv uni fun ann -> CekValue uni fun ann

-- | A partial builtin application, accumulating arguments for eventual
--   full application. We don't need a <a>CekValEnv</a> here unlike in the
--   other constructors, because <a>VBuiltin</a> values always store their
--   corresponding <a>Term</a>s fully discharged, see the comments at the
--   call sites (search for <a>VBuiltin</a>).
VBuiltin :: !fun -> NTerm uni fun () -> !BuiltinRuntime (CekValue uni fun ann) -> CekValue uni fun ann
data ExBudgetCategory fun
BStep :: StepKind -> ExBudgetCategory fun
BBuiltinApp :: fun -> ExBudgetCategory fun
BStartup :: ExBudgetCategory fun
data StepKind
BConst :: StepKind
BVar :: StepKind
BLamAbs :: StepKind
BApply :: StepKind
BDelay :: StepKind
BForce :: StepKind
BBuiltin :: StepKind

-- | The <a>Term</a>s that CEK can execute must have DeBruijn binders
--   <tt>Name</tt> is not necessary but we leave it here for simplicity and
--   debuggability.
type NTerm uni fun = Term NamedDeBruijn uni fun

-- | The default number of slippage (in machine steps) to allow.
defaultSlippage :: Slippage

-- | Convert a <a>CekValue</a> into a <a>Term</a> by replacing all bound
--   variables with the terms they're bound to (which themselves have to be
--   obtain by recursively discharging values).
dischargeCekValue :: CekValue uni fun ann -> NTerm uni fun ()
instance (Universe.Core.Everywhere uni GHC.Show.Show, Data.GADT.Internal.GShow uni, Universe.Core.Closed uni, GHC.Show.Show ann, GHC.Show.Show fun) => GHC.Show.Show (UntypedPlutusCore.Evaluation.Machine.Cek.Debug.Internal.Context uni fun ann)
instance Prettyprinter.Internal.Pretty (UntypedPlutusCore.Evaluation.Machine.Cek.Debug.Internal.CekState uni fun ann)

module UntypedPlutusCore.Evaluation.Machine.Cek.Debug.Driver

-- | Leave abstract the types of annotation and breakpoints. The only thing
--   the driver requires is an inclusion relation of breakpoints into the
--   Annotation
class Breakpointable ann bps | ann -> bps
hasBreakpoints :: Breakpointable ann bps => ann -> bps -> Bool
data CekState uni fun ann

-- | The commands that the driver may receive from the client
--   (tui,cli,test,etc)
data Cmd bps

-- | Instruct the driver to a *SINGLE* step. Note: No need to pass
--   breakpoints here because the stepping granularity is *minimal*.
Step :: Cmd bps

-- | Instruct to multi-step until end-of-program or until breakpoint
--   reached
Continue :: bps -> Cmd bps

-- | Instruct to multi-step over the function call at point or until
--   breakpoint reached
Next :: bps -> Cmd bps

-- | Instruct to multi-step to end of current function or until breakpoint
--   reached
Finish :: bps -> Cmd bps

-- | Entrypoint of the driver
runDriver :: forall uni fun ann bps m. (Breakpointable ann bps, MonadFree (DebugF uni fun ann bps) m) => NTerm uni fun ann -> m ()

-- | The drivers's suspension functor
data DebugF uni fun ann bps a

-- | Await for the client (e.g. TUI) to tell what to do next (Cmd).
InputF :: (Cmd bps -> a) -> DebugF uni fun ann bps a

-- | A generator of logging messages of the driver
LogF :: String -> a -> DebugF uni fun ann bps a

-- | An enumeratee of Driver State (generator+iteratee): Yield a state
--   before doing a step, then await for a state to resume after the step.
--   See Note [Stepping the driver].
StepF :: CekState uni fun ann -> (CekState uni fun ann -> a) -> DebugF uni fun ann bps a
UpdateClientF :: CekState uni fun ann -> a -> DebugF uni fun ann bps a

-- | The state transition function of the machine.
handleStep :: forall uni fun ann s c. (PrettyUni uni fun, GivenCekReqs uni fun ann s, c ~ CekState uni fun ann) => c -> CekM uni fun s c

-- | As <a>handleStep</a> but captures any exception during a single-state
--   transition
--   
--   Note that we use the "pure" MonadError.tryError and not the
--   MonadCatch.tryError. See Note [Throwing exceptions in ST]
tryHandleStep :: forall uni fun ann s c. (PrettyUni uni fun, GivenCekReqs uni fun ann s, c ~ CekState uni fun ann) => c -> CekM uni fun s (Either (CekEvaluationException NamedDeBruijn uni fun) c)

-- | Monads provide substitution (<a>fmap</a>) and renormalization
--   (<a>join</a>):
--   
--   <pre>
--   m <a>&gt;&gt;=</a> f = <a>join</a> (<a>fmap</a> f m)
--   </pre>
--   
--   A free <a>Monad</a> is one that does no work during the normalization
--   step beyond simply grafting the two monadic values together.
--   
--   <tt>[]</tt> is not a free <a>Monad</a> (in this sense) because
--   <tt><a>join</a> [[a]]</tt> smashes the lists flat.
--   
--   On the other hand, consider:
--   
--   <pre>
--   data Tree a = Bin (Tree a) (Tree a) | Tip a
--   </pre>
--   
--   <pre>
--   instance <a>Monad</a> Tree where
--     <a>return</a> = Tip
--     Tip a <a>&gt;&gt;=</a> f = f a
--     Bin l r <a>&gt;&gt;=</a> f = Bin (l <a>&gt;&gt;=</a> f) (r <a>&gt;&gt;=</a> f)
--   </pre>
--   
--   This <a>Monad</a> is the free <a>Monad</a> of Pair:
--   
--   <pre>
--   data Pair a = Pair a a
--   </pre>
--   
--   And we could make an instance of <a>MonadFree</a> for it directly:
--   
--   <pre>
--   instance <a>MonadFree</a> Pair Tree where
--      <a>wrap</a> (Pair l r) = Bin l r
--   </pre>
--   
--   Or we could choose to program with <tt><a>Free</a> Pair</tt> instead
--   of <tt>Tree</tt> and thereby avoid having to define our own
--   <a>Monad</a> instance.
--   
--   Moreover, <a>Control.Monad.Free.Church</a> provides a <a>MonadFree</a>
--   instance that can improve the <i>asymptotic</i> complexity of code
--   that constructs free monads by effectively reassociating the use of
--   (<a>&gt;&gt;=</a>). You may also want to take a look at the
--   <tt>kan-extensions</tt> package
--   (<a>http://hackage.haskell.org/package/kan-extensions</a>).
--   
--   See <a>Free</a> for a more formal definition of the free <a>Monad</a>
--   for a <a>Functor</a>.
class Monad m => MonadFree (f :: Type -> TYPE LiftedRep) (m :: Type -> Type) | m -> f

-- | Like <a>iter</a> for monadic values.
iterM :: (Functor f, Monad m) => (f (m a) -> m a) -> Free f a -> m a

-- | Tear down a free monad transformer using iteration over a transformer.
iterTM :: forall f (m :: Type -> Type) t a. (Functor f, Monad m, MonadTrans t, Monad (t m)) => (f (t m a) -> t m a) -> FreeT f m a -> t m a

-- | <tt>partialIterT n phi m</tt> interprets first <tt>n</tt> layers of
--   <tt>m</tt> using <tt>phi</tt>. This is sort of the opposite for
--   <tt><a>cutoff</a></tt>.
--   
--   Some examples (<tt>n â‰¥ 0</tt>):
--   
--   <pre>
--   <a>partialIterT</a> 0 _ m              â‰¡ m
--   <a>partialIterT</a> (n+1) phi <a>.</a> <a>return</a> â‰¡ <a>return</a>
--   <a>partialIterT</a> (n+1) phi <a>.</a> <a>lift</a>   â‰¡ <a>lift</a>
--   <a>partialIterT</a> (n+1) phi <a>.</a> <a>wrap</a>   â‰¡ <a>join</a> . <a>lift</a> . phi
--   </pre>
partialIterT :: Monad m => Integer -> (forall a. () => f a -> m a) -> FreeT f m b -> FreeT f m b

-- | Cuts off a tree of computations at a given depth. If the depth is
--   <tt>0</tt> or less, no computation nor monadic effects will take
--   place.
--   
--   Some examples (<tt>n â‰¥ 0</tt>):
--   
--   <pre>
--   <a>cutoff</a> 0     _        â‰¡ <a>return</a> <a>Nothing</a>
--   <a>cutoff</a> (n+1) <a>.</a> <a>return</a> â‰¡ <a>return</a> <a>.</a> <a>Just</a>
--   <a>cutoff</a> (n+1) <a>.</a> <a>lift</a>   â‰¡ <a>lift</a> <a>.</a> <a>liftM</a> <a>Just</a>
--   <a>cutoff</a> (n+1) <a>.</a> <a>wrap</a>   â‰¡ <a>wrap</a> <a>.</a> <a>fmap</a> (<a>cutoff</a> n)
--   </pre>
--   
--   Calling <tt><a>retract</a> <a>.</a> <a>cutoff</a> n</tt> is always
--   terminating, provided each of the steps in the iteration is
--   terminating.
cutoff :: forall (f :: Type -> Type) (m :: Type -> Type) a. (Functor f, Monad m) => Integer -> FreeT f m a -> FreeT f m (Maybe a)

-- | The "free monad transformer" for a functor <tt>f</tt>
data FreeT (f :: Type -> Type) (m :: Type -> TYPE LiftedRep) a
instance GHC.Read.Read bps => GHC.Read.Read (UntypedPlutusCore.Evaluation.Machine.Cek.Debug.Driver.Cmd bps)
instance GHC.Show.Show bps => GHC.Show.Show (UntypedPlutusCore.Evaluation.Machine.Cek.Debug.Driver.Cmd bps)
instance GHC.Base.Functor (UntypedPlutusCore.Evaluation.Machine.Cek.Debug.Driver.DebugF uni fun ann bps)


-- | The API to the CEK machine.
module UntypedPlutusCore.Evaluation.Machine.Cek

-- | Evaluate a term using the CEK machine with logging enabled and keep
--   track of costing. A wrapper around the internal runCek to debruijn
--   input and undebruijn output. *THIS FUNCTION IS PARTIAL if the input
--   term contains free variables*
runCek :: PrettyUni uni fun => MachineParameters CekMachineCosts fun (CekValue uni fun ann) -> ExBudgetMode cost uni fun -> EmitterMode uni fun -> Term Name uni fun ann -> (Either (CekEvaluationException Name uni fun) (Term Name uni fun ()), cost, [Text])

-- | Evaluate a term using the CEK machine and keep track of costing,
--   logging is optional.
runCekDeBruijn :: PrettyUni uni fun => MachineParameters CekMachineCosts fun (CekValue uni fun ann) -> ExBudgetMode cost uni fun -> EmitterMode uni fun -> NTerm uni fun ann -> (Either (CekEvaluationException NamedDeBruijn uni fun) (NTerm uni fun ()), cost, [Text])

-- | Evaluate a term using the CEK machine with logging disabled and keep
--   track of costing. *THIS FUNCTION IS PARTIAL if the input term contains
--   free variables*
runCekNoEmit :: PrettyUni uni fun => MachineParameters CekMachineCosts fun (CekValue uni fun ann) -> ExBudgetMode cost uni fun -> Term Name uni fun ann -> (Either (CekEvaluationException Name uni fun) (Term Name uni fun ()), cost)

-- | Unsafely evaluate a term using the CEK machine with logging disabled
--   and keep track of costing. May throw a <tt>CekMachineException</tt>.
--   *THIS FUNCTION IS PARTIAL if the input term contains free variables*
unsafeRunCekNoEmit :: (Pretty (SomeTypeIn uni), Typeable uni, Closed uni, uni `Everywhere` PrettyConst, Pretty fun, Typeable fun) => MachineParameters CekMachineCosts fun (CekValue uni fun ann) -> ExBudgetMode cost uni fun -> Term Name uni fun ann -> (EvaluationResult (Term Name uni fun ()), cost)

-- | Evaluate a term using the CEK machine with logging enabled. *THIS
--   FUNCTION IS PARTIAL if the input term contains free variables*
evaluateCek :: PrettyUni uni fun => EmitterMode uni fun -> MachineParameters CekMachineCosts fun (CekValue uni fun ann) -> Term Name uni fun ann -> (Either (CekEvaluationException Name uni fun) (Term Name uni fun ()), [Text])

-- | Evaluate a term using the CEK machine with logging disabled. *THIS
--   FUNCTION IS PARTIAL if the input term contains free variables*
evaluateCekNoEmit :: PrettyUni uni fun => MachineParameters CekMachineCosts fun (CekValue uni fun ann) -> Term Name uni fun ann -> Either (CekEvaluationException Name uni fun) (Term Name uni fun ())

-- | Evaluate a term using the CEK machine with logging enabled. May throw
--   a <tt>CekMachineException</tt>. *THIS FUNCTION IS PARTIAL if the input
--   term contains free variables*
unsafeEvaluateCek :: (Pretty (SomeTypeIn uni), Typeable uni, Closed uni, uni `Everywhere` PrettyConst, Pretty fun, Typeable fun) => EmitterMode uni fun -> MachineParameters CekMachineCosts fun (CekValue uni fun ann) -> Term Name uni fun ann -> (EvaluationResult (Term Name uni fun ()), [Text])

-- | Evaluate a term using the CEK machine with logging disabled. May throw
--   a <tt>CekMachineException</tt>. *THIS FUNCTION IS PARTIAL if the input
--   term contains free variables*
unsafeEvaluateCekNoEmit :: (Pretty (SomeTypeIn uni), Typeable uni, Closed uni, uni `Everywhere` PrettyConst, Pretty fun, Typeable fun) => MachineParameters CekMachineCosts fun (CekValue uni fun ann) -> Term Name uni fun ann -> EvaluationResult (Term Name uni fun ())

-- | The parameterized type of results various evaluation engines return.
--   On the PLC side this becomes (via <tt>makeKnown</tt>) either a call to
--   <tt>Error</tt> or a value of the PLC counterpart of type <tt>a</tt>.
data EvaluationResult a
EvaluationSuccess :: !a -> EvaluationResult a
EvaluationFailure :: EvaluationResult a

-- | Turn any <a>UserEvaluationError</a> into an <a>EvaluationFailure</a>.
extractEvaluationResult :: Either (EvaluationException user internal term) a -> Either (ErrorWithCause internal term) (EvaluationResult a)
unsafeExtractEvaluationResult :: (PrettyPlc internal, PrettyPlc term, Typeable internal, Typeable term) => Either (EvaluationException user internal term) a -> EvaluationResult a
data CekUserError

-- | The final overspent (i.e. negative) budget.
CekOutOfExError :: !ExRestrictingBudget -> CekUserError

-- | Error has been called or a builtin application has failed
CekEvaluationFailure :: CekUserError

-- | An error and (optionally) what caused it.
data ErrorWithCause err cause
ErrorWithCause :: !err -> !Maybe cause -> ErrorWithCause err cause
[_ewcError] :: ErrorWithCause err cause -> !err
[_ewcCause] :: ErrorWithCause err cause -> !Maybe cause

-- | The CEK machine-specific <a>EvaluationException</a>.
type CekEvaluationException name uni fun = EvaluationException CekUserError (MachineError fun) (Term name uni fun ())

-- | The type of errors (all of them) which can occur during evaluation
--   (some are used-caused, some are internal).
data EvaluationError user internal

-- | Indicates bugs.
InternalEvaluationError :: !internal -> EvaluationError user internal

-- | Indicates user errors.
UserEvaluationError :: !user -> EvaluationError user internal
data ExBudgetCategory fun
BStep :: StepKind -> ExBudgetCategory fun
BBuiltinApp :: fun -> ExBudgetCategory fun
BStartup :: ExBudgetCategory fun

-- | The CEK machine is parameterized over a <tt>spendBudget</tt> function.
--   This makes the budgeting machinery extensible and allows us to
--   separate budgeting logic from evaluation logic and avoid branching on
--   the union of all possible budgeting state types during evaluation.
newtype CekBudgetSpender uni fun s
CekBudgetSpender :: (ExBudgetCategory fun -> ExBudget -> CekM uni fun s ()) -> CekBudgetSpender uni fun s
[unCekBudgetSpender] :: CekBudgetSpender uni fun s -> ExBudgetCategory fun -> ExBudget -> CekM uni fun s ()

-- | A budgeting mode to execute the CEK machine in.
newtype ExBudgetMode cost uni fun
ExBudgetMode :: (forall s. ST s (ExBudgetInfo cost uni fun s)) -> ExBudgetMode cost uni fun
[unExBudgetMode] :: ExBudgetMode cost uni fun -> forall s. ST s (ExBudgetInfo cost uni fun s)
data StepKind
BConst :: StepKind
BVar :: StepKind
BLamAbs :: StepKind
BApply :: StepKind
BDelay :: StepKind
BForce :: StepKind
BBuiltin :: StepKind

-- | For a detailed report on what costs how much + the same overall budget
--   that <tt>Counting</tt> gives. The (derived) <a>Monoid</a> instance of
--   <a>CekExTally</a> is the main piece of the machinery.
newtype CekExTally fun
CekExTally :: MonoidalHashMap (ExBudgetCategory fun) ExBudget -> CekExTally fun

-- | For calculating the cost of execution by counting up using the
--   <a>Monoid</a> instance of <a>ExBudget</a>.
newtype CountingSt
CountingSt :: ExBudget -> CountingSt
data TallyingSt fun
TallyingSt :: CekExTally fun -> ExBudget -> TallyingSt fun
newtype RestrictingSt
RestrictingSt :: ExRestrictingBudget -> RestrictingSt

-- | Costs for evaluating AST nodes. Times should be specified in
--   picoseconds, memory sizes in bytes.
data CekMachineCosts

-- | For calculating the cost of execution.
counting :: ExBudgetMode CountingSt uni fun

-- | For a detailed report on what costs how much + the same overall budget
--   that <tt>Counting</tt> gives.
tallying :: Hashable fun => ExBudgetMode (TallyingSt fun) uni fun

-- | For execution, to avoid overruns.
restricting :: forall uni fun. PrettyUni uni fun => ExRestrictingBudget -> ExBudgetMode RestrictingSt uni fun

-- | <a>restricting</a> instantiated at <a>enormousBudget</a>.
restrictingEnormous :: PrettyUni uni fun => ExBudgetMode RestrictingSt uni fun

-- | When we want to just evaluate the program we use the
--   <tt>Restricting</tt> mode with an enormous budget, so that evaluation
--   costs of on-chain budgeting are reflected accurately in benchmarks.
enormousBudget :: ExRestrictingBudget

-- | No emitter.
noEmitter :: EmitterMode uni fun

-- | Emits log only.
logEmitter :: EmitterMode uni fun

-- | Emits log with timestamp.
logWithTimeEmitter :: EmitterMode uni fun

-- | Emits log with the budget.
logWithBudgetEmitter :: EmitterMode uni fun
data CekValue uni fun ann
VCon :: !Some (ValueOf uni) -> CekValue uni fun ann
VDelay :: !NTerm uni fun ann -> !CekValEnv uni fun ann -> CekValue uni fun ann
VLamAbs :: !NamedDeBruijn -> !NTerm uni fun ann -> !CekValEnv uni fun ann -> CekValue uni fun ann

-- | A partial builtin application, accumulating arguments for eventual
--   full application. We don't need a <a>CekValEnv</a> here unlike in the
--   other constructors, because <a>VBuiltin</a> values always store their
--   corresponding <a>Term</a>s fully discharged, see the comments at the
--   call sites (search for <a>VBuiltin</a>).
VBuiltin :: !fun -> NTerm uni fun () -> !BuiltinRuntime (CekValue uni fun ann) -> CekValue uni fun ann

-- | Unlift a value using the CEK machine. *THIS FUNCTION IS PARTIAL if the
--   input term contains free variables*
readKnownCek :: (ReadKnown (Term Name uni fun ()) a, PrettyUni uni fun) => MachineParameters CekMachineCosts fun (CekValue uni fun ann) -> Term Name uni fun ann -> Either (CekEvaluationException Name uni fun) a

-- | The class of types that can be converted to a hash value.
--   
--   Minimal implementation: <a>hashWithSalt</a>.
--   
--   <i>Note:</i> the hash is not guaranteed to be stable across library
--   versions, operating systems or architectures. For stable hashing use
--   named hashes: SHA256, CRC32 etc.
--   
--   If you are looking for <a>Hashable</a> instance in <tt>time</tt>
--   package, check <a>time-compat</a>
class Eq a => Hashable a

-- | The set of constraints we need to be able to print things in
--   universes, which we need in order to throw exceptions.
type PrettyUni uni fun = (Pretty (SomeTypeIn uni), Closed uni, uni `Everywhere` PrettyConst, Pretty fun, Typeable uni, Typeable fun)

module PlutusCore.Evaluation.Machine.ExBudgetingDefaults
defaultBuiltinsRuntime :: HasMeaningIn DefaultUni term => BuiltinsRuntime DefaultFun term
defaultCekCostModel :: CostModel CekMachineCosts BuiltinCostModel

-- | Default costs for CEK machine instructions.
defaultCekMachineCosts :: CekMachineCosts
defaultCekParameters :: Typeable ann => MachineParameters CekMachineCosts DefaultFun (CekValue DefaultUni DefaultFun ann)

-- | The default cost model data. This is exposed to the ledger, so let's
--   not confuse anybody by mentioning the CEK machine
defaultCostModelParams :: Maybe CostModelParams

-- | The default cost model for built-in functions.
defaultBuiltinCostModel :: BuiltinCostModel
unitCekMachineCosts :: CekMachineCosts
unitCekParameters :: Typeable ann => MachineParameters CekMachineCosts DefaultFun (CekValue DefaultUni DefaultFun ann)


-- | Defines the type of default machine parameters and a function for
--   creating a value of the type. We keep them separate, because the
--   function unfolds into multiple thousands of lines of Core and we want
--   to instantiate it in two different ways on top of that, which gives
--   another ton of Core that we need to inspect, hence we dedicate an
--   entire folder to that.
module PlutusCore.Evaluation.Machine.MachineParameters.Default
type DefaultMachineParameters = MachineParameters CekMachineCosts DefaultFun (CekValue DefaultUni DefaultFun ())
mkMachineParametersFor :: MonadError CostModelApplyError m => BuiltinVersion DefaultFun -> CostModelParams -> m DefaultMachineParameters

module UntypedPlutusCore.MkUPlc

-- | An untyped "variable declaration", i.e. a name for a variable.
data UVarDecl name ann
UVarDecl :: ann -> name -> UVarDecl name ann
[_uvarDeclAnn] :: UVarDecl name ann -> ann
[_uvarDeclName] :: UVarDecl name ann -> name
uvarDeclName :: forall name_a6KGH ann_a6KGI name_a6KSN. Lens (UVarDecl name_a6KGH ann_a6KGI) (UVarDecl name_a6KSN ann_a6KGI) name_a6KGH name_a6KSN
uvarDeclAnn :: forall name_a6KGH ann_a6KGI ann_a6KSM. Lens (UVarDecl name_a6KGH ann_a6KGI) (UVarDecl name_a6KGH ann_a6KSM) ann_a6KGI ann_a6KSM

-- | Make a <a>Var</a> referencing the given <tt>VarDecl</tt>.
mkVar :: ann -> UVarDecl name ann -> Term name uni fun ann

-- | Make an iterated application.
mkIterApp :: ann -> Term name uni fun ann -> [Term name uni fun ann] -> Term name uni fun ann

-- | Lambda abstract a list of names.
mkIterLamAbs :: [UVarDecl name ann] -> Term name uni fun ann -> Term name uni fun ann

-- | A definition. Pretty much just a pair with more descriptive names.
data Def var val
Def :: var -> val -> Def var val
[defVar] :: Def var val -> var
[defVal] :: Def var val -> val

-- | A term definition as a variable.
type UTermDef name uni fun ann = Def (UVarDecl name ann) (Term name uni fun ann)


-- | The user-facing API of the untyped renamer. See PlutusCore.Rename for
--   details.
module UntypedPlutusCore.Rename

-- | The class of things that can be renamed. I.e. things that are capable
--   of satisfying the global uniqueness condition.
class Rename a

-- | Rename <a>Unique</a>s so that they're globally unique. In case there
--   are any free variables, they must be left untouched and bound
--   variables must not get renamed to free ones. Must always assign new
--   names to bound variables, so that <tt>rename</tt> can be used for
--   alpha-renaming as well.
rename :: (Rename a, MonadQuote m) => a -> m a
instance PlutusCore.Core.Type.HasUniques (UntypedPlutusCore.Core.Type.Term name uni fun ann) => PlutusCore.Rename.Rename (UntypedPlutusCore.Core.Type.Term name uni fun ann)
instance PlutusCore.Core.Type.HasUniques (UntypedPlutusCore.Core.Type.Program name uni fun ann) => PlutusCore.Rename.Rename (UntypedPlutusCore.Core.Type.Program name uni fun ann)

module UntypedPlutusCore.Parser
parse :: (AsParserErrorBundle e, MonadError e m, MonadQuote m) => Parser a -> String -> Text -> m a

-- | Parser for all UPLC terms.
term :: Parser PTerm

-- | Parser for UPLC programs.
program :: Parser (Program Name DefaultUni DefaultFun SrcSpan)

-- | Parse a UPLC term. The resulting program will have fresh names. The
--   underlying monad must be capable of handling any parse errors.
parseTerm :: (AsParserErrorBundle e, MonadError e m, MonadQuote m) => Text -> m PTerm

-- | Parse a UPLC program. The resulting program will have fresh names. The
--   underlying monad must be capable of handling any parse errors. This
--   passes "test" to the parser as the name of the input stream; to supply
--   a name explicity, use `parse program <a>name</a> <a>input</a><a>.</a>
parseProgram :: (AsParserErrorBundle e, MonadError e m, MonadQuote m) => Text -> m (Program Name DefaultUni DefaultFun SrcSpan)

-- | Parse and rewrite so that names are globally unique, not just unique
--   within their scope.
parseScoped :: (AsParserErrorBundle e, AsUniqueError e SrcSpan, MonadError e m, MonadQuote m) => Text -> m (Program Name DefaultUni DefaultFun SrcSpan)
type Parser = ParsecT ParserError Text (StateT ParserState Quote)

-- | The data type <a>SourcePos</a> represents source positions. It
--   contains the name of the source file, a line number, and a column
--   number. Source line and column positions change intensively during
--   parsing, so we need to make them strict to avoid memory leaks.
data SourcePos

module UntypedPlutusCore

-- | Applicatively replace a variable using the given function.
substVarA :: Applicative f => (name -> f (Maybe (Term name uni fun ann))) -> Term name uni fun ann -> f (Term name uni fun ann)

-- | Replace a variable using the given function.
substVar :: (name -> Maybe (Term name uni fun ann)) -> Term name uni fun ann -> Term name uni fun ann

-- | Naively monadically substitute names using the given function (i.e. do
--   not substitute binders).
termSubstNamesM :: Monad m => (name -> m (Maybe (Term name uni fun ann))) -> Term name uni fun ann -> m (Term name uni fun ann)

-- | Naively substitute names using the given function (i.e. do not
--   substitute binders).
termSubstNames :: (name -> Maybe (Term name uni fun ann)) -> Term name uni fun ann -> Term name uni fun ann

-- | Completely replace the names with a new name type.
termMapNames :: forall name name' uni fun ann. (name -> name') -> Term name uni fun ann -> Term name' uni fun ann
programMapNames :: forall name name' uni fun ann. (name -> name') -> Program name uni fun ann -> Program name' uni fun ann

-- | Get all the term variables in a term.
vTerm :: Fold (Term name uni fun ann) name

-- | Count the number of AST nodes in a term.
termSize :: Term name uni fun ann -> Integer

-- | Count the number of AST nodes in a program.
programSize :: Program name uni fun ann -> Integer

-- | Compute the size of the serialized form of a value.
serialisedSize :: Flat a => a -> Integer
simplifyTerm :: forall name uni fun m a. (ToBuiltinMeaning uni fun, MonadQuote m, HasUnique name TermUnique, Eq name) => SimplifyOpts name a -> Term name uni fun a -> m (Term name uni fun a)
simplifyProgram :: forall name uni fun m a. (ToBuiltinMeaning uni fun, MonadQuote m, HasUnique name TermUnique, Eq name) => SimplifyOpts name a -> Program name uni fun a -> m (Program name uni fun a)
data SimplifyOpts name a
SimplifyOpts :: Int -> InlineHints name a -> SimplifyOpts name a
[_soMaxSimplifierIterations] :: SimplifyOpts name a -> Int
[_soInlineHints] :: SimplifyOpts name a -> InlineHints name a
soMaxSimplifierIterations :: forall name_a7re4 a_a7re5. Lens' (SimplifyOpts name_a7re4 a_a7re5) Int
soInlineHints :: forall name_a7re4 a_a7re5 name_a7rfG a_a7rfH. Lens (SimplifyOpts name_a7re4 a_a7re5) (SimplifyOpts name_a7rfG a_a7rfH) (InlineHints name_a7re4 a_a7re5) (InlineHints name_a7rfG a_a7rfH)
defaultSimplifyOpts :: SimplifyOpts name a
newtype InlineHints name a
InlineHints :: (a -> name -> Bool) -> InlineHints name a
[shouldInline] :: InlineHints name a -> a -> name -> Bool

-- | The type of Untyped Plutus Core terms. Mirrors the type of Typed
--   Plutus Core terms except
--   
--   <ol>
--   <li>all types are removed</li>
--   <li><tt>IWrap</tt> and <tt>Unwrap</tt> are removed</li>
--   <li>type abstractions are replaced with <a>Delay</a></li>
--   <li>type instantiations are replaced with <a>Force</a></li>
--   </ol>
--   
--   The latter two are due to the fact that we don't have value
--   restriction in Typed Plutus Core and hence a computation can be stuck
--   expecting only a single type argument for the computation to become
--   unstuck. Therefore we can't just silently remove type abstractions and
--   instantiations and need to replace them with something else that also
--   blocks evaluation (in order for the semantics of an erased program to
--   match with the semantics of the original typed one). <a>Delay</a> and
--   <a>Force</a> serve exactly this purpose.
data Term name uni fun ann
Var :: !ann -> !name -> Term name uni fun ann
LamAbs :: !ann -> !name -> !Term name uni fun ann -> Term name uni fun ann
Apply :: !ann -> !Term name uni fun ann -> !Term name uni fun ann -> Term name uni fun ann
Force :: !ann -> !Term name uni fun ann -> Term name uni fun ann
Delay :: !ann -> !Term name uni fun ann -> Term name uni fun ann
Constant :: !ann -> !Some (ValueOf uni) -> Term name uni fun ann
Builtin :: !ann -> !fun -> Term name uni fun ann
Error :: !ann -> Term name uni fun ann

-- | A <a>Program</a> is simply a <a>Term</a> coupled with a
--   <tt>Version</tt> of the core language.
data Program name uni fun ann
Program :: ann -> Version -> Term name uni fun ann -> Program name uni fun ann
[_progAnn] :: Program name uni fun ann -> ann
[_progVer] :: Program name uni fun ann -> Version
[_progTerm] :: Program name uni fun ann -> Term name uni fun ann

-- | Applies one program to another. Fails if the versions do not match and
--   tries to merge annotations.
applyProgram :: Semigroup a => Program name uni fun a -> Program name uni fun a -> Maybe (Program name uni fun a)

-- | Parse and rewrite so that names are globally unique, not just unique
--   within their scope.
parseScoped :: (AsParserErrorBundle e, AsUniqueError e SrcSpan, MonadError e m, MonadQuote m) => Text -> m (Program Name DefaultUni DefaultFun SrcSpan)

-- | The universe used by default.
data DefaultUni a

-- | Default built-in functions.
--   
--   When updating these, make sure to add them to the protocol version
--   listing! See Note [New builtins and protocol versions]
data DefaultFun

module PlutusCore.Compiler

-- | Compile a PLC term to UPLC, and optimize it.
compileTerm :: (ToBuiltinMeaning uni fun, MonadQuote m, HasUnique name TermUnique, Eq name, MonadReader (CompilationOpts name a) m) => Term tyname name uni fun a -> m (Term name uni fun a)

-- | Compile a PLC program to UPLC, and optimize it.
compileProgram :: (ToBuiltinMeaning uni fun, MonadQuote m, HasUnique name TermUnique, Eq name, MonadReader (CompilationOpts name a) m) => Program tyname name uni fun a -> m (Program name uni fun a)
newtype CompilationOpts name a
CompilationOpts :: SimplifyOpts name a -> CompilationOpts name a
[_coSimplifyOpts] :: CompilationOpts name a -> SimplifyOpts name a
coSimplifyOpts :: forall name_a7rOp a_a7rOq name_a7rPN a_a7rPO. Iso (CompilationOpts name_a7rOp a_a7rOq) (CompilationOpts name_a7rPN a_a7rPO) (SimplifyOpts name_a7rOp a_a7rOq) (SimplifyOpts name_a7rPN a_a7rPO)
defaultCompilationOpts :: CompilationOpts name a
instance GHC.Show.Show (PlutusCore.Compiler.CompilationOpts name a)
