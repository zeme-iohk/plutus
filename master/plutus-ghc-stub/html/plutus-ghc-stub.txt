-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | The GHC API
--   
--   Stub functionality for the Plutus plugin, for cross compilers that
--   don't have a GHC library installed, like GHCJS This should contain all
--   the types and functions that the Plutus compiler uses. For technical
--   reasons (Cabal), we need to be able to compile the plutus-tx compiler
--   for the host platform, even if we are going to load the plugin from
--   the build platform libraries.
@package plutus-ghc-stub
@version 8.6.5

module Class

module FV

module Finder

module Kind

module LoadIface

module MkId

module Panic

module PrimOp

module PrelNames
eqIntegerPrimName :: Name
eqName :: Name
isStringClassName :: Name

module OccName
data DynFlags
DynFlags_ :: DynFlags
type FamInstEnvs = (FamInstEnv, FamInstEnv)
data Name
Name_ :: Name
data OccName
OccName_ :: OccName
data Module
Module_ :: Module
data UnitId
UnitId_ :: UnitId
data TyThing
TyThing_ :: TyThing
data ModSummary
ModSummary_ :: ModSummary
data TcGblEnv
TcGblEnv_ :: TcGblEnv
data LHsExpr a
LHsExpr_ :: LHsExpr a
data GhcTc
GhcTc_ :: GhcTc
data GhcRn
GhcRn_ :: GhcRn
data GhcException
CmdLineError :: String -> GhcException
ProgramError :: String -> GhcException
PprProgramError :: String -> SDoc -> GhcException
data ModuleName
ModuleName_ :: ModuleName
data SDoc
SDoc_ :: SDoc
data HsParsedModule
HsParsedModule_ :: HsParsedModule
data HsGroup a
HsGroup_ :: HsGroup a
data Phase
Phase_ :: Phase
data Coercion
Coercion_ :: Coercion
data Type
Type_ :: Type
type Kind = Type
type TyVar = Var
data TyCoBinder
TyCoBinder_ :: TyCoBinder
data SrcSpan
SrcSpan_ :: SrcSpan
data RealSrcSpan
RealSrcSpan_ :: RealSrcSpan
data Tickish a
SourceNote :: RealSrcSpan -> String -> Tickish a

-- | Source covered
[sourceSpan] :: Tickish a -> RealSrcSpan

-- | Name for source location
[sourceName] :: Tickish a -> String
data Var
Var_ :: Var
type Id = Var
data Fingerprint
Fingerprint_ :: Fingerprint
data PrintUnqualified
PrintUnqualified_ :: PrintUnqualified
data TyCon
TyCon_ :: TyCon
data IdDetails
ClassOpId :: Class -> IdDetails
DataConWorkId :: DataCon -> IdDetails
PrimOpId :: PrimOp -> IdDetails
data IdUnfolding
IdUnfolding_ :: IdUnfolding
data Unfolding
Unfolding_ :: Unfolding
data FunctionOrData
IsFunction :: FunctionOrData
IsData :: FunctionOrData
data FV
FV_ :: FV
data Class
Class_ :: Class
data NameSpace
NameSpace_ :: NameSpace
data HscEnv
HscEnv :: DynFlags -> HscEnv
[hsc_dflags] :: HscEnv -> DynFlags
data RdrName
RdrName_ :: RdrName
data Messages
Messages_ :: Messages
data Literal

-- | <tt>Char#</tt> - at least 31 bits. Create with <tt>mkMachChar</tt>
LitChar :: Char -> Literal
LitNumber :: !LitNumType -> !Integer -> Type -> Literal

-- | A string-literal: stored and emitted UTF-8 encoded, we'll arrange to
--   decode it at runtime. Also emitted with a <tt>'0'</tt> terminator.
--   Create with <tt>mkMachString</tt>
LitString :: ByteString -> Literal

-- | The <tt>NULL</tt> pointer, the only pointer value that can be
--   represented as a Literal. Create with <tt>nullAddrLit</tt>
LitNullAddr :: Literal

-- | A nonsense value, used when an unlifted binding is absent and has type
--   <tt>forall (a :: <tt>TYPE</tt> <tt>UnliftedRep</tt>). a</tt>. May be
--   lowered by code-gen to any possible value. Also see Note [Rubbish
--   literals]
LitRubbish :: Literal

-- | <tt>Float#</tt>. Create with <tt>mkMachFloat</tt>
LitFloat :: Rational -> Literal

-- | <tt>Double#</tt>. Create with <tt>mkMachDouble</tt>
LitDouble :: Rational -> Literal

-- | A label literal. Parameters:
--   
--   1) The name of the symbol mentioned in the declaration
--   
--   2) The size (in bytes) of the arguments the label expects. Only
--   applicable with <tt>stdcall</tt> labels. <tt>Just x</tt> =&gt;
--   <tt>&lt;x&gt;</tt> will be appended to label name when emitting
--   assembly.
LitLabel :: FastString -> Maybe Int -> FunctionOrData -> Literal

-- | Numeric literal type
data LitNumType

-- | <tt>Integer</tt> (see Note [Integer literals])
LitNumInteger :: LitNumType

-- | <tt>Natural</tt> (see Note [Natural literals])
LitNumNatural :: LitNumType

-- | <tt>Int#</tt> - according to target machine
LitNumInt :: LitNumType

-- | <tt>Int64#</tt> - exactly 64 bits
LitNumInt64 :: LitNumType

-- | <tt>Word#</tt> - according to target machine
LitNumWord :: LitNumType

-- | <tt>Word64#</tt> - exactly 64 bits
LitNumWord64 :: LitNumType
type FastString = String
data AlgTyConRhs
AbstractTyCon :: AlgTyConRhs
DataTyCon :: [DataCon] -> AlgTyConRhs
[data_cons] :: AlgTyConRhs -> [DataCon]
TupleTyCon :: DataCon -> AlgTyConRhs
[data_con] :: AlgTyConRhs -> DataCon
SumTyCon :: [DataCon] -> AlgTyConRhs
[data_cons] :: AlgTyConRhs -> [DataCon]
NewTyCon :: DataCon -> AlgTyConRhs
[data_con] :: AlgTyConRhs -> DataCon
data DataCon
DataCon_ :: DataCon
data Role
Representational :: Role
data CoAxiom (a :: BranchFlag)
CoAxiom_ :: CoAxiom (a :: BranchFlag)
data BranchFlag
BFBranched :: BranchFlag
BFUnbranched :: BranchFlag
type Unbranched = 'BFUnbranched
data PrimOp
IntAddOp :: PrimOp
IntSubOp :: PrimOp
IntMulOp :: PrimOp
IntQuotOp :: PrimOp
IntRemOp :: PrimOp
IntGtOp :: PrimOp
IntGeOp :: PrimOp
IntLtOp :: PrimOp
IntLeOp :: PrimOp
IntEqOp :: PrimOp
data Expr b
Var :: Id -> Expr b
Lit :: Literal -> Expr b
App :: Expr b -> Arg b -> Expr b
Lam :: b -> Expr b -> Expr b
Let :: Bind b -> Expr b -> Expr b
Case :: Expr b -> b -> Type -> [Alt b] -> Expr b
Cast :: Expr b -> Coercion -> Expr b
Tick :: Tickish Id -> Expr b -> Expr b
Type :: Type -> Expr b
Coercion :: Coercion -> Expr b
data Bind b
NonRec :: b -> Expr b -> Bind b
Rec :: [(b, Expr b)] -> Bind b
data AltCon
DataAlt :: DataCon -> AltCon

-- | A literal: <tt>case e of { 1 -&gt; ... }</tt> Invariant: always an
--   *unlifted* literal See Note [Literal alternatives]
LitAlt :: Literal -> AltCon

-- | Trivial alternative: <tt>case e of { _ -&gt; ... }</tt>
DEFAULT :: AltCon
type CoreExpr = Expr CoreBndr
type CoreBndr = Var
type CoreAlt = Alt CoreBndr
type CoreBind = Bind CoreBndr
type CoreProgram = [CoreBind]
type Arg b = Expr b
type Alt b = (AltCon, [b], Expr b)
data ImpDeclSpec
ImpDeclSpec :: ModuleName -> ModuleName -> Bool -> SrcSpan -> ImpDeclSpec

-- | Module imported, e.g. <tt>import Muggle</tt> Note the <tt>Muggle</tt>
--   may well not be the defining module for this thing!
[is_mod] :: ImpDeclSpec -> ModuleName

-- | Import alias, e.g. from <tt>as M</tt> (or <tt>Muggle</tt> if there is
--   no <tt>as</tt> clause)
[is_as] :: ImpDeclSpec -> ModuleName

-- | Was this import qualified?
[is_qual] :: ImpDeclSpec -> Bool

-- | The location of the entire import declaration
[is_dloc] :: ImpDeclSpec -> SrcSpan
data ImpItemSpec
ImpAll :: ImpItemSpec
ImpSome :: Bool -> SrcSpan -> ImpItemSpec
[is_explicit] :: ImpItemSpec -> Bool
[is_iloc] :: ImpItemSpec -> SrcSpan
data ImportSpec
ImpSpec :: ImpDeclSpec -> ImpItemSpec -> ImportSpec
[is_decl] :: ImportSpec -> ImpDeclSpec
[is_item] :: ImportSpec -> ImpItemSpec
data ModIface
ModIface :: [IfaceExport] -> ModIface
[mi_exports] :: ModIface -> [IfaceExport]
data ModGuts
ModGuts :: FamInstEnv -> Module -> ModGuts
[mg_fam_inst_env] :: ModGuts -> FamInstEnv
[mg_module] :: ModGuts -> Module
data FamInstEnv
FamInstEnv_ :: FamInstEnv
data SimplMode
SimplMode :: [String] -> CompilerPhase -> DynFlags -> Bool -> Bool -> Bool -> Bool -> SimplMode
[sm_names] :: SimplMode -> [String]
[sm_phase] :: SimplMode -> CompilerPhase
[sm_dflags] :: SimplMode -> DynFlags
[sm_rules] :: SimplMode -> Bool
[sm_inline] :: SimplMode -> Bool
[sm_case_case] :: SimplMode -> Bool
[sm_eta_expand] :: SimplMode -> Bool
data CompilerPhase
Phase :: PhaseNum -> CompilerPhase
InitialPhase :: CompilerPhase
type PhaseNum = Int
data CoreToDo
CoreDoSimplify :: Int -> SimplMode -> CoreToDo
CoreDoPluginPass :: String -> CorePluginPass -> CoreToDo
CoreDoFloatInwards :: CoreToDo
CoreDoFloatOutwards :: FloatOutSwitches -> CoreToDo
CoreLiberateCase :: CoreToDo
CoreDoPrintCore :: CoreToDo
CoreDoStaticArgs :: CoreToDo
CoreDoCallArity :: CoreToDo
CoreDoExitify :: CoreToDo
CoreDoStrictness :: CoreToDo
CoreDoWorkerWrapper :: CoreToDo
CoreDoSpecialising :: CoreToDo
CoreDoSpecConstr :: CoreToDo
CoreCSE :: CoreToDo
CoreDoRuleCheck :: CompilerPhase -> String -> CoreToDo
CoreDoNothing :: CoreToDo
CoreDoPasses :: [CoreToDo] -> CoreToDo
CoreDesugar :: CoreToDo
CoreDesugarOpt :: CoreToDo
CoreTidy :: CoreToDo
CorePrep :: CoreToDo
CoreOccurAnal :: CoreToDo
data GlobalRdrElt
GRE :: Name -> Parent -> Bool -> [ImportSpec] -> GlobalRdrElt
[gre_name] :: GlobalRdrElt -> Name
[gre_par] :: GlobalRdrElt -> Parent

-- | True <a>=</a> the thing was defined locally
[gre_lcl] :: GlobalRdrElt -> Bool

-- | In scope through these imports
[gre_imp] :: GlobalRdrElt -> [ImportSpec]
data Parent
Parent_ :: Parent
data FloatOutSwitches
FloatOutSwitches_ :: FloatOutSwitches
type CorePluginPass = ModGuts -> CoreM ModGuts
type IfaceExport = AvailInfo
data AvailInfo
AvailInfo_ :: AvailInfo
data GlobalRdrEnv
GlobalRdrEnv_ :: GlobalRdrEnv
data UniqSet a
UniqSet_ :: UniqSet a
data StubM a
StubM_ :: StubM a
newtype Hsc a
Hsc_ :: StubM a -> Hsc a
newtype CoreM a
CoreM_ :: StubM a -> CoreM a
newtype TcM a
TcM_ :: StubM a -> TcM a
type TcRn a = TcM a
newtype IfM ab a
IfM_ :: StubM a -> IfM ab a
newtype Ghc a
Ghc_ :: StubM a -> Ghc a
data ModLocation
ModLocation_ :: ModLocation
data ModuleOrigin
ModuleOrigin_ :: ModuleOrigin
data UnusablePackageReason
UnusablePackageReason_ :: UnusablePackageReason
data ModuleSuggestion
ModuleSuggestion_ :: ModuleSuggestion
data FindResult

-- | The module was found
Found :: ModLocation -> Module -> FindResult

-- | The requested package was not found
NoPackage :: UnitId -> FindResult

-- | _Error_: both in multiple packages
FoundMultiple :: [(Module, ModuleOrigin)] -> FindResult

-- | Not found
NotFound :: [FilePath] -> Maybe UnitId -> [UnitId] -> [UnitId] -> [(UnitId, UnusablePackageReason)] -> [ModuleSuggestion] -> FindResult
[fr_paths] :: FindResult -> [FilePath]
[fr_pkg] :: FindResult -> Maybe UnitId
[fr_mods_hidden] :: FindResult -> [UnitId]
[fr_pkgs_hidden] :: FindResult -> [UnitId]
[fr_unusables] :: FindResult -> [(UnitId, UnusablePackageReason)]
[fr_suggestions] :: FindResult -> [ModuleSuggestion]
class Outputable a
ppr :: Outputable a => a -> SDoc
pprPrec :: Outputable a => Rational -> a -> SDoc
occName :: Name -> OccName
occNameString :: OccName -> String
moduleName :: Module -> ModuleName
nameModule_maybe :: Name -> Maybe Module
moduleUnitId :: Module -> UnitId
stableModuleNameCmp :: ModuleName -> ModuleName -> Ordering
stableUnitIdCmp :: UnitId -> UnitId -> Ordering
fingerprintString :: String -> Fingerprint
fingerprintFingerprints :: [Fingerprint] -> Fingerprint
(<+>) :: SDoc -> SDoc -> SDoc
text :: String -> SDoc
mi_module :: ModIface -> Module
showSDocForUser :: DynFlags -> PrintUnqualified -> SDoc -> String
alwaysQualify :: PrintUnqualified
tyConsOfType :: Type -> UniqSet TyCon
mkCoercionTy :: Coercion -> Type
varType :: Var -> Type
isLiftedTypeKind :: Kind -> Bool
classifiesTypeWithValues :: Kind -> Bool
isRuntimeRepTy :: Type -> Bool
isRuntimeRepKindedTy :: Type -> Bool
splitFunTy_maybe :: Type -> Maybe (Type, Type)
unitTy :: Type
unitDataConId :: Id
voidPrimId :: Id
voidArgId :: Id
rUNTIME_ERROR_ID :: Id
getOccString :: a -> String
getName :: a -> Name
tyVarKind :: a -> Kind
tyConKind :: a -> Kind
tyThingId :: a -> Id
tyThingTyCon :: a -> TyCon
boolTy :: Type
stringTy :: Type
charTy :: Type
getOccName :: a -> OccName
trueDataCon :: DataCon
falseDataCon :: DataCon
unitDataCon :: DataCon
charDataCon :: DataCon
boolTyCon :: TyCon
listTyCon :: TyCon
intTyCon :: TyCon
intPrimTyCon :: TyCon
addrPrimTyCon :: TyCon
voidPrimTyCon :: TyCon
unitTyCon :: TyCon
nonDetEltsUniqSet :: UniqSet a -> [a]
normaliseType :: a -> b -> c -> (Coercion, Type)
getTyVar_maybe :: a -> Maybe TyVar
splitTyConApp_maybe :: Type -> Maybe (TyCon, [Type])
splitAppTy_maybe :: Type -> Maybe (Type, Type)
splitForAllTy_maybe :: Type -> Maybe (TyVar, Type)
splitCastTy_maybe :: Type -> Maybe (Type, Coercion)
splitPiTy_maybe :: Type -> Maybe (TyCoBinder, Type)
unwrapNewTyCon_maybe :: TyCon -> Maybe ([TyVar], Type, CoAxiom Unbranched)
tyConTyVars :: TyCon -> [TyVar]
unionManyUniqSets :: [UniqSet a] -> UniqSet a
dataConTyCon :: DataCon -> TyCon
dataConOrigArgTys :: DataCon -> [Type]
dataConInstOrigArgTys :: DataCon -> [Type] -> [Type]
dataConOrigResTy :: DataCon -> Type
isAlgTyCon :: TyCon -> Bool
isTupleTyCon :: TyCon -> Bool
isFamilyTyCon :: TyCon -> Bool
isStrLitTy :: Type -> Maybe FastString
($+$) :: a -> b -> b
infixl 5 $+$
algTyConRhs :: TyCon -> AlgTyConRhs
mkCharExpr :: Char -> CoreExpr
isDefaultAlt :: a -> Bool
mkListExpr :: Type -> [CoreExpr] -> CoreExpr
findAlt :: AltCon -> [(AltCon, a, b)] -> Maybe (AltCon, a, b)
errorIds :: [Id]
fvVarList :: FV -> [Var]
isTyVar :: a -> Bool
unpackCStringName :: Name
unpackCStringFoldrName :: Name
buildName :: Name
idDetails :: Id -> IdDetails
realIdUnfolding :: Id -> Unfolding
mkDictSelRhs :: Class -> Int -> CoreExpr
classAllSelIds :: Class -> [Id]
expr_fvs :: CoreExpr -> FV
maybeUnfoldingTemplate :: Unfolding -> Maybe CoreExpr
mkImpossibleExpr :: Type -> CoreExpr
getDynFlags :: Monad m => m DynFlags
mkFastString :: String -> FastString
moduleNameString :: ModuleName -> String
findExposedPackageModule :: HscEnv -> ModuleName -> Maybe FastString -> IO FindResult
mkModule :: UnitId -> ModuleName -> Module
initTcInteractive :: HscEnv -> TcM a -> IO (Messages, Maybe a)
initIfaceTcRn :: a -> TcRn b
mkTyConApp :: TyCon -> [Type] -> Type
lookupId :: Monad m => Name -> m Id
lookupTyCon :: Monad m => Name -> m TyCon
mkRuntimeErrorApp :: Id -> Type -> String -> CoreExpr
idName :: Id -> Name
showPpr :: DynFlags -> a -> String
lookupThing :: Monad m => Name -> m TyThing
mkTyConTy :: TyCon -> Type
mkCoreApps :: CoreExpr -> [CoreExpr] -> CoreExpr
mkIntExpr :: DynFlags -> Integer -> CoreExpr
mkModuleName :: String -> ModuleName
noSrcSpan :: SrcSpan
throwGhcExceptionIO :: GhcException -> IO a
showSDoc :: DynFlags -> SDoc -> String
cannotFindModule :: DynFlags -> ModuleName -> FindResult -> SDoc
hsep :: [SDoc] -> SDoc
panic :: String -> a
lookupGRE_RdrName :: RdrName -> GlobalRdrEnv -> [GlobalRdrElt]
gresFromAvails :: Maybe ImportSpec -> [AvailInfo] -> [GlobalRdrElt]
mkGlobalRdrEnv :: [GlobalRdrElt] -> GlobalRdrEnv
loadPluginInterface :: SDoc -> Module -> IfM lcl ModIface
getHscEnv :: Monad m => m HscEnv
type PackageFamInstEnv = FamInstEnv
getPackageFamInstEnv :: CoreM PackageFamInstEnv
mkUnqual :: NameSpace -> FastString -> RdrName
bindsOnlyPass :: (CoreProgram -> CoreM CoreProgram) -> ModGuts -> CoreM ModGuts
varName :: NameSpace
dataName :: NameSpace
tcClsName :: NameSpace
tyConAppTyCon_maybe :: Type -> Maybe TyCon
nameOccName :: Name -> OccName
charTyConName :: Name
noinlineIdName :: Name
nilDataCon :: DataCon
dataConWorkId :: DataCon -> Id
thNameToGhcName :: Name -> CoreM (Maybe Name)
showSDocUnsafe :: SDoc -> String
dropRuntimeRepArgs :: [Type] -> [Type]

module FamInstEnv

module CoreSyn

module TcRnMonad

module TcRnTypes
data TcPlugin

module Plugins
data FrontendPlugin
FrontendPlugin :: FrontendPluginAction -> FrontendPlugin
[frontend] :: FrontendPlugin -> FrontendPluginAction
defaultFrontendPlugin :: FrontendPlugin
type FrontendPluginAction = [String] -> [(String, Maybe Phase)] -> Ghc ()

-- | <a>Plugin</a> is the compiler plugin data type. Try to avoid
--   constructing one of these directly, and just modify some fields of
--   <a>defaultPlugin</a> instead: this is to try and preserve source-code
--   compatibility when we add fields to this.
--   
--   Nonetheless, this API is preliminary and highly likely to change in
--   the future.
data Plugin
Plugin :: CorePlugin -> TcPlugin -> ([CommandLineOption] -> IO PluginRecompile) -> ([CommandLineOption] -> ModSummary -> HsParsedModule -> Hsc HsParsedModule) -> ([CommandLineOption] -> TcGblEnv -> HsGroup GhcRn -> TcM (TcGblEnv, HsGroup GhcRn)) -> ([CommandLineOption] -> ModSummary -> TcGblEnv -> TcM TcGblEnv) -> ([CommandLineOption] -> LHsExpr GhcTc -> TcM (LHsExpr GhcTc)) -> (forall lcl. [CommandLineOption] -> ModIface -> IfM lcl ModIface) -> Plugin

-- | Modify the Core pipeline that will be used for compilation. This is
--   called as the Core pipeline is built for every module being compiled,
--   and plugins get the opportunity to modify the pipeline in a
--   nondeterministic order.
[installCoreToDos] :: Plugin -> CorePlugin

-- | An optional typechecker plugin, which may modify the behaviour of the
--   constraint solver.
[tcPlugin] :: Plugin -> TcPlugin

-- | Specify how the plugin should affect recompilation.
[pluginRecompile] :: Plugin -> [CommandLineOption] -> IO PluginRecompile

-- | Modify the module when it is parsed. This is called by HscMain when
--   the parsing is successful.
[parsedResultAction] :: Plugin -> [CommandLineOption] -> ModSummary -> HsParsedModule -> Hsc HsParsedModule

-- | Modify each group after it is renamed. This is called after each
--   <a>HsGroup</a> has been renamed.
[renamedResultAction] :: Plugin -> [CommandLineOption] -> TcGblEnv -> HsGroup GhcRn -> TcM (TcGblEnv, HsGroup GhcRn)

-- | Modify the module when it is type checked. This is called add the very
--   end of typechecking.
[typeCheckResultAction] :: Plugin -> [CommandLineOption] -> ModSummary -> TcGblEnv -> TcM TcGblEnv

-- | Modify the TH splice or quasiqoute before it is run.
[spliceRunAction] :: Plugin -> [CommandLineOption] -> LHsExpr GhcTc -> TcM (LHsExpr GhcTc)

-- | Modify an interface that have been loaded. This is called by LoadIface
--   when an interface is successfully loaded. Not applied to the loading
--   of the plugin interface. Tools that rely on information from modules
--   other than the currently compiled one should implement this function.
[interfaceLoadAction] :: Plugin -> forall lcl. [CommandLineOption] -> ModIface -> IfM lcl ModIface
type CommandLineOption = String

-- | A plugin with its arguments. The result of loading the plugin.
data LoadedPlugin
LoadedPlugin :: Plugin -> ModIface -> [CommandLineOption] -> LoadedPlugin

-- | the actual callable plugin
[lpPlugin] :: LoadedPlugin -> Plugin

-- | the module containing the plugin
[lpModule] :: LoadedPlugin -> ModIface

-- | command line arguments for the plugin
[lpArguments] :: LoadedPlugin -> [CommandLineOption]
lpModuleName :: LoadedPlugin -> ModuleName

-- | Default plugin: does nothing at all! For compatibility reasons you
--   should base all your plugin definitions on this default value.
defaultPlugin :: Plugin

-- | A renamer plugin which mades the renamed source available in a
--   typechecker plugin.
keepRenamedSource :: [CommandLineOption] -> TcGblEnv -> HsGroup GhcRn -> TcM (TcGblEnv, HsGroup GhcRn)

-- | Perform an operation by using all of the plugins in turn.
withPlugins :: Monad m => DynFlags -> PluginOperation m a -> a -> m a

-- | Perform a constant operation by using all of the plugins in turn.
withPlugins_ :: Monad m => DynFlags -> ConstPluginOperation m a -> a -> m ()
data PluginRecompile
ForceRecompile :: PluginRecompile
NoForceRecompile :: PluginRecompile
MaybeRecompile :: Fingerprint -> PluginRecompile
purePlugin :: [CommandLineOption] -> IO PluginRecompile
impurePlugin :: [CommandLineOption] -> IO PluginRecompile
flagRecompile :: [CommandLineOption] -> IO PluginRecompile
instance StubTypes.Outputable Plugins.PluginRecompile
instance GHC.Base.Semigroup Plugins.PluginRecompile
instance GHC.Base.Monoid Plugins.PluginRecompile

module GhcPlugins
data DynFlags
DynFlags_ :: DynFlags
type FamInstEnvs = (FamInstEnv, FamInstEnv)
data Name
Name_ :: Name
data OccName
OccName_ :: OccName
data Module
Module_ :: Module
data UnitId
UnitId_ :: UnitId
data TyThing
TyThing_ :: TyThing
data ModSummary
ModSummary_ :: ModSummary
data TcGblEnv
TcGblEnv_ :: TcGblEnv
data LHsExpr a
LHsExpr_ :: LHsExpr a
data GhcTc
GhcTc_ :: GhcTc
data GhcRn
GhcRn_ :: GhcRn
data GhcException
CmdLineError :: String -> GhcException
ProgramError :: String -> GhcException
PprProgramError :: String -> SDoc -> GhcException
data ModuleName
ModuleName_ :: ModuleName
data SDoc
SDoc_ :: SDoc
data HsParsedModule
HsParsedModule_ :: HsParsedModule
data HsGroup a
HsGroup_ :: HsGroup a
data Phase
Phase_ :: Phase
data Coercion
Coercion_ :: Coercion
data Type
Type_ :: Type
type Kind = Type
type TyVar = Var
data TyCoBinder
TyCoBinder_ :: TyCoBinder
data SrcSpan
SrcSpan_ :: SrcSpan
data RealSrcSpan
RealSrcSpan_ :: RealSrcSpan
data Tickish a
SourceNote :: RealSrcSpan -> String -> Tickish a

-- | Source covered
[sourceSpan] :: Tickish a -> RealSrcSpan

-- | Name for source location
[sourceName] :: Tickish a -> String
data Var
Var_ :: Var
type Id = Var
data Fingerprint
Fingerprint_ :: Fingerprint
data PrintUnqualified
PrintUnqualified_ :: PrintUnqualified
data TyCon
TyCon_ :: TyCon
data IdDetails
ClassOpId :: Class -> IdDetails
DataConWorkId :: DataCon -> IdDetails
PrimOpId :: PrimOp -> IdDetails
data IdUnfolding
IdUnfolding_ :: IdUnfolding
data Unfolding
Unfolding_ :: Unfolding
data FunctionOrData
IsFunction :: FunctionOrData
IsData :: FunctionOrData
data FV
FV_ :: FV
data Class
Class_ :: Class
data NameSpace
NameSpace_ :: NameSpace
data HscEnv
HscEnv :: DynFlags -> HscEnv
[hsc_dflags] :: HscEnv -> DynFlags
data RdrName
RdrName_ :: RdrName
data Messages
Messages_ :: Messages
data Literal

-- | <tt>Char#</tt> - at least 31 bits. Create with <tt>mkMachChar</tt>
LitChar :: Char -> Literal
LitNumber :: !LitNumType -> !Integer -> Type -> Literal

-- | A string-literal: stored and emitted UTF-8 encoded, we'll arrange to
--   decode it at runtime. Also emitted with a <tt>'0'</tt> terminator.
--   Create with <tt>mkMachString</tt>
LitString :: ByteString -> Literal

-- | The <tt>NULL</tt> pointer, the only pointer value that can be
--   represented as a Literal. Create with <tt>nullAddrLit</tt>
LitNullAddr :: Literal

-- | A nonsense value, used when an unlifted binding is absent and has type
--   <tt>forall (a :: <tt>TYPE</tt> <tt>UnliftedRep</tt>). a</tt>. May be
--   lowered by code-gen to any possible value. Also see Note [Rubbish
--   literals]
LitRubbish :: Literal

-- | <tt>Float#</tt>. Create with <tt>mkMachFloat</tt>
LitFloat :: Rational -> Literal

-- | <tt>Double#</tt>. Create with <tt>mkMachDouble</tt>
LitDouble :: Rational -> Literal

-- | A label literal. Parameters:
--   
--   1) The name of the symbol mentioned in the declaration
--   
--   2) The size (in bytes) of the arguments the label expects. Only
--   applicable with <tt>stdcall</tt> labels. <tt>Just x</tt> =&gt;
--   <tt>&lt;x&gt;</tt> will be appended to label name when emitting
--   assembly.
LitLabel :: FastString -> Maybe Int -> FunctionOrData -> Literal

-- | Numeric literal type
data LitNumType

-- | <tt>Integer</tt> (see Note [Integer literals])
LitNumInteger :: LitNumType

-- | <tt>Natural</tt> (see Note [Natural literals])
LitNumNatural :: LitNumType

-- | <tt>Int#</tt> - according to target machine
LitNumInt :: LitNumType

-- | <tt>Int64#</tt> - exactly 64 bits
LitNumInt64 :: LitNumType

-- | <tt>Word#</tt> - according to target machine
LitNumWord :: LitNumType

-- | <tt>Word64#</tt> - exactly 64 bits
LitNumWord64 :: LitNumType
type FastString = String
data AlgTyConRhs
AbstractTyCon :: AlgTyConRhs
DataTyCon :: [DataCon] -> AlgTyConRhs
[data_cons] :: AlgTyConRhs -> [DataCon]
TupleTyCon :: DataCon -> AlgTyConRhs
[data_con] :: AlgTyConRhs -> DataCon
SumTyCon :: [DataCon] -> AlgTyConRhs
[data_cons] :: AlgTyConRhs -> [DataCon]
NewTyCon :: DataCon -> AlgTyConRhs
[data_con] :: AlgTyConRhs -> DataCon
data DataCon
DataCon_ :: DataCon
data Role
Representational :: Role
data CoAxiom (a :: BranchFlag)
CoAxiom_ :: CoAxiom (a :: BranchFlag)
data BranchFlag
BFBranched :: BranchFlag
BFUnbranched :: BranchFlag
type Unbranched = 'BFUnbranched
data PrimOp
IntAddOp :: PrimOp
IntSubOp :: PrimOp
IntMulOp :: PrimOp
IntQuotOp :: PrimOp
IntRemOp :: PrimOp
IntGtOp :: PrimOp
IntGeOp :: PrimOp
IntLtOp :: PrimOp
IntLeOp :: PrimOp
IntEqOp :: PrimOp
data Expr b
Var :: Id -> Expr b
Lit :: Literal -> Expr b
App :: Expr b -> Arg b -> Expr b
Lam :: b -> Expr b -> Expr b
Let :: Bind b -> Expr b -> Expr b
Case :: Expr b -> b -> Type -> [Alt b] -> Expr b
Cast :: Expr b -> Coercion -> Expr b
Tick :: Tickish Id -> Expr b -> Expr b
Type :: Type -> Expr b
Coercion :: Coercion -> Expr b
data Bind b
NonRec :: b -> Expr b -> Bind b
Rec :: [(b, Expr b)] -> Bind b
data AltCon
DataAlt :: DataCon -> AltCon

-- | A literal: <tt>case e of { 1 -&gt; ... }</tt> Invariant: always an
--   *unlifted* literal See Note [Literal alternatives]
LitAlt :: Literal -> AltCon

-- | Trivial alternative: <tt>case e of { _ -&gt; ... }</tt>
DEFAULT :: AltCon
type CoreExpr = Expr CoreBndr
type CoreBndr = Var
type CoreAlt = Alt CoreBndr
type CoreBind = Bind CoreBndr
type CoreProgram = [CoreBind]
type Arg b = Expr b
type Alt b = (AltCon, [b], Expr b)
data ImpDeclSpec
ImpDeclSpec :: ModuleName -> ModuleName -> Bool -> SrcSpan -> ImpDeclSpec

-- | Module imported, e.g. <tt>import Muggle</tt> Note the <tt>Muggle</tt>
--   may well not be the defining module for this thing!
[is_mod] :: ImpDeclSpec -> ModuleName

-- | Import alias, e.g. from <tt>as M</tt> (or <tt>Muggle</tt> if there is
--   no <tt>as</tt> clause)
[is_as] :: ImpDeclSpec -> ModuleName

-- | Was this import qualified?
[is_qual] :: ImpDeclSpec -> Bool

-- | The location of the entire import declaration
[is_dloc] :: ImpDeclSpec -> SrcSpan
data ImpItemSpec
ImpAll :: ImpItemSpec
ImpSome :: Bool -> SrcSpan -> ImpItemSpec
[is_explicit] :: ImpItemSpec -> Bool
[is_iloc] :: ImpItemSpec -> SrcSpan
data ImportSpec
ImpSpec :: ImpDeclSpec -> ImpItemSpec -> ImportSpec
[is_decl] :: ImportSpec -> ImpDeclSpec
[is_item] :: ImportSpec -> ImpItemSpec
data ModIface
ModIface :: [IfaceExport] -> ModIface
[mi_exports] :: ModIface -> [IfaceExport]
data ModGuts
ModGuts :: FamInstEnv -> Module -> ModGuts
[mg_fam_inst_env] :: ModGuts -> FamInstEnv
[mg_module] :: ModGuts -> Module
data FamInstEnv
FamInstEnv_ :: FamInstEnv
data SimplMode
SimplMode :: [String] -> CompilerPhase -> DynFlags -> Bool -> Bool -> Bool -> Bool -> SimplMode
[sm_names] :: SimplMode -> [String]
[sm_phase] :: SimplMode -> CompilerPhase
[sm_dflags] :: SimplMode -> DynFlags
[sm_rules] :: SimplMode -> Bool
[sm_inline] :: SimplMode -> Bool
[sm_case_case] :: SimplMode -> Bool
[sm_eta_expand] :: SimplMode -> Bool
data CompilerPhase
Phase :: PhaseNum -> CompilerPhase
InitialPhase :: CompilerPhase
type PhaseNum = Int
data CoreToDo
CoreDoSimplify :: Int -> SimplMode -> CoreToDo
CoreDoPluginPass :: String -> CorePluginPass -> CoreToDo
CoreDoFloatInwards :: CoreToDo
CoreDoFloatOutwards :: FloatOutSwitches -> CoreToDo
CoreLiberateCase :: CoreToDo
CoreDoPrintCore :: CoreToDo
CoreDoStaticArgs :: CoreToDo
CoreDoCallArity :: CoreToDo
CoreDoExitify :: CoreToDo
CoreDoStrictness :: CoreToDo
CoreDoWorkerWrapper :: CoreToDo
CoreDoSpecialising :: CoreToDo
CoreDoSpecConstr :: CoreToDo
CoreCSE :: CoreToDo
CoreDoRuleCheck :: CompilerPhase -> String -> CoreToDo
CoreDoNothing :: CoreToDo
CoreDoPasses :: [CoreToDo] -> CoreToDo
CoreDesugar :: CoreToDo
CoreDesugarOpt :: CoreToDo
CoreTidy :: CoreToDo
CorePrep :: CoreToDo
CoreOccurAnal :: CoreToDo
data GlobalRdrElt
GRE :: Name -> Parent -> Bool -> [ImportSpec] -> GlobalRdrElt
[gre_name] :: GlobalRdrElt -> Name
[gre_par] :: GlobalRdrElt -> Parent

-- | True <a>=</a> the thing was defined locally
[gre_lcl] :: GlobalRdrElt -> Bool

-- | In scope through these imports
[gre_imp] :: GlobalRdrElt -> [ImportSpec]
data Parent
Parent_ :: Parent
data FloatOutSwitches
FloatOutSwitches_ :: FloatOutSwitches
type CorePluginPass = ModGuts -> CoreM ModGuts
type IfaceExport = AvailInfo
data AvailInfo
AvailInfo_ :: AvailInfo
data GlobalRdrEnv
GlobalRdrEnv_ :: GlobalRdrEnv
data UniqSet a
UniqSet_ :: UniqSet a
data StubM a
StubM_ :: StubM a
newtype Hsc a
Hsc_ :: StubM a -> Hsc a
newtype CoreM a
CoreM_ :: StubM a -> CoreM a
newtype TcM a
TcM_ :: StubM a -> TcM a
type TcRn a = TcM a
newtype IfM ab a
IfM_ :: StubM a -> IfM ab a
newtype Ghc a
Ghc_ :: StubM a -> Ghc a
data ModLocation
ModLocation_ :: ModLocation
data ModuleOrigin
ModuleOrigin_ :: ModuleOrigin
data UnusablePackageReason
UnusablePackageReason_ :: UnusablePackageReason
data ModuleSuggestion
ModuleSuggestion_ :: ModuleSuggestion
data FindResult

-- | The module was found
Found :: ModLocation -> Module -> FindResult

-- | The requested package was not found
NoPackage :: UnitId -> FindResult

-- | _Error_: both in multiple packages
FoundMultiple :: [(Module, ModuleOrigin)] -> FindResult

-- | Not found
NotFound :: [FilePath] -> Maybe UnitId -> [UnitId] -> [UnitId] -> [(UnitId, UnusablePackageReason)] -> [ModuleSuggestion] -> FindResult
[fr_paths] :: FindResult -> [FilePath]
[fr_pkg] :: FindResult -> Maybe UnitId
[fr_mods_hidden] :: FindResult -> [UnitId]
[fr_pkgs_hidden] :: FindResult -> [UnitId]
[fr_unusables] :: FindResult -> [(UnitId, UnusablePackageReason)]
[fr_suggestions] :: FindResult -> [ModuleSuggestion]
class Outputable a
ppr :: Outputable a => a -> SDoc
pprPrec :: Outputable a => Rational -> a -> SDoc
occName :: Name -> OccName
occNameString :: OccName -> String
moduleName :: Module -> ModuleName
nameModule_maybe :: Name -> Maybe Module
moduleUnitId :: Module -> UnitId
stableModuleNameCmp :: ModuleName -> ModuleName -> Ordering
stableUnitIdCmp :: UnitId -> UnitId -> Ordering
fingerprintString :: String -> Fingerprint
fingerprintFingerprints :: [Fingerprint] -> Fingerprint
(<+>) :: SDoc -> SDoc -> SDoc
text :: String -> SDoc
mi_module :: ModIface -> Module
showSDocForUser :: DynFlags -> PrintUnqualified -> SDoc -> String
alwaysQualify :: PrintUnqualified
tyConsOfType :: Type -> UniqSet TyCon
mkCoercionTy :: Coercion -> Type
varType :: Var -> Type
isLiftedTypeKind :: Kind -> Bool
classifiesTypeWithValues :: Kind -> Bool
isRuntimeRepTy :: Type -> Bool
isRuntimeRepKindedTy :: Type -> Bool
splitFunTy_maybe :: Type -> Maybe (Type, Type)
unitTy :: Type
unitDataConId :: Id
voidPrimId :: Id
voidArgId :: Id
rUNTIME_ERROR_ID :: Id
getOccString :: a -> String
getName :: a -> Name
tyVarKind :: a -> Kind
tyConKind :: a -> Kind
tyThingId :: a -> Id
tyThingTyCon :: a -> TyCon
boolTy :: Type
stringTy :: Type
charTy :: Type
getOccName :: a -> OccName
trueDataCon :: DataCon
falseDataCon :: DataCon
unitDataCon :: DataCon
charDataCon :: DataCon
boolTyCon :: TyCon
listTyCon :: TyCon
intTyCon :: TyCon
intPrimTyCon :: TyCon
addrPrimTyCon :: TyCon
voidPrimTyCon :: TyCon
unitTyCon :: TyCon
nonDetEltsUniqSet :: UniqSet a -> [a]
normaliseType :: a -> b -> c -> (Coercion, Type)
getTyVar_maybe :: a -> Maybe TyVar
splitTyConApp_maybe :: Type -> Maybe (TyCon, [Type])
splitAppTy_maybe :: Type -> Maybe (Type, Type)
splitForAllTy_maybe :: Type -> Maybe (TyVar, Type)
splitCastTy_maybe :: Type -> Maybe (Type, Coercion)
splitPiTy_maybe :: Type -> Maybe (TyCoBinder, Type)
unwrapNewTyCon_maybe :: TyCon -> Maybe ([TyVar], Type, CoAxiom Unbranched)
tyConTyVars :: TyCon -> [TyVar]
unionManyUniqSets :: [UniqSet a] -> UniqSet a
dataConTyCon :: DataCon -> TyCon
dataConOrigArgTys :: DataCon -> [Type]
dataConInstOrigArgTys :: DataCon -> [Type] -> [Type]
dataConOrigResTy :: DataCon -> Type
isAlgTyCon :: TyCon -> Bool
isTupleTyCon :: TyCon -> Bool
isFamilyTyCon :: TyCon -> Bool
isStrLitTy :: Type -> Maybe FastString
($+$) :: a -> b -> b
infixl 5 $+$
algTyConRhs :: TyCon -> AlgTyConRhs
mkCharExpr :: Char -> CoreExpr
isDefaultAlt :: a -> Bool
mkListExpr :: Type -> [CoreExpr] -> CoreExpr
findAlt :: AltCon -> [(AltCon, a, b)] -> Maybe (AltCon, a, b)
errorIds :: [Id]
fvVarList :: FV -> [Var]
isTyVar :: a -> Bool
unpackCStringName :: Name
unpackCStringFoldrName :: Name
buildName :: Name
idDetails :: Id -> IdDetails
realIdUnfolding :: Id -> Unfolding
mkDictSelRhs :: Class -> Int -> CoreExpr
classAllSelIds :: Class -> [Id]
expr_fvs :: CoreExpr -> FV
maybeUnfoldingTemplate :: Unfolding -> Maybe CoreExpr
mkImpossibleExpr :: Type -> CoreExpr
getDynFlags :: Monad m => m DynFlags
mkFastString :: String -> FastString
moduleNameString :: ModuleName -> String
findExposedPackageModule :: HscEnv -> ModuleName -> Maybe FastString -> IO FindResult
mkModule :: UnitId -> ModuleName -> Module
initTcInteractive :: HscEnv -> TcM a -> IO (Messages, Maybe a)
initIfaceTcRn :: a -> TcRn b
mkTyConApp :: TyCon -> [Type] -> Type
lookupId :: Monad m => Name -> m Id
lookupTyCon :: Monad m => Name -> m TyCon
mkRuntimeErrorApp :: Id -> Type -> String -> CoreExpr
idName :: Id -> Name
showPpr :: DynFlags -> a -> String
lookupThing :: Monad m => Name -> m TyThing
mkTyConTy :: TyCon -> Type
mkCoreApps :: CoreExpr -> [CoreExpr] -> CoreExpr
mkIntExpr :: DynFlags -> Integer -> CoreExpr
mkModuleName :: String -> ModuleName
noSrcSpan :: SrcSpan
throwGhcExceptionIO :: GhcException -> IO a
showSDoc :: DynFlags -> SDoc -> String
cannotFindModule :: DynFlags -> ModuleName -> FindResult -> SDoc
hsep :: [SDoc] -> SDoc
panic :: String -> a
lookupGRE_RdrName :: RdrName -> GlobalRdrEnv -> [GlobalRdrElt]
gresFromAvails :: Maybe ImportSpec -> [AvailInfo] -> [GlobalRdrElt]
mkGlobalRdrEnv :: [GlobalRdrElt] -> GlobalRdrEnv
loadPluginInterface :: SDoc -> Module -> IfM lcl ModIface
getHscEnv :: Monad m => m HscEnv
type PackageFamInstEnv = FamInstEnv
getPackageFamInstEnv :: CoreM PackageFamInstEnv
mkUnqual :: NameSpace -> FastString -> RdrName
bindsOnlyPass :: (CoreProgram -> CoreM CoreProgram) -> ModGuts -> CoreM ModGuts
varName :: NameSpace
dataName :: NameSpace
tcClsName :: NameSpace
tyConAppTyCon_maybe :: Type -> Maybe TyCon
nameOccName :: Name -> OccName
charTyConName :: Name
noinlineIdName :: Name
nilDataCon :: DataCon
dataConWorkId :: DataCon -> Id
thNameToGhcName :: Name -> CoreM (Maybe Name)
showSDocUnsafe :: SDoc -> String
dropRuntimeRepArgs :: [Type] -> [Type]

module TysPrim
